{"version":3,"file":"song-formatter.bundle.js","mappings":";qIAKa,EAAAA,iBAA+BC,OAAOC,OAAO,CACxD,KAAM,KACNC,GAAI,KACJ,KAAM,KACNC,GAAI,KACJC,GAAI,OAMO,EAAAC,kBAAgCL,OAAOC,OAAO,CAEzDK,WAAY,EAEZC,YAAa,ypBCpBf,kBAIS,EAAAC,SAJF,UACP,gBAGmB,EAAAC,mBAHZ,UAEQ,EAAAC,kBAAqC,UAAQ,kBAA1B,EAAAC,cAAkB,UAAQ,cAE5D,4ECJA,eAUMC,EAAWZ,OAAOa,KAAK,CAK3BC,MAAO,CACLC,IAAK,wBACLC,KAAM,kBACNC,KAAM,mBAMRC,OAAQ,CAENC,UAAW,UACXC,KAAM,UACNC,QAAS,UACTL,KAAM,UACNM,SAAU,UAEVC,QAAS,WAIXC,QAAS,CACPC,UAAU,EACVC,OAAQ,IACRC,MAAO,IACPC,UAAW,GACXC,YAAa,GACbC,UAAW,EACXC,UAAW,IACXC,WAAY,CACVC,EAAG,GACHC,EAAG,IAELC,OAAQ,EACRZ,QAAS,IAAM,IACfT,MAAO,CAAC,GAOVsB,cAAe,CACbX,UAAU,EACVC,OAAQ,GACRC,MAAO,GACPC,UAAW,EACXC,YAAa,EACbC,UAAW,EACXC,UAAW,EACXC,WAAY,CACVC,EAAG,GACHC,EAAG,GAELC,OAAQ,GAAM,EACdZ,QAAS,IACTT,MAAO,CACLC,IAAK,YACLC,KAAM,YACNC,KAAM,cAOVoB,IAAK,CAEHC,SAAU,cACVC,OAAQ,kBACRC,UAAW,oBAObC,YAAa,CAEXC,KAAM,iBACNC,SAAU,qBACV3B,KAAM,oBAOR4B,KAAM,CACJC,gBAAgB,EAKhBC,gBAAgB,EAKhBC,oBAAoB,EAKpBC,kBAAkB,EAKlBC,iBAAiB,EACjBC,cAAc,GAMhBC,gBAAgB,EAMhBC,SAAU,EAKVC,OAAQ,CAAC,IAAK,IAAK,IAAK,KAOxB1C,cAAa,IACJC,EAASyC,OAAOC,OAQzB5C,kBAAiB,IACRE,EAASyC,OAAO,GAOzBE,kBAAmB,EAAAlD,kBAAkBC,WAErCkD,KAAM,CACJC,YAAa,GACbC,YAAa,GACb3B,UAAW,EACX4B,UAAW,UACXC,WAAY,GACZC,UAAW,qDACXC,SAAU,UACVhC,UAAW,GACXiC,SAAU,0DACVC,UAAW,UACXC,cAAe,IAMjBC,aAAc,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,QAGpD,UAAetD,wLCxLf,kBACA,YACA,SAEA,SACA,QACA,YAGA,MAAMuD,EACJ,WAAAC,CAAYC,EAAoBC,GAKhC,KAAAC,OAAS,GAET,KAAAC,KAAiB,GANfC,KAAKF,OAASF,EACdI,KAAKD,KAAOF,GAAU,IACxB,EAQF,MAAMI,EAAU1E,OAAOC,OAAO,CAG5B0E,OAAgB,gCAChBC,IAAgB,qBAEhBC,KAAgB,WAChBC,MAAgB,uDAChBC,QAAgB,qCAChBC,MAAgB,4BAGhBC,OAAgB,sDAEhBC,YAAgB,kCAChBC,OAAgB,sDAGhBC,SAAgB,gBAChBC,IAAgB,SAIlB,SAASC,EAAcC,GAErB,KADAA,GAAO,IAAAC,MAAKD,IACFjC,QAAsB,MAAZiC,EAAK,GACvB,OAAO,KAET,MAAME,EAAUF,EAAKG,MAAMhB,EAAQC,QACnC,OAAOc,EACH,IAAItB,EAAWsB,EAAQ,GAc7B,SAAmBzE,GACjB,MAAM2E,EAAU,GAChB,IAAIF,EAAUzE,EAAK0E,MAAMhB,EAAQE,KACjC,KAAOa,GACLE,EAAQC,KAAKH,EAAQ,IAErBA,GADAzE,EAAOA,EAAK6E,QAAQJ,EAAQ,GAAI,KACjBC,MAAMhB,EAAQE,KAE/B,OAAOe,CACT,CAvBiCG,CAAUP,IACrC,IACN,CA8GA,SAASQ,EAAS/E,EAAcwD,GAC9B,MAAMwB,EAAkB,GAClBC,EAAmB,IA3D3B,SAAoBjF,EAAcgF,EAAiBC,GACjD,MAAMC,EAAclF,EAAK0E,MAAMhB,EAAQI,OACvC,IAAKoB,EACH,OAEF,MAAMT,EAAqC,IAA1BS,EAAY,GAAG5C,OAAgB4C,EAAY,GAAGR,MAAMhB,EAAQW,KAAOa,EAAY,GAAGR,MAAMhB,EAAQU,UACjH,IAAK,IAAIe,EAAI,EAAGV,GAAYU,GAAIV,aAAO,EAAPA,EAASnC,QAAS6C,IAAK,CACrD,MAAMC,EAAqB,MAAfX,EAAQU,IAA6B,MAAfV,EAAQU,GAC1CH,EAAMG,GAAKC,EAAM,EAAIC,SAASZ,EAAQU,GAAI,IAC1CF,EAAME,GAAKC,EAEf,CAiDEE,CAAWtF,EAAMgF,EAAOC,GAExB,MAAMM,EA/ER,SAAiBvF,GACf,MAAMyE,EAAUzE,EAAK0E,MAAMhB,EAAQG,MACnC,OAAQY,EAAiBA,EAAQ,GAAf,IACpB,CA4Eee,CAAQxF,GACfyF,EAlDR,SAAoBzF,GAClB,MAAMyE,EAAUzE,EAAK0E,MAAMhB,EAAQK,SACnC,IAAKU,EACH,MAAO,GAET,IAAIxD,EAAIwD,EAAQ,GAIhB,OAHiB,IAAbxD,EAAEqB,SACJrB,EAAIA,EAAE4D,QAAQnB,EAAQW,IAAK,QAEtBpD,EAAEyE,MAAM,IACjB,CAwCkBC,CAAW3F,GAE3B,GAAa,OAATuF,GAA0B,UAATA,EAEnB,OADA,IAAAK,KAAI,mDAAmD5F,KAChD,KAET,GAAc,OAAVgF,EAEF,OADA,IAAAY,KAAI,8CAA8C5F,KAC3C,KAET,MAAM6F,EAAO,IAAI,UAAMN,GACjBnF,EAhDR,SAAgB4E,EAA4BS,GAC1C,MAAM,OAAEpD,GAAW,EAAA7C,SAEnB,OAAO6C,EACJyD,QAAO,CAAC1F,EAAM2F,EAAUC,KACvB,MAAMC,EAAQjB,EAAMgB,GACdE,EAA8B,iBAAVD,EAAqBZ,SAASY,EAAO,IAAMA,EACrE,GAAIC,EAAa,EAAG,CAClB,MAAMC,EAAUV,EAAQnD,OAAS,GAAK0D,EAASX,SAASI,EAAQO,GAAQ,IAAM,EAC9E5F,EAAKwE,KAAK,IAAI,UAAIoB,EAAOE,EAAYC,IAEvC,OAAO/F,CAAI,GACV,GACP,CAmCegG,CAAOpB,EAAOS,GAI3B,OAjCF,SAAmBrF,EAAaoD,IACzBA,aAAI,EAAJA,EAAMlB,SAGXkB,EAAK6C,SAASJ,IACZ,MAAMxB,EAAUwB,EAAMvB,MAAMhB,EAAQO,QAChCQ,IAAWA,aAAO,EAAPA,EAASnC,QAAS,GAC/BlC,EAAKwE,KAAK,IAAI,UAAIS,SAASZ,EAAQ,GAAI,IAAM,EAAGY,SAASZ,EAAQ,GAAI,IAAKY,SAASZ,EAAQ,GAAI,QAGrG,CAoBE6B,CAAUlG,EAAMoD,GAChBqC,EAAKzF,KAAOA,EACZyF,EAAKZ,MAAQA,EACNY,CACT,CAaA,mBAAwBtB,GACtB,MAAMgC,EAAQjC,EAAcC,GAC5B,OAAQgC,EAAexB,EAASwB,EAAMhD,OAAQgD,EAAM/C,MAApC,IAClB,EAKA,oBAAyBxD,GAEvB,IAAIwG,EAAQxG,EAAK0F,MAAM,MACnBc,EAAMlE,OAAS,IACjBkE,EAAQxG,EAAK0F,MAAM,MAGrB,MAAMe,EA9JR,SAA0BD,GACxB,OAAOA,EAAMV,QAAO,CAACY,EAAmBnC,KACtC,MAAMgC,EAAQjC,EAAcC,GAI5B,OAHIgC,GACFG,EAAI9B,KAAK2B,GAEJG,CAAG,GACT,GACL,CAsJmBC,CAAiBH,GAC5BjB,EA1IR,SAAuBvF,GACrB,MAAMyE,EAAUzE,EAAK0E,MAAMhB,EAAQQ,aACnC,OAAOO,GAAU,IAAAD,MAAKC,EAAQ,IAAM,IACtC,CAuIemC,CAAc5G,IAAS,GAC9BqC,EAnIR,SAAmBrC,GACjB,MAAMyE,EAAUzE,EAAK0E,MAAMhB,EAAQS,QACnC,OAAQM,EAAiB,CAACA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,IAApD,IACpB,CAgIiBoC,CAAU7G,IAAS,GAElC,OAAO,IAAI,UA3Hb,SAAgBuF,EAAclD,GAC5B,IAAIyE,EAASvB,EAAKV,QAAQ,IAAK,KAI/B,OAHAxC,EAAOgE,SAASU,IACdD,GAAU,IAAIC,GAAG,IAEZD,EAAOE,aAChB,CAsHIC,CAAO1B,GAAQ,GAAIlD,GAAU,IAC7BkD,EACAlD,EACcoE,EAhCbX,QAAO,CAACgB,GAAmBvD,SAAQC,WAClC,MAAM0D,EAAQnC,EAASxB,EAAQC,GAI/B,OAHI0D,GACFJ,EAAOlC,KAAKsC,GAEPJ,CAAM,GACZ,IA4BP,gEC/NA,gBACE,WAAA1D,CAAYmC,GAKZ,KAAAA,KAAO,GAEP,KAAAnF,KAAc,GAGd,KAAA6E,MAAmB,GATjBxB,KAAK8B,KAAOA,CACd,iECYF,gBACE,WAAAnC,CAAY+D,EAAgBlH,EAAckG,GAU1C,KAAAgB,OAAwB,KAKxB,KAAAlH,KAAsB,KAKtB,KAAAkG,OAAwB,KAnBtB1C,KAAK0D,OAASA,EACd1D,KAAKxD,KAAOA,EACZwD,KAAK0C,OAASA,CAChB,iECtBF,8BACE,KAAAiB,MAAgB,GAEhB,KAAAC,MAAgB,GAEhB,KAAAC,OAAiB,GAKjB,KAAAC,GAAa,GAKb,KAAAC,IAAc,GAKd,KAAAC,IAAc,GAMd,KAAAC,WAAqB,EAErB,KAAAC,QAAoB,GAEpB,KAAAC,UAAqB,GAErB,KAAAC,WAAuB,GAEvB,KAAAC,YAAc,EAEd,KAAAC,WAA6B,EAC/B,0LCtCA,cACA,SACA,SACA,SAIA,YACA,YAEA,QACA,YACA,SAOMrE,EAAU,CAEdsE,OAAkB,8FAClBC,WAAkB,uCAClBC,cAAkB,wCAGlBC,QAAkB,cAElBC,aAAkB,oBAGlBC,aAAkB,kDAIlBC,MAAkB,YAClBC,WAAkB,cAIlBrE,YAAkB,mBAClBsE,aAAkB,iBAClBC,aAAkB,qBAUpB,IAAIf,GAAY,EACZI,EAAc,EAGdY,EAAa,GAGjB,MAAMC,EAAeC,GAA6CA,EAAMC,OAAS,EAAAC,WAAWC,SACtFC,EAAcJ,IAA6CD,EAAYC,GAyE7E,SAASK,EAAa1E,GAEpB,OAAIb,EAAQwE,cAAcgB,KAAK3E,GACtB,EAAAuE,WAAWK,YAEhBzF,EAAQuE,WAAWiB,KAAK3E,GACnB,EAAAuE,WAAWC,SAEb,EAAAD,WAAWM,SACpB,CA+KA,SAASC,EAAQtB,EAA4Bc,GAC3C,MAAMS,EAAgB,GAkBtB,OAhBAvB,EACGwB,QAAQX,GAAUA,EAAMC,OAASA,IAEjCxC,SAASuC,GAAUU,EAAI1E,KAAKgE,EAAMpC,MAAM,MAE3CuB,EACGwB,QAAQX,GAAUA,EAAMC,OAAS,EAAAC,WAAWM,YAC5CG,OAAOZ,GACPtC,SAASuC,IACRA,EAAMpC,MAEH+C,QAAQhF,GAASA,EAAKsE,OAASA,IAE/BxC,SAAS9B,GAAS+E,EAAI1E,KAAKL,EAAKiC,MAAM,KAAI,IAG1C8C,CACT,CAnQA,oBAAyBtJ,GACvB,MAAMwJ,EAAO,IAAI,UAEXzB,EAAayB,EAAKzB,WAnB1B,SAAyB/H,GAEvB,MAAM+H,EAiFR,SAA0B/H,GACxB,IAAIyJ,GAAqB,EACzB,MAAM1B,EAA6B,GACnC,IAAIa,EAAmB,CACrBC,KAAM,EAAAC,WAAWY,QACjBlD,MAAO,IAiCT,OA9BAxG,EAAK0F,MAAM,MACR6D,QAAQhF,GAAqB,MAAZA,EAAK,KACtB8B,SAAS9B,IACR,MAAMoF,EAAkBjG,EAAQsE,OAAOkB,KAAK3E,GACxCoF,IAAoBF,GAElBA,GACF1B,EAAWnD,KAAKgE,GAElBa,GAAqB,EACrBb,EAAQ,CACNC,KAAMI,EAAa1E,GACnBiC,MAAO,IAEJmD,GAEHf,EAAMpC,MAAM5B,KAAKL,KAGnBA,EAAOA,EAAKqF,SAEVhB,EAAMpC,MAAM5B,KAAKL,MAKrBqE,EAAMpC,MAAMlE,QACdyF,EAAWnD,KAAKgE,GAGXb,CACT,CAxHqB8B,CADnB7J,EAAO8J,EAAU9J,IASjB,OA0HF,SAA2B+H,GAEzB,MAAMgC,EAEF,CACF,CAAC,EAAAC,gBAAgB5C,OAAmB,EAAA0B,WAAWmB,MAC/C,CAAC,EAAAD,gBAAgBE,YAAmB,EAAApB,WAAWmB,MAC/C,CAAC,EAAAD,gBAAgB1C,QAAmB,EAAAwB,WAAWqB,OAC/C,CAAC,EAAAH,gBAAgBI,UAAmB,EAAAtB,WAAWuB,SAC/C,CAAC,EAAAL,gBAAgBM,eAAmB,EAAAxB,WAAWuB,SAC/C,CAAC,EAAAL,gBAAgB3C,OAAmB,EAAAyB,WAAWyB,MAC/C,CAAC,EAAAP,gBAAgBQ,SAAmB,EAAA1B,WAAWY,QAC/C,CAAC,EAAAM,gBAAgBS,cAAmB,EAAA3B,WAAWY,QAC/C,CAAC,EAAAM,gBAAgBvC,KAAmB,EAAAqB,WAAW4B,IAC/C,CAAC,EAAAV,gBAAgBW,UAAmB,EAAA7B,WAAW4B,IAC/C,CAAC,EAAAV,gBAAgBzG,QAAmB,EAAAuF,WAAW8B,gBAC/C,CAAC,EAAAZ,gBAAgBrC,SAAmB,EAAAmB,WAAW+B,cAIjD9C,EACGwB,OAAOZ,GACPtC,SAASuC,IACRA,EAAMpC,MAAQoC,EAAMpC,MAAMsE,KAAKvG,IAC7B,GAAoB,iBAATA,IAAsBb,EAAQQ,YAAYgF,KAAK3E,GACxD,OAAOA,EAGT,MAAMwG,EAAOxG,EAAKM,QAAQnB,EAAQ8E,aAAc,MAC1CwC,EAAOzG,EAAKM,QAAQnB,EAAQ+E,aAAc,MAC7CzB,cACAnC,QAAQ,KAAM,IAEjB,MAAO,CACLgE,KAAMkB,EAAoBiB,IAAS,aAAaA,IAChDxE,MAAO,CAACuE,EAAKnB,QACd,GACD,GAER,CAxKEqB,CAAkBlD,GA2KpB,SAAiCA,GAC/BA,EACGwB,OAAOZ,GACPtC,SAASuC,IACRA,EAAMpC,MAAQoC,EAAMpC,MAAMsE,KAAKvG,IAC7B,GAAoB,iBAATA,IAAsBb,EAAQ2E,aAAaa,KAAK3E,GACzD,OAAOA,EAIT,OADaA,EAAKM,QAAQnB,EAAQ2E,aAAc,MAAMrB,eAEpD,KAAK,EAAAgD,gBAAgBkB,YACrB,KAAK,EAAAlB,gBAAgBmB,iBACnBrD,IACAvD,EAAO,CACLsE,KAAM,EAAAC,WAAWsC,YACjB5E,MAAO,IAET,MACF,KAAK,EAAAwD,gBAAgBqB,QACrB,KAAK,EAAArB,gBAAgBsB,aACnB/G,EAAO,CACLsE,KAAM,EAAAC,WAAWyC,QACjB/E,MAAO,IAIb,OAAOjC,CAAI,GACX,GAER,CAxMEiH,CAAwBzD,GA8M1B,SAAwBA,GACtB,IAAI0D,EACAC,EAEJ3D,EACGwB,QAAQX,GAAUA,EAAMC,OAAS,EAAAC,WAAWM,WAAaR,EAAMC,OAAS,EAAAC,WAAWK,cACnFI,OAAOZ,GACPtC,SAASuC,IACRA,EAAMpC,MAAQoC,EAAMpC,MAAMsE,KAAKvG,IAC7B,GAAoB,iBAATA,EACT,OAAOA,EAOT,GAJAkH,EAAa/H,EAAQ4E,MAAMY,KAAK3E,GAChCmD,EAAYA,GAAa+D,EACzBC,EAAgBD,GAAelH,EAAKM,QAAQnB,EAAQ6E,WAAY,IAAIqB,OAAOtH,OAAS,EAEhFmJ,GAA6B,KAAf/C,EAAmB,CACnC,MAAMjE,EAAUF,EAAKG,MAAMhB,EAAQ4E,OAC/B7D,IACFiE,EAAajE,EAAQ,IAIzB,MAAO,CAELoE,KAAO6C,EAAgB,EAAA5C,WAAW6C,cAAiBF,EAAa,EAAA3C,WAAW8C,UAAY,EAAA9C,WAAW+C,UAClGrF,MAAO,CAACjC,GACT,GACD,GAER,CA5OEuH,CAAe/D,GA8OjB,SAAoBA,GAClBA,EACGwB,OAAOP,GACP3C,SAASuC,IAER,MAAM,MAAEpC,GAAUoC,EAElB5J,OAAO+M,QAAO,IAAAC,OAAMpD,IAAQ,IAAAqD,UAASzF,GAAsB,GAEjE,CAtPE0F,CAAWnE,GACP,EAAAvI,SAASoC,KAAKM,eAChB,IAAAiK,MAAKpE,GAEAA,CACT,CAQuCqE,CAAgBpM,GAGrD,IAAIqM,EA8CJ,OAhDA7C,EAAK9B,UAAYA,EACjB8B,EAAK1B,YAAcA,EAGnBuE,EAAOhD,EAAQtB,EAAY,EAAAe,WAAWmB,OAClCoC,EAAK/J,SACPkH,EAAKpC,MAAQiF,EAAK,IAEpBA,EAAOhD,EAAQtB,EAAY,EAAAe,WAAWqB,QAClCkC,EAAK/J,SACPkH,EAAKlC,OAAS+E,EAAK,IAErBA,EAAOhD,EAAQtB,EAAY,EAAAe,WAAWuB,UAClCgC,EAAK/J,SACPkH,EAAKjC,GAAK8E,EAAK,GACXA,EAAK/J,OAAS,IAChBkH,EAAKhC,IAAM6E,EAAK,KAGpBA,EAAOhD,EAAQtB,EAAY,EAAAe,WAAWyB,OAClC8B,EAAK/J,SACPkH,EAAKnC,MAAQgF,EAAK,IAEpBA,EAAOhD,EAAQtB,EAAY,EAAAe,WAAW+B,cAClCwB,EAAK/J,SACPkH,EAAK7B,QAAU0E,GAEjBA,EAAOhD,EAAQtB,EAAY,EAAAe,WAAW4B,KAClC2B,EAAK/J,OACPkH,EAAK/B,IAAM4E,EAAK,GACQ,KAAf3D,IACTc,EAAK/B,IAAMiB,GAGb2D,EAAOhD,EAAQtB,EAAY,EAAAe,WAAW8B,iBACtCyB,EAAKhG,SAASU,IACZ,MAAMuF,GAAI,IAAAC,SAAQ,YAAYxF,MAC1BuF,GACF9C,EAAK5B,UAAUhD,KAAK0H,MAIxB,UAAYzH,QAAQ2E,EAAK5B,WACzB4B,EAAK3B,YAAa,aAAc7H,GAE5B,EAAAR,SAASoC,KAAKM,cAChB,EAAAsK,OAAOC,KAAKjD,GAEPA,CACT,EAiNA,MAAMM,EAAa9J,GAAyBA,EACzC6E,QAAQnB,EAAQyE,QAAS,IACzBtD,QAAQnB,EAAQ0E,aAAc,IAEpB,EAAAsE,SAAW,CACtB5C,2FC3VF,cAGA,QAEM6C,EAAe9D,GAA6B7J,OAC/C4N,KAAK,EAAA9D,YAEL+D,MAAMpF,GAAQ,EAAAqB,WAAWrB,KAASoB,KAAS,UAE9C,gBAAqBd,GACnBA,EAAW1B,SAAQ,CAACuC,EAAsBzD,KACxC,MAAM,KAAE0D,GAASD,EACXkE,EAAWH,EAAY9D,GAC7B,GAAID,GAASC,IAAS,EAAAC,WAAWC,SAAU,CACzC,MAAM,KAAEvG,GAASoG,EAGjB,OAFA,EAAA4D,OAAO5G,IAAI,MAAMT,MAAM0D,YAAeiE,QAAetK,EAAKF,qBAC1D,EAAAkK,OAAOC,KAAKjK,GAId,MAAM,MAAEgE,GAAUoC,EAClB,EAAA4D,OAAO5G,IAAI,MAAMT,MAAM0D,YAAeiE,QAAetG,EAAMlE,gBAC3DkE,EAAMH,SAAS9B,IACO,iBAATA,EAKNA,EAAKiC,MAAMlE,OAQhB,EAAAkK,OAAO5G,IAAI,OAAD,wBACLrB,GAAI,CACPuI,SAAUH,EAAYpI,EAAKsE,SAT3B,EAAA2D,OAAO5G,IAAI,CACTiD,KAAMtE,EAAKsE,KACXiE,SAAUH,EAAYpI,EAAKsE,QAP7B,EAAA2D,OAAO5G,IAAIrB,EAeX,GACF,GAEN,sFC3CA,cAEMwI,EAAiB,GAGV,EAAAnH,IAAOoH,GAAwBD,EAAKnI,KAAKoI,GAEzC,EAAAb,KAAO,IAAMY,EAAK1G,SAAQ,CAAC4G,EAAG9H,IAAM,EAAAqH,OAAO5G,IAAI,GAAGT,MAAM8H,oBCFrE,SAAgBC,EAAclN,GAC5B,MACMyE,EAAUzE,EAAK0E,MADF,eAEnB,OAAKD,EAIEA,EACJqB,QAAO,CAACY,EAAenB,KACjBmB,EAAIyG,SAAS5H,IAChBmB,EAAI9B,KAAKW,GAEJmB,IACN,IACFoE,KAAKvF,GAASA,EAAKV,QAAQ,IAAK,IAAIA,QAAQ,IAAK,MAV3C,EAWX,yEAfA,kBAiBA,UAAeqI,qpBCtBf,kBAIqB,EAAAE,KAJd,UACP,kBAGgB,EAAAC,IAHT,UACP,kBAES,EAAAC,MAFF,UAGP,WACA,YAAS,4EAAAxE,UAAU,IACnB,aAAS,0EAAAyE,QAAQ,IACjB,aAAS,0EAAAC,QAAQ,IAAE,yEAAAjB,OAAO,gBC2B1B,IAAYvC,EA9BAlB,0FAAAA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAEpB,2BACA,iCACA,2BAIA,2BACA,uBACA,6BACA,uBACA,2CACA,qCACA,mCACA,yBACA,2BACA,mBAIA,+BACA,+BACA,uCAIA,gCAGUkB,EAAA,EAAAA,kBAAA,EAAAA,gBAAe,KACzB,cACA,iBACA,sBACA,qBAEA,gBACA,kBAEA,oBACA,mBAEA,YACA,eACA,kBAEA,6BACA,0BACA,qBACA,oBACA,oLC/CF,eACA,QA6BA,SAASyD,EAAkBC,GACzB,IAAK,IAAIvI,EAAI,EAAGA,GAAI,IAAAxF,iBAAiBwF,IACnCuI,EAAWvI,GAAKuI,EAAWvI,GAAGwI,OAAO,EAEzC,CAOA,SAASC,EAAeF,GAEtB,MAAMG,EAAe,YACf7I,EAAQ,GACd,IAAK,IAAIG,EAAI,EAAGA,GAAI,IAAAxF,iBAAiBwF,IACnCH,EAAMG,GAAKuI,EAAWvI,GAAGT,MAAMmJ,IAAiB,GAElD,OAAO7I,CACT,CAMA,SAAS8I,EAAWJ,GAElB,MAAMK,EAAgB,cAChBC,EAAmB,WACnBC,EAAU,GAGhB,IAAK,IAAI9I,EAAI,EAAGA,GAAI,IAAAxF,iBAAiBwF,IACnC8I,EAAQ9I,GAAKuI,EAAWvI,GACrBN,QAAQkJ,EAAe,MACvBlJ,QAAQmJ,EAAkB,KAE/B,OAAOC,CACT,CAOA,SAASC,EAAiBR,GACxB,IAAIS,EAAY,EAChB,MAAMC,EAAsB,QAE5B,IAAK,IAAIjJ,EAAI,EAAGA,EAAIuI,EAAWpL,OAAQ6C,IAAK,CAC1C,MAAMZ,EAAOmJ,EAAWvI,GAAGyE,OAAO/E,QAAQuJ,EAAqB,IAC3D7J,EAAKjC,OAAS6L,IAChBA,EAAY5J,EAAKjC,QAGrB,OAAO6L,CACT,CAQA,SAASE,EAAaJ,EAAsBE,GAE1C,IAAIG,EAAQ,GACZ,IAAK,IAAInJ,EAAI,EAAGA,EAAIgJ,EAAWhJ,IACP,MAAlB8I,EAAQ,GAAG9I,GACbmJ,GAAS,IAGTA,GAA6B,MAAlBL,EAAQ,GAAG9I,IAAkC,MAAlB8I,EAAQ,GAAG9I,IAAkC,MAAlB8I,EAAQ,GAAG9I,IAAkC,MAAlB8I,EAAQ,GAAG9I,GAAe,IAAM,IAIhImJ,EAAQA,EAAMzJ,QADU,MACe,MACvC,MAAM0J,EAAgB,MACtB,IAAIC,EAAYF,EAEhB,KACEA,EAAQA,EAAMzJ,QAAQ0J,EAAe,MACjCD,IAAUE,GAGdA,EAAYF,EAEd,OAAOA,CACT,CAQA,SAASG,EAAezJ,EAAsBiJ,EAAsBK,EAAeH,GAEjF,MAAMO,EAAuB,GAE7B,IAAK,IAAIC,EAAY,EAAGA,GAAY,IAAAhP,iBAAiBgP,IACnDD,EAAO9J,KAAK,IAGd,IAAK,IAAI+J,EAAY,EAAGA,GAAY,IAAAhP,iBAAiBgP,IAAa,CAEhE,IAAIC,EAAU,EAEVC,EAAY,EAChB,IAAK,IAAIC,EAAW,EAAGA,EAAWX,EAAWW,IAC3C,GAAwB,MAApBR,EAAMQ,GAAmB,CAE3B,IAAIC,EAAU,GACuB,MAAjCd,EAAQU,GAAWG,IACrBC,EAAU/J,EAAM2J,GAAWE,GAC3BA,KAEAE,EAAgC,MAApBT,EAAMQ,GAAsB,IAAM,IAEhDJ,EAAOC,GAAWC,GAAWG,EAC7BH,KAIN,OAAOF,CACT,CAjJA,oBAAyBhB,GACvB,MAAMsB,EAAYtB,GAAW,IAAA/N,iBAAkB,GAAG,MAAO,IAAAD,qBACrDsP,GACFvB,EAAkBC,GAEpB,MAAM1I,EAAQ4I,EAAeF,GACvBO,EAAUH,EAAWJ,GACrBS,EAAYD,EAAiBR,GAC7BY,EAAQD,EAAaJ,EAASE,GAEpC,MAAO,CACLtF,KAAM,EAAAC,WAAWC,SACjBvG,KAAMiM,EAAezJ,EAAOiJ,EAASK,EAAOH,GAC5Ca,YAEJ,EAoIa,EAAAtC,SAAW,CACtBkB,iBACAS,eACAH,mBACAO,iBACAX,aACAL,uJC1KW,EAAAwB,aAAe,CAC1BC,cAAiB,mBAGN,EAAAC,WAAanQ,OAAOC,OAAO,CACtCmQ,gBAAiB,oBACjBC,UAAiB,gBAGN,EAAAC,kBAAoBtQ,OAAOC,OAAO,CAC7CsQ,eAAiB,qBAIN,EAAAC,WAAaxQ,OAAOC,OAAO,CACtCyK,QAAiB,aACjB+F,KAAiB,UACjBC,OAAiB,YAEjBC,UAAiB,YAEjBC,SAAiB,WAEjBC,SAAiB,cACjBC,WAAiB,UACjBC,YAAiB,iBACjBC,OAAiB,YACjBzE,QAAiB,qGC5BnB,eAEA,SAOA,wBAA6B1D,EAAsB7H,GAGjD,OAmCF,SAAoBA,GAClB,GAAI,EAAAR,SAAS2C,eAAgB,CAE3B,MAAM8N,EAAQ,sEACd,OAAOjQ,EAAK6E,QAAQoL,EAAO,kBAAkB,eAAOf,kCAItD,OAAOlP,EAAK6E,QADE,kEACa,IAC7B,CA7CSqL,CADPlQ,EASF,SAAuB6H,EAAsB7H,GAC3C,MAAM,eAAE8B,GAAmB,EAAAtC,SAASoC,KAC9BuO,EAAcrO,EAAiB,IAAM,IACrCsO,EAAetO,EAAiB,IAAM,IAE5C,IAAK,MAAMqD,KAAK0C,EACd,UACO7H,EAAKsC,UAEVtC,EAAOA,EAAK6E,QAAQ,IAAIgD,EAAW1C,MAAO,yBAAyB0C,EAAW1C,eAAegL,QAAkBtI,EAAW1C,UAAUiL,sBACpI9N,QAEJ,OAAOtC,CAUT,CA/BSqQ,CAAcxI,EAAY7H,GAGnC,gECVA,gBACE,WAAAoD,CAAY1B,EAAmBC,EAAuB3B,GACpDyD,KAAK/B,KAAOA,EACZ+B,KAAK9B,SAAWA,EAChB8B,KAAKzD,KAAOA,CACd,6MCRF,kBAEA,SAEA,+BAAoC0B,GAClC,MAAMC,EAAWD,EAAK4O,iBAAiB,EAAA9Q,SAASiC,YAAYE,UACtD3B,EAAO0B,EAAK4O,iBAAiB,EAAA9Q,SAASiC,YAAYzB,MACxD,YAAkBuQ,IAAb5O,GAA4BA,EAASW,OAAS,QAAgBiO,IAATvQ,GAAwBA,EAAKsC,OAAS,EACvF,KAEF,IAAI,UACTZ,EACAC,EAAS,GACT3B,EAAK,GAET,EAEA,8BACE,MAAM,IAAEqB,GAAQ,EAAA7B,SACVkC,EAAO8O,SAASC,eAAepP,EAAIG,WACnCG,EAAW6O,SAASC,eAAepP,EAAIE,QACvCvB,EAAOwQ,SAASC,eAAepP,EAAIC,UAEzC,OAAOI,GAAQC,GAAY3B,EACvB,IAAI,UAAY0B,EAAMC,EAAU3B,GAChC,IACN,sQC1BA,kBAES,EAAA0Q,YAFF,UAIP,aAAS,6DAAAC,IAAA,oBAAAC,mBAAmB,IAAE,0DAAAD,IAAA,oBAAAE,gBAAgB,IAC9C,aAAS,+DAAAF,IAAA,oBAAAG,qBAAqB,IAAE,6EAAAC,WAAW,IAE3C,aAAS,qEAAAC,GAAG,iBC+BZ,SAASC,EAAOC,GACd,MAAMC,EAqCR,SAAoBD,GAClB,MAAMC,EAAM,CACVC,IAAK,EACLC,KAAM,EACNC,MAAO,EACP3Q,MAAO,GAIT,KAAOuQ,IAAQK,MAAML,EAAIM,cAAgBD,MAAML,EAAIO,YACjDN,EAAIE,MAAQH,EAAIM,WAAaN,EAAIQ,WACjCP,EAAIC,KAAOF,EAAIO,UAAYP,EAAIS,UAE/BT,EAAMA,EAAIU,aAGZ,OAAOT,CACT,CAtDcU,CAAWX,GACvBC,EAAIxQ,MAAQmR,EAASZ,GAKrB,MAAMa,EAAKb,EAAIc,qBAAqB,MAAM,GAC1C,GAAID,EAAI,CACN,MAAME,EAAUH,EAASC,GACrBE,EAAUd,EAAIxQ,QAEhBwQ,EAAIxQ,MAAQsR,EAAU,GAK1B,OADAd,EAAIG,MAAQH,EAAIE,KAAOF,EAAIxQ,MACpBwQ,CACT,CAKA,SAASW,EAASZ,GAChB,MAAI,SAAUA,EAELA,EAAIgB,KAAKvR,MAGX,eAAgBuQ,EAAIiB,MAAQjB,EAAIiB,MAAMC,WAAuBlB,EAAImB,WAC1E,+DAoDA,eAAoBnB,GAClB,MAAMoB,EAAWC,MAAMC,KAAKtB,EAAIZ,iBAAiB,SACjDgC,EACGjM,SAAS4G,IAAQA,EAAEkF,MAAMM,aAAe,KAAK,IAChDH,EACGI,MAAM,GAAI,GACVrM,SAAQ,CAAC4G,EAAG9H,IA5BjB,SAAqBwN,EAAoBC,GACvC,MAAMC,EAAUF,EAAMX,qBAAqB,UAAU,GAC/Cc,EAAUF,EAAMZ,qBAAqB,UAAU,GAErD,IAAKa,IAAYC,EACf,OAGF,MAAMC,EAAO9B,EAAO4B,GACdG,EAAO/B,EAAO6B,GAEpB,GA7F4BG,EA6FLD,GA7FHE,EA6FHH,GA3FX3B,MAAQ6B,EAAE7B,OAIX6B,EAAE5B,KAAO6B,EAAE5B,OAAW2B,EAAE3B,MAAQ4B,EAAE7B,QAIlC4B,EAAE5B,KAAO6B,EAAE7B,MAAU4B,EAAE5B,KAAO6B,EAAE5B,OAGhC2B,EAAE3B,MAAQ4B,EAAE7B,MAAU4B,EAAE3B,MAAQ4B,EAAE5B,OAgFT,CAC5B,MAAM3Q,EAAQoS,EAAKzB,MAAQ0B,EAAK3B,KAAO,EACvCsB,EAAMR,MAAMM,aAAe,GAAG9R,EAAQ,EAAI,EAAIA,MA/FlD,IAAsBuS,EAAQD,CAiG9B,CAauBE,CAAYlG,EAAGqF,EAASnN,EAAI,KACnD,+GC/HA,eACA,SAEA,SAEA,SACA,QACA,SAEA,IAAIiO,EAAoB,GAKxB,uBAA4BC,GAC1B,MAAM,KAAErT,EAAI,KAAE0B,GAAS2R,GAAW,CAAC,EACnC,KAAKA,GAAYA,EAAQ1R,UAAa3B,GAAS0B,GAC7C,OAAO,KAGT,MAAM8H,GAAO,IAAA+D,UAASvN,EAAKsT,WAuB3B,OAtBAtT,EAAKsT,WAAY,IAAAC,YAAW/J,IAE5B,IAAAgK,MAAKH,IACL,IAAAI,MAAKjK,EAAK3B,YAEN,EAAArI,SAAS2C,iBACXT,EAAKgS,UAAUC,IAAI,aAAOvE,kBAC1B,IAAAwE,YAAWpK,EAAK3B,aAIlBuL,EAAUA,EAAQS,QAAO,IAAAC,cAErBpS,GACFA,EAAKgS,UAAUK,OAAO,aAAO1E,WAAY7F,EAAK9B,WAG5C,EAAAlI,SAASoC,KAAKK,kBAChB,IAAA+O,KAAIhR,GAICwJ,CACT,EAEa,EAAAsH,sBAAwB,IAAMsC,mIC1C3C,eAEA,SACA,SACA,SAEM1P,EAAU,CAEdsQ,MAAO,wBAMT,IAEIX,EAFAY,EAAmB,GAQnBC,EAA4B,GAKhC,gBAAqBC,GACnBd,EAAUc,CACZ,EAUA,gBAAqBtM,GA8BnB,GA7BAwL,EAAQ1R,SAAS2R,UAAY,GAC7BW,EAAS,GACTC,EAAkB,GAEd,EAAA1U,SAASoC,KAAKI,kBAChB6F,EAAWuM,OAGbvM,EAAWxB,SAASd,IAClB,GAAI7B,EAAQsQ,MAAM9K,KAAK3D,GACrB,OAGF,GAAI,EAAA/F,SAASoC,KAAKG,qBAnBDsS,EAmBmC9O,EAnBJ,EAAA/F,SAAS0D,aAAaiK,SAASkH,IAuB7E,YAHwC,mBAA5B9B,MAAM+B,UAAUC,UAA+D,IAAnCL,EAAgBK,QAAQhP,IAC9E2O,EAAgBtP,KAAKW,IArBT,IAAC8O,EA0BjB,MAAMnN,GAAQ,IAAAyJ,KAAIpL,GACb2B,GAKL,IAAAsN,MAAKnB,EAAQ1R,SAAUuF,EAAO,EAAA1H,SAASgB,QAAS,EAAAhB,SAASM,MAAO,EAAAN,SAASU,QAJvE+T,EAAOrP,KAAKW,EAIkE,IAG9E2O,EAAgB5R,OAAS,EAAG,CAC9B,MAAMmS,EAAOzV,OAAO+M,OAAOyE,SAASkE,cAAc,KAAM,CACtDC,UAAW,oBAAOpF,eAClB+D,UAAW,cAAcY,EAAgBE,OAAOQ,KAAK,UAEvDvB,EAAQ1R,SAASkT,YAAYJ,GAEjC,EAMA,sBAA2B5M,GACzB,MAAMyK,EAAWe,EAAQrT,KAAKsQ,iBAAiB,QAC3CgC,EAAShQ,OAAS,GAItBuF,EAAWxB,SAASgO,IAClB,MAAMnN,GAAQ,IAAAyJ,KAAI0D,GACbnN,GAMLoL,EAASjM,SAAS6K,IACZA,EAAI4D,aAAa,oBAAsB5N,EAAM3B,OAC/C,IAAAiP,MAAKtD,EAAKhK,EAAO,EAAA1H,SAAS4B,cAAe,EAAA5B,SAAS4B,cAActB,MAAO,EAAAN,SAASU,UAElF,GAEN,EAEa,EAAA4T,UAAY,IAAgBG,EAK5B,EAAAc,iBAAmB,IAAgBb,qFCjHhD,eACA,SAEA,SAIA,SAGMvL,EAAeC,GAA6CA,EAAMC,OAAS,EAAAC,WAAWC,SAG5F,SAASiM,EAAiBjN,GACxB,MAAMkN,EAAK,KACX,IAAIC,EAEJ,OAAOnN,EAAWjC,QAAO,CAACqP,EAAcvM,EAAsBzD,KAC5D,GAPe,CAACyD,IAA6CD,EAAYC,GAOrEI,CAAWJ,GAIb,OAHAuM,GAAQ,eAAe,aAAO1F,UAC9B0F,IAAQ,IAAAC,gBAAexM,IACf,SAASqM,IAGnB,IAAKtM,EAAYC,GACf,OAAOuM,EAGT,MAAM,KAAEtM,EAAI,MAAErC,GAAUoC,EAClByM,EAAiC,iBAAb7O,EAAM,IAAmBA,EAAM,IAAO,GAChE,OAAQqC,GAeN,KAAK,EAAAC,WAAWY,QACdyL,GAAQ,cAAc,aAAOzL,YAAY2L,SAAiBJ,IAC1D,MACF,KAAK,EAAAnM,WAAWyC,QACd4J,GAAQ,cAAc,aAAO5J,cAAc0J,IAC3C,MACF,KAAK,EAAAnM,WAAW8C,UAChB,KAAK,EAAA9C,WAAW+C,UAChB,KAAK,EAAA/C,WAAW6C,cAAe,CAI7B,IAAK0J,EAEH,OAAOF,EAET,IAAIG,EAAczM,IAAS,EAAAC,WAAW+C,UAAa,aAAO+D,SAAW,aAAOD,UACxE9G,IAAS,EAAAC,WAAW6C,gBACtB2J,GAAc,IAAI,aAAOzF,YAE3B,MAAM0F,EAAc1M,EACd2M,EAAarQ,EAAI,GAAM,EAAK4C,EAAW5C,EAAI,GAAG0D,KAAO,EAAAC,WAAW2M,UACtEP,EAAa/P,EAAI,EAAK4C,EAAWzF,OAAU4S,EAAWnN,EAAW5C,EAAI,GAAG0D,KAAO,EAAAC,WAAW2M,UAC1FN,GAAQK,IAAaD,EAAc,eAAeD,MAAiBL,EACnEE,GAAQE,EACRF,GAAQD,IAAaK,EAAc,SAASN,IAAO,GAEnD,MACF,KAAK,EAAAnM,WAAWK,YACdgM,GAAQ,eAAe,aAAOzF,WAAWuF,IACzCE,GAAQH,EAAiBxO,GACzB2O,GAAQ,SAASF,IACjB,MACF,KAAK,EAAAnM,WAAWM,UACd+L,GAAQH,EAAiBxO,GACzB,MACF,KAAK,EAAAsC,WAAWsC,YACd+J,GAAQ,qBAAqB,aAAOnF,WAIxC,OAAOmF,CAAI,GACV,GACL,CAGA,sBAA2B3L,GACzB,MAAQzB,WAAY2N,GAAmBlM,EACvC,IAAI2L,EAAOH,EAAiBU,GAQ5B,OAPIlM,EAAK1B,YAAc,IACrBqN,EACI,eAAe,aAAOrF,cAAc,aAAOC,cAAcvG,EAAK1B,4BAC/C,aAAOkI,WAAWmF,kBAIhC,IAAAQ,cAAanM,EAAK3B,WAAYsN,EACvC,4LCpGA,kBACA,SAIA,SAsBA,SAAgBS,EAAiB1O,EAAc1G,EAAkBqV,EAA0BC,GACzF,MAAMC,GAAM,IAAI,WAAeC,SAASxV,EAAQG,MAAOH,EAAQE,QAC/D,IAAKqV,EACH,OAAO,KAGJF,IACHA,EAAe,EAAArW,SAASM,OAErBgW,IACHA,EAAgB,EAAAtW,SAASU,QAI3B,MAAM+V,EAAM,CACVhV,EAAGT,EAAQQ,WAAWC,EACtBC,EAAGV,EAAQQ,WAAWE,IA4E1B,SAAuB6U,EAAmBE,EAAezV,EAAkB0V,EAAoB,QAE7F,MAAMC,EAAS3V,EAAQO,UAAY,EAC7BqV,EAAe,EAAA5W,SAAS4C,SAAW5B,EAAQI,UAC3CyV,EAAY,EAAI7V,EAAQK,YAExByV,EAAYP,EACfQ,SAAS,aACTC,SAAS,CACRC,UAAW,OACXC,YAAaR,EACbS,YAAanW,EAAQO,UAAU6V,aAInC,IAAK,IAAIzR,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMlE,EAAIgV,EAAIhV,EAAIkE,EAAI3E,EAAQK,YAAcsV,EAC5CG,EAAUO,MAAM5V,EAAGgV,EAAI/U,EAAIiV,EAAQC,GAGrC,IAAK,IAAIjR,EAAI,EAAGA,EAAI,EAAA3F,SAAS4C,SAAU+C,IAAK,CAC1C,MAAMjE,EAAI+U,EAAI/U,EAAIiE,EAAI3E,EAAQI,UAAYuV,EAC1CG,EAAUQ,MAAMb,EAAIhV,EAAIkV,EAAQjV,EAAGmV,GAGrCC,EACGS,UAAUd,EAAIhV,EAAIkV,EAAQF,EAAI/U,EAAIiV,EAAQE,EAAWD,GACrDY,UACL,CAtGEC,CAAclB,EAAKE,EAAKzV,EAASsV,EAAc3V,WAE/C,MAAM+W,EACDjB,EAAIhV,EADHiW,EAEDjB,EAAI/U,EAAIV,EAAQM,UAIfqW,GAAU3W,EAAQI,UAAY,EAAIJ,EAAQM,WAAa,EACvDsW,EAwIR,SAAsBhX,GAIpB,IAAIiX,GAAO,EACPC,EAAM,IAWV,OATAlX,SAAAA,EAAMiG,SAAStG,IACTA,EAAIE,MAAQF,EAAIE,KAAOoX,IACzBA,EAAMtX,EAAIE,MAERF,EAAIE,MAAQF,EAAIE,KAAOqX,IACzBA,EAAMvX,EAAIE,SAIP,CACLsX,MAAQD,EAAM,IAAOA,EAAM,EAC3BE,KAAOH,EAAM,EAAKA,EAAM,EAE5B,CA5JoBI,CAAavQ,EAAM9G,MAC/BsX,EAAaN,EAAUI,MAAQ,EAAK,EAAIJ,EAAUI,KAAO,EAwB/D,GAtBIjF,MAAMoF,QAAQzQ,EAAM9G,OAEtB8G,EAAM9G,KAAKiG,SAAStG,IAClB,MAAM6X,EAAI7X,EAAIoH,QAAU,EAClB0Q,EAAI,CACR5W,EAAIiW,EAAYU,EAAIpX,EAAQK,YAC5BK,EAAIiW,EAASD,IAAcnX,EAAIE,KAAOF,EAAIE,KAAO,GAAKyX,GAAalX,EAAQI,WAE7EmV,EAAI+B,OAAOD,EAAE5W,EAAG4W,EAAE3W,EAAGV,EAAQM,WAAW0V,SAAS,CAC/CC,UAAWX,EAAc1V,OAGvBL,EAAIoG,QAAUpG,EAAIoG,OAAS,GAAK3F,EAAQC,UAAYD,EAAQM,UAAY,GAC1EiV,EAAI/V,KAAK6X,EAAE5W,EAAG4W,EAAE3W,EAAI,EAAGnB,EAAIoG,OAAOyQ,YAAYJ,SAAS,CACrDC,UAAWX,EAAczV,QACzB0X,WAAYlC,EAAa9V,SAOf,IAAd2X,EAAiB,CAInB,MAAMM,EAAS,CACb/W,EAAG,EACHC,EAAG+U,EAAI/U,EAAIV,EAAQI,WAAa,KAAQ,GAAOwW,EAAUI,KAAOJ,EAAUG,UAG5ExB,EAAI/V,KAAKgY,EAAO/W,EAAG+W,EAAO9W,EAAGkW,EAAUG,MAAMX,YAAYJ,SAAS,CAChEuB,WAAYlC,EAAa5V,KACzBwW,UAAWX,EAAcxV,SACzB2X,UAAW,SAMRb,EAAUI,KAAOJ,EAAUG,MAAS,IACvCS,EAAO9W,EAAI+U,EAAI/U,EAAK,IAAMV,EAAQI,UAClCmV,EAAI/V,KAAKgY,EAAO/W,EAAG+W,EAAO9W,EAAGkW,EAAUI,KAAKZ,YAAYJ,SAAS,CAC/DuB,WAAYlC,EAAa5V,KACzBwW,UAAWX,EAAcxV,SACzB2X,UAAW,UAcjB,OARIzX,EAAQC,UACVsV,EAAI/V,KAAMiW,EAAIhV,EAAI,IAAMT,EAAQK,YAAeoV,EAAI/U,EAAI,EAAIgG,EAAM3B,MAAMiR,SAAS,CAC9EuB,WAAYlC,EAAa7V,KACzByW,UAAWX,EAAc9V,OA2C/B,SAAsB+V,EAAmBvV,EAAkByE,EAAyByR,GAClF,MAAMzV,EAAIT,EAAQQ,WAAWC,EAAIT,EAAQO,UAAY,EAC/CG,EAAIV,EAAQQ,WAAWE,EAAIV,EAAQO,UAAY,EACrDkE,SAAAA,EAAOoB,SAAQ,CAAC6R,EAAS/S,KACnB+S,GAcR,SAAenC,EAAmBE,EAAezV,EAAkBkW,GACjE,MAAMzV,EAAIgV,EAAIhV,EAAIT,EAAQW,OAAS,EAC7BD,EAAI+U,EAAI/U,EAAIV,EAAQW,OAAS,EAEnC4U,EACGQ,SAAS,KACTC,SAAS,CACRE,YAAaA,GAAe,QAC5BC,YAAanW,EAAQD,QAAQqW,aAE9BrS,KAAKtD,EAAGC,EAAGD,EAAIT,EAAQW,OAAQD,EAAIV,EAAQW,QAC3CoD,KAAKtD,EAAGC,EAAIV,EAAQW,OAAQF,EAAIT,EAAQW,OAAQD,GAChD8V,UACL,CA1BMmB,CAAMpC,EAAK,CACT9U,EAAGA,EAAIkE,EAAI3E,EAAQK,YACnBK,KACCV,EAASkW,KAGlB,CAlDE0B,CAAarC,EAAKvV,EAAS0G,EAAMjC,MAAO6Q,EAAcvV,SAC/CwV,CACT,CAlGA,gBAAqBsC,EAAuBnR,EAAc1G,EAAkBqV,EAA0BC,GACpG,MAAMC,EAAMH,EAAiB1O,EAAO1G,EAASqV,EAAcC,GACtDC,IAGL,iBAAesC,EAAUtC,EAhBd,0BAiBb,EAEA,q1BCxBA,eAaA,MAAauC,EACX,WAAAlV,eAQA,mBAEA,KAAAmV,WAAa,CAAE5X,MAAO,EAAGD,OAAQ,GAEjC,KAAA8X,OAAS,GAET,KAAA3P,KAAO,EAAA4P,WAAWC,MAbhB,EAAAjV,KAAI,EAAY,CACdkV,KAAM,KACNC,MAAO,KACPC,QAAS,MACV,IACH,CAUA,QAAA7C,CAASrV,EAAeD,GACtB,MAAMoY,EAAgB,CACpBjQ,KAAM,EAAA4P,WAAWC,MACjBH,WAAY,CACV7X,SACAC,SAEF6X,OAAQ,GACRrG,MAAO,MAMT,OAHA,EAAA1O,KAAI,OAAUkV,KAAOG,EACrB,EAAArV,KAAI,OAAUoV,QAAUC,EAEjBrV,IACT,CAmBA,QAAA8S,CAAShR,GACP,MAAMwT,EAAuB,CAC3BlQ,KAAM,EAAA4P,WAAWO,MACjBzT,OACAiT,OAAQ,IAIV,OAFA,EAAA/U,KAAI,SAAU,KAAdA,KAAesV,GACf,EAAAtV,KAAI,OAAUmV,MAAQ,KACfnV,IACT,CAEA,QAAAuT,GAGE,OAFA,EAAAvT,KAAI,OAAUoV,QAAU,EAAApV,KAAI,OAAUkV,KAE/BlV,IACT,CAEA,MAAAqU,CAAOmB,EAAiBC,EAAiBC,GACvC,MAAMrB,EAAyB,CAC7BjP,KAAM,EAAA4P,WAAWW,OACjBC,OAAQ,CACNpY,EAAGgY,EACH/X,EAAGgY,GAELC,UAEF,OAAO,EAAA1V,KAAI,SAAU,KAAdA,KAAeqU,EACxB,CAEA,SAAAf,CAAU9V,EAAWC,EAAWP,EAAeD,GAC7C,MAAMqW,EAA+B,CACnClO,KAAM,EAAA4P,WAAWa,UACjBrD,IAAK,CACHhV,IACAC,KAEFP,QACAD,UAEF,OAAO,EAAA+C,KAAI,SAAU,KAAdA,KAAesT,EACxB,CAEA,IAAAxS,CAAKgV,EAAYC,EAAYC,EAAYC,GACvC,MAAMnV,EAAqB,CACzBsE,KAAM,EAAA4P,WAAWkB,KACjBC,UAAW,CAAC,CACV3Y,EAAGsY,EACHrY,EAAGsY,GACF,CACDvY,EAAGwY,EACHvY,EAAGwY,KAGP,OAAO,EAAAjW,KAAI,SAAU,KAAdA,KAAec,EACxB,CAEA,KAAAuS,CAAM7V,EAAWC,EAAWoB,GAC1B,OAAOmB,KAAKc,KAAKtD,EAAGC,EAAGD,GAAKqB,GAAU,GAAIpB,EAC5C,CAEA,KAAA2V,CAAM5V,EAAWC,EAAWoB,GAC1B,OAAOmB,KAAKc,KAAKtD,EAAGC,EAAGD,EAAGC,GAAKoB,GAAU,GAC3C,CAEA,IAAAtC,CAAKiB,EAAWC,EAAWlB,GACzB,MAAM6Z,EAA0B,CAC9BhR,KAAM,EAAA4P,WAAWqB,KACjB7D,IAAK,CAAEhV,IAAGC,KACVlB,QAEF,OAAO,EAAAyD,KAAI,SAAU,KAAdA,KAAeoW,EACxB,CAEA,QAAArD,CAASuD,GACP,MAAMC,EAAS,EAAAvW,KAAI,OAAUmV,MAAQ,EAAAnV,KAAI,OAAUmV,MAAQ,EAAAnV,KAAI,OAAUoV,QACzE,OAAKmB,GAAUA,EAAO7H,QAItB6H,EAAO7H,MAAQ4H,GAHNtW,IAKX,CAEA,OAAAwW,GAEE,OAAO,EAAAxW,KAAI,OAAUkV,IACvB,EAzIF,wDAkCYG,GAER,OADkBoB,QAAQ,EAAAzW,KAAI,OAAUoV,SAAW,WAAY,EAAApV,KAAI,OAAUoV,SAAWtG,MAAMoF,QAAQ,EAAAlU,KAAI,OAAUoV,QAAQL,UAK5HM,EAAI3G,MAAQ,KAEZ,EAAA1O,KAAI,OAAUoV,QAAQL,OAAO5T,KAAKkU,GAC9BA,EAAIjQ,MAAQiQ,EAAIjQ,OAAS,EAAA4P,WAAWO,MACtC,EAAAvV,KAAI,OAAUoV,QAAUC,EAExB,EAAArV,KAAI,OAAUmV,MAAQE,EAEjBrV,MAXEA,IAYX,EA2FF,UAAe6U,kGCzJf,eAQA,SAAS6B,EAAStR,EAAkBsJ,GAClC,IAAKA,EACH,OAAO,KAGT,IAAIrL,EAAS9H,OAAO4N,KAAKuF,GACtBrM,QAAO,CAACY,EAAKe,KACZ,IAAI2S,EACAnU,EAEJ,OADAA,EAAQkM,EAAM1K,GACNA,GACN,IAAK,YACH2S,EAAW,OACX,MACF,IAAK,aACHA,EAAW,OACX,MACF,IAAK,YAEH,OADAA,EAAW,cACHnU,GACN,IAAK,QACHA,EAAQ,MACR,MACF,IAAK,OACHA,EAAQ,QACR,MACF,QACEA,EAAQ,SAEZ,MACF,IAAK,cACHmU,EAAW,SACX,MACF,IAAK,cACHA,EAAW,eACX,MACF,QACEA,EAAW,KAGf,OAAQA,GAAYnU,EAChB,GAAGS,IAAM0T,KAAYnU,KACrBS,CAAG,GACN,IAML,OAJImC,IAAS,EAAA4P,WAAWqB,MAAS3H,EAAM8F,YACrCnR,GAAU,uBAGLA,CACT,CAGA,MAAMuT,EAAYC,GAA6CA,EAAMzR,OAAS,EAAA4P,WAAWW,OACnFmB,EAAWD,GAA4CA,EAAMzR,OAAS,EAAA4P,WAAWO,MACjFwB,EAAUF,GAA2CA,EAAMzR,OAAS,EAAA4P,WAAWkB,KAC/Ec,EAAeH,GAAgDA,EAAMzR,OAAS,EAAA4P,WAAWa,UACzFoB,EAAUJ,GAA2CA,EAAMzR,OAAS,EAAA4P,WAAWqB,KAqBrF,SAASa,EAAanC,GACpB,OAAOA,EAAO1S,QAAO,CAACY,EAAakS,KACjC,GAAI2B,EAAQ3B,GAAQ,CAClB,MAAM,KAAErT,GAASqT,EAGjBlS,GAAO,MAAMnB,EAAO,OAAQA,KAAW,aAFzBqT,EAAMzG,MAAQgI,EAAS,EAAA1B,WAAWO,MAAOJ,EAAMzG,OAAS,OAERwI,EAAa/B,EAAMJ,mBAEjF9R,GA3BN,SAAqBkS,GACnB,IAAIzG,EAAQyG,EAAMzG,MAAQgI,EAASvB,EAAM/P,KAAM+P,EAAMzG,OAAS,GAG9D,OAFAA,EAAQA,EAAQ,UAAUA,KAAW,GAEjCkI,EAASzB,GACJ,eAAeA,EAAMS,OAAOpY,UAAU2X,EAAMS,OAAOnY,SAAS0X,EAAMO,WAAWhH,OAElFqI,EAAO5B,GACF,aAAaA,EAAMgB,UAAU,GAAG3Y,UAAU2X,EAAMgB,UAAU,GAAG1Y,UAAU0X,EAAMgB,UAAU,GAAG3Y,UAAU2X,EAAMgB,UAAU,GAAG1Y,MAAMiR,OAElIsI,EAAY7B,GACP,YAAYA,EAAM3C,IAAIhV,SAAS2X,EAAM3C,IAAI/U,aAAa0X,EAAMjY,kBAAkBiY,EAAMlY,WAAWyR,OAEpGuI,EAAO9B,GACF,YAAYA,EAAM3C,IAAIhV,SAAS2X,EAAM3C,IAAI/U,MAAMiR,KAASyG,EAAM5Y,cAEhE,EACT,CAUa4a,CAAYhC,GAErB,OAAOlS,CAAG,GACT,GACL,CAEA,SAASmU,EAAYC,GACnB,MAAM,MAAEna,EAAK,OAAED,GAAWoa,EAAMvC,WAChC,MACM,sFAAgB5X,KAASD,aACfC,gBAAoBD,QAC3Bia,EAAaG,EAAMtC,eAE9B,CAEA,oBAAyBsC,GACvB,OAAOD,EAAYC,EAAMb,UAC3B,EAEA,uBAA4Bc,EAAsBD,EAAqBnG,GACrE,MAAMqG,EAAUxK,SAASkE,cAAc,QAMvC,OALIC,GACFqG,EAAQtH,UAAUC,IAAIgB,GAExBqG,EAAQ1H,UAAYuH,EAAYC,EAAMb,WACtCc,EAAQlG,YAAYmG,GACbA,CACT,wOC7HA,kBAEkB,EAAA1C,aAFX,UAGP,aAAS,0EAAA1B,QAAQ,IACjB,YAAS,kFAAAhB,gBAAgB,IAAE,sEAAApB,IAAI,IAE/B,aAAS,gFAAAY,cAAc,iBCGvB,IAAYqD,wEAAAA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KACpB,gBACA,gBACA,gBACA,cACA,wBACA,gMChBF,kBACA,SAGA,UAGQjW,KAAMyY,GAAgB,EAAAzb,SAyB9B,SAASsS,EAAStP,EAAoB0Y,EAAqBC,GACzD,IAAKA,EACH,OAAQF,EAAYvY,YAAcF,EAAK,GAAGF,OAAU4Y,EAAcD,EAAYna,UAGhF,IAAIsa,EAAM5Y,EAAK,GAAGF,OACd+Y,EAAUJ,EAAYna,UAO1B,MANyB,MAArB0B,EAAK,GAAG4Y,EAAM,KAEhBA,GAAO,EACPC,EAAU,GAGLJ,EAAYvY,YAAc0Y,EAAMF,EAAcG,CACvD,CA6EA,2BAA+B,UAAErM,EAAS,KAAExM,IAC1C,MAAM0Y,EAAc,EAAcD,EAAYrY,WAAa,EAErDlC,IAAW,IAAAf,iBAAkB,GAAKsb,EAAYxY,YAAgB,EAAIwY,EAAYna,UAAama,EAAYhY,cAEvG8S,GAAM,IAAI,WAAeC,SAASlE,EAAStP,EAAM0Y,GAAa,GAAQxa,GACtEuV,EAAM,CACVhV,EAAGga,EAAYna,UAAYoa,EAC3Bha,EAAG,EAAI+Z,EAAYna,WAEfC,EAAY+Q,EAAStP,EAAM0Y,GAAa,GAO9C,OAhIF,SAAmBnF,EAAmBE,EAAe3T,GACnD,MAAM6T,EAAS8E,EAAYla,UAAY,EACjCE,EAAIgV,EAAIhV,EAAIkV,EAClB,IAAIjV,EAAI+U,EAAI/U,EAAIiV,EAChB,MAAMmF,EAAQvF,EACXQ,SAAS,SACTC,SAAS,CACRE,YAAauE,EAAYtY,UACzBgU,YAAa,GAAGsE,EAAYla,cAEhC,IAAK,IAAIoE,EAAI,EAAGA,GAAI,IAAAxF,iBAAiBwF,IACnCmW,EAAMxE,MAAM7V,EAAGC,EAAGoB,GAClBpB,GAAK+Z,EAAYxY,YAEnB6Y,EAAMtE,UACR,CA2GEuE,CAAUxF,EAAKE,EAAKlV,GAjFtB,SAAmBgV,EAAmBE,EAAezT,EAAoBzB,GACvE,MAAMsY,EAAmB,CACvBpY,EAAG,EACHC,EAAG+U,EAAI/U,GAGTsB,EAAK6D,SAAQ,CAACmV,EAAKC,KACbA,EAAS,IAIbpC,EAAOpY,EAAIgV,EAAIhV,EACfua,EAAInV,SAAQ,CAACqV,EAAGC,KAEd,GAAU,MAAND,EAAW,CACb,MAAME,EAAOD,EACPE,EAAWD,EAAO,EAAMJ,EAAIlZ,OAAS,GAA0B,MAAlBkZ,EAAII,EAAO,IAAkBA,IAAUJ,EAAIlZ,OAAS,GAA0B,MAAlBkZ,EAAII,EAAO,IA6BlI,SAAqB7F,EAAmBE,EAAe6F,GACrD,MAAM3F,EAAS8E,EAAYla,UAAY,EACvCgV,EACGc,MAAMZ,EAAIhV,EAAIkV,EAAQF,EAAI/U,IAAI,IAAAvB,iBAAkB,GAAKsb,EAAYxY,aACjE+T,SAAS,CACRE,YAAauE,EAAYtY,UACzBgU,YAAa,IAAImF,EAAgB,IAAM,GAAKb,EAAYla,WAE9D,CApCQgb,CAAYhG,EAAK,CACf9U,EAAI0a,IAAWH,EAAIlZ,OAAS,EAAK2T,EAAIhV,EAAIF,EAAYsY,EAAOpY,EAC5DC,EAAG+U,EAAI/U,GACN2a,QAEOtK,MAAMlM,SAASqW,EAAG,OAC5B3F,EACG+B,OAAOuB,EAAOpY,EAAGoY,EAAOnY,EAAG+Z,EAAYna,WACvC0V,SAAS,CACRC,UAAWwE,EAAYnY,WAE3BiT,EACG/V,KAAKqZ,EAAOpY,EAAGoY,EAAOnY,EAAI,GAAM+Z,EAAYna,UAAW4a,GACvDlF,SAAS,CACRuB,WAAYkD,EAAYlY,SACxB0T,UAAWwE,EAAYjY,aAG7BqW,EAAOpY,GAAKga,EAAYvY,WAAW,IAGrC2W,EAAOnY,GAAK+Z,EAAYxY,YAAW,GAEvC,CA0CEuZ,CAAUjG,EAAKE,EAAKzT,EAAMzB,GACtBiO,GAzBN,SAAoB+G,EAAmBE,GAErC,MAAMgG,EAAS,EAAAzc,SAAS6C,OAAOqQ,MAAM,GAAGwJ,UACxC,IAAK,IAAI/W,EAAI,EAAGA,GAAI,IAAAxF,iBAAiBwF,IACnC4Q,EAAI/V,KAAK,EAAIiW,EAAI/U,GAAKiE,EAAI,IAAO8V,EAAYxY,YAAcwZ,EAAO9W,IAAIqR,SAAS,CAC7EuB,WAAYkD,EAAYpY,UACxB4T,UAAWwE,EAAYtY,UACvBsV,UAAW,QAGjB,CAgBIkE,CAAWpG,EAAKE,IAGX,IAAAW,UAASb,EAClB,4JCtIA,eACA,SACA,SACA,SACA,SACA,YAEA,MAAMqG,UAAmB,EAAA9O,MAGvB,IAAAkH,IAAQzJ,IAEN,IAAAyJ,SAAQzJ,EACV,EAOF,MAAMsR,EAAkB,CACtBC,WAAYF,EACZA,aACAG,YAAa,CACXhQ,QAAA,EAAAA,SAEFiQ,YAAa,OAAF,wBACN,EAAAA,aAAW,CACdC,WAAY,EAAApd,oBAEdqd,aAAc,CACZ1L,IAAA,EAAAA,KAEFxR,SAAA,EAAAA,SACAmd,cAAA,UACAC,UAAW,CACT,QAAAC,CAAS3L,EAAqByD,GAC5BzD,EAAIwC,UAAUC,IAAIgB,EACpB,EACA,WAAAmI,CAAY5L,EAAqByD,GAC/BzD,EAAIwC,UAAUqJ,OAAOpI,EACvB,EACA,QAAAqI,CAAS9L,EAAqByD,EAAmBZ,GAC/C7C,EAAIwC,UAAUK,OAAOY,EAAWZ,EAClC,GAEFkJ,UAAW,CACTC,MAAA,EAAAA,MACAC,YAAA,EAAAA,cAKJC,OAAOC,SAAWre,OAAO+M,OAAOqR,OAAOC,UAAY,CAAC,EAAGhB,GAEvD,UAAeA,uHC9Df,eAMA,SACA,QACA,SAGA,SAAgB7I,IACd,MAAM,cAAE8J,EAAa,cAAEC,GAAkB,EAAAf,YAGzCc,EAAc,EAAA7d,oBACd8d,EAAc,EAAAle,kBAAkBC,YAC5B,EAAAE,SAAS+C,oBAAsB,EAAAlD,kBAAkBC,YACnDie,EAAc,EAAA/d,SAAS+C,kBAE3B,CAMA,SAAgBib,IACd,EAAAhR,OAAO5G,IAAI,sBACX,MAAM4D,GAAO,IAAAuH,cAAY,IAAAF,qBACzB,OAAKrH,GAqCP,SAAgCuD,GAC9B,IAAKA,EAAKzK,OACR,OAEF,MAAMmb,EAAyB,iBAAT1Q,EAClBA,EACAA,EAAK6H,KAAK,MAEd8I,MAAM,sDAAsDD,IAC9D,CA3CEE,EAAuB,IAAA7M,0BAGhB9R,OAAO+M,OAAOvC,EAAM,CACzBoU,OAAQpU,EAAK3B,cANN,IAQX,CAKA,SAAgBgW,IACd,MAAMC,EAAgB,GAatB,OAZkBtN,SAASF,iBAAiB,EAAA9Q,SAASiC,YAAYC,MACvD2E,SAAS3E,IACjB,MAAM8H,GAAO,IAAAuH,cAAY,IAAAH,qBAAoBlP,IACxC8H,IAILxK,OAAO+M,OAAOvC,EAAM,CAClBoU,OAAQpU,EAAK3B,aAEfiW,EAAMlZ,KAAK4E,GAAK,IAEXsU,CACT,CA/CA,SAeA,QAiBA,iBAqBa,EAAAC,gBAAmB5H,GAAyB,EAAAqG,YAAYe,cAAcpH,GAanF,UAAe,CACb3C,OACAgK,MACAK,eACAE,gBAAA,EAAAA,qGC/EF,MAAMra,EACW,UAGJ,EAAAc,KAAQyB,GAA0BA,EAAMpB,QAAQnB,EAAuB,KAAKkG,OAE5E,EAAAoC,MAASgS,IACpBhf,OAAO4N,KAAKoR,GAAW3X,SAASoB,WACvBuW,EAAUvW,EAAI,IAEhBuW,4lBCZT,YACA,YAEA,kBAGE,EAAAxR,OAHK,sICAP,MAAMyR,EAAQC,QAAQD,MAChB5R,EAAO6R,QAAQ7R,KACfzG,EAAMsY,QAAQtY,IACduY,EAAOD,QAAQC,KAIrB,UAAe,CACbF,QACA5R,OACAI,KALY2R,GAAkB/R,EAAKgS,KAAKC,UAAUF,EAAM,KAAM,GAAGvZ,QAAQ,QAAS,OAMlFe,MACAuY,sECbF,gBACE,WAAA/a,CAAYqE,EAAalC,EAAclD,EAAkBub,GACvDna,KAAKgE,IAAMA,EACXhE,KAAK8B,KAAOA,EACZ9B,KAAKpB,OAASA,EACdoB,KAAKma,OAASA,CAChB,uJCJF,eAEA,SACA,SAEMW,EAAwB,GAK9B,IAAIC,EAAsB,GACtBC,EAAsB,GACtBC,EAAe,EACfC,EAAyB,GA6D7B,SAASC,EAASvK,GAChB,MAAMwK,EAAIxK,EAAU1G,OAAO,EAAG,GAC9B,OAAQ,EAAA5O,iBAAiB8f,GAAiB,EAAA9f,iBAAiB8f,GAAKxK,EAAU1G,OAAO,GAAnD0G,CAChC,CAKA,SAASyK,EAAczK,GACrB,MAAM9O,EAAOqZ,EAASvK,GAChBnN,EAAQuX,EAAW5R,MAAM6O,GAAMnW,IAASmW,EAAEnW,OAChD,OAAK2B,EAIElI,OAAO+M,OACZ,IAAI,EAAAuB,MAAM+G,GAAY,CACpBjU,KAAM8G,EAAM9G,KACZ6E,MAAOiC,EAAMjC,QANR,IASX,CAEA,SAAgB0O,EAAIiK,GAClB,GAAIA,EAAOtb,OACT,IAAK,IAAI6C,EAAI,EAAGA,EAAIyY,EAAOtb,OAAQ6C,IACjCqZ,EAAW5Z,KAAKgZ,EAAOzY,IAG3B,OAAOqZ,EAAWlc,MACpB,CApFa,EAAAgb,cAAiBd,GAA2C+B,EAAY3Z,KAAK2N,MAAMoF,QAAQ6E,GAAeA,EAAY5H,KAAK,MAAQ4H,GAOhJ,yBAA8BrG,GAC5BA,EAAU4I,UAAUzc,OAAS,EAAK6T,EAAS,EAAA9W,kBAAkBC,WAC7Dof,EAAiC,iBAAXvI,EAAsB9Q,SAAS8Q,EAAQ,IAAMA,EAC/DuI,EAAe,IACjBC,GAAY,IAAAK,QAAON,KAErB,IAAAO,YAAU,IAAAzR,UAAS+Q,EAAY,IAAIX,OACrC,EAKA,eAAoBvJ,GAElB,MAAM3P,EAAQ8Z,EAAW3R,MAAM6O,GAAMA,EAAEnW,OAAS8O,IAChD,GAAI3P,EACF,OAAOA,EAIT,GAAIga,EAAe,EACjB,OAAOI,EAAczK,GAKvB,MAAM9O,EAAOqZ,EAASvK,GAEtB,OAAOsK,EACJpV,QAAQxC,GAAMxB,IAASwB,EAAEmY,WACzBpU,KAAK/D,GAAM+X,EAAc/X,EAAEoY,cAC3B5V,OAAO2Q,SACPpU,QAAO,CAACY,EAAKgV,IAAM1c,OAAO+M,OACzB,IAAI,EAAAuB,MAAM+G,GACVqH,GAAK,CACHtb,KAAMsb,EAAEtb,KACR6E,MAAOyW,EAAEzW,SACP,OAAS,IACnB,EAgCA,QASA,mBAAwB2Y,GAEtB,OADAY,EAAa,GACN7K,EAAIiK,EACb,EAEa,EAAAwB,UAAY,IAAeX,EAG3B,EAAAQ,UAAarB,GAAoBa,EAAab,81BCtH3D,iBAIE,EAAApB,YAAAA,EAHF,kBAIE,EAAA6C,WAJK,UAMP,UAAe7C,EACf,YAAS,6CAAA7L,IAAA,oBAAAA,GAAG,IAEZ,aAAS,uEAAAuM,KAAK,IAAE,6EAAAC,WAAW,oHCN3B,cAeMzZ,EAAU,CACd4b,WAAY,uCAIRC,EAA4BvgB,OAAOC,OAAO,CAC9CugB,EAAQ,EACR,KAAQ,EACRC,GAAQ,EACRC,EAAQ,EACRC,EAAQ,EACR,KAAQ,EACRzgB,GAAQ,EACR0gB,EAAQ,EACR,KAAQ,EACRC,GAAQ,EACRC,EAAQ,EACRC,EAAQ,EACR,KAAQ,EACR5gB,GAAQ,EACR6gB,EAAO,GACP,KAAO,GACP5gB,GAAO,KAST,SAAgB8d,EAAM3X,EAAc0a,EAAgB,GAClD,MAAMC,EAAWC,EAAQ5a,GACzB,GAAiB,OAAb2a,EACF,OAAO,KAET,IAAIE,GAAQF,EAASE,KAAOH,GAAS,GAWrC,OATIG,EAAO,IACTA,GAAQ,IAIKphB,OAAO4N,KAAK2S,GACxBhW,QAAQ9B,GAAQ2Y,IAASb,EAAc9X,KACvC3B,QAAO,CAACY,EAAKe,IAAQA,EAAMyY,EAASG,UAEtB,IACnB,CAKA,SAAgBF,EAAQ5a,GACtB,IAAKA,GAAwB,iBAATA,EAClB,OAAO,KAGT,MAAMd,EAAUc,EAAKb,MAAMhB,EAAQ4b,YACnC,KAAK7a,aAAO,EAAPA,EAAS6b,QACZ,OAAO,KAGT,MAAM,OAAEC,EAAM,OAAEF,GAAW5b,EAAQ6b,OACnC,MAAO,CACLF,KAAMb,EAAcgB,GACpBA,SACAF,SAEJ,CAtCA,UAsBA,YAqBA,kBAAuBlK,GAErB,MAAMqK,EAAuB,KAD7BrK,EAASA,GAAU,GAGnB,OAAO,IAAAiJ,aACJtU,KAAK5D,IAAU,CACdgY,SAAUhY,EAAM3B,KAChB4Z,WAAYqB,EAAYtZ,EAAM3B,KAAO2X,EAAMhW,EAAM3B,KAAM4Q,IAAW,MAExE,EAKa,EAAAgH,YAAc,CAACtV,EAAsB4Y,IAAoC5Y,EACnFiD,KAAK4Q,GAAMwB,EAAMxB,EAAG+E,KACpBlX,OAAO2Q,oDCtGV,MAgNA,EAhN2B,CAGzB,gCACA,oBAIA,4CACA,6CACA,6CACA,iDACA,8BACA,+CACA,gDACA,6CACA,gDACA,gDACA,2GACA,4EACA,6CAIA,6CACA,4EACA,4EACA,gFACA,+CACA,gDACA,iDACA,8CACA,+CACA,iDACA,iDACA,4GACA,8CAEA,iDAGA,4CACA,2EACA,8CACA,2EACA,+EACA,8CACA,+CACA,gDACA,6CACA,gDACA,gDACA,+CACA,6BAGA,4CACA,6CACA,6CACA,iDACA,8CACA,+CACA,gDACA,6BACA,8CACA,gDACA,gDACA,+CACA,6CAGA,2EACA,8CACA,4EACA,kDACA,+CACA,gDACA,+EACA,8CACA,+CACA,iDACA,iDACA,4GACA,8BAIA,4CACA,6CACA,8CACA,2EACA,iDACA,8CACA,+CACA,8EACA,6CACA,gDACA,gDACA,2GACA,6BAIA,6CACA,8CACA,4EACA,kDACA,+CACA,gDACA,+EACA,8CACA,+CACA,iDACA,iDACA,gDACA,8BAGA,4CACA,6CACA,6CACA,iDACA,8CACA,8CACA,+CACA,gDACA,6CACA,gDACA,gDACA,+CACA,6BAGA,4CACA,6CACA,6CACA,iDACA,0GACA,8CACA,+CACA,gDACA,6CACA,gDACA,gDACA,iDACA,iDACA,4GACA,6BACA,+CAGA,yGACA,8CACA,8CACA,kDACA,+CACA,gDACA,iDACA,+CACA,8CACA,iDACA,iDACA,4GACA,8BAIA,4CACA,6CACA,8CACA,6CACA,iDACA,8CACA,+CACA,gDACA,6CACA,gDACA,gDACA,+CAEA,6BAGA,yGACA,8CACA,8CACA,kDACA,+CACA,gDACA,iDACA,8CACA,2GACA,iDACA,iDACA,gDACA,8CAGA,8BACA,8BACA,+BACA,gCACA,8BACA,+BACA,8BACA,kCCnNEwG,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBrQ,IAAjBsQ,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUK,KAAKF,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAGpEI,EAAOD,OACf,CCrBAH,EAAoBrU,EAAI,CAACwU,EAASzd,KACjC,IAAI,IAAIoE,KAAOpE,EACXsd,EAAoBO,EAAE7d,EAAYoE,KAASkZ,EAAoBO,EAAEJ,EAASrZ,IAC5EzI,OAAOmiB,eAAeL,EAASrZ,EAAK,CAAE2Z,YAAY,EAAMzQ,IAAKtN,EAAWoE,IAE1E,ECNDkZ,EAAoBO,EAAI,CAACpI,EAAKuI,IAAUriB,OAAOsV,UAAUgN,eAAeL,KAAKnI,EAAKuI,GCClFV,EAAoBY,EAAKT,IACH,oBAAXU,QAA0BA,OAAOC,aAC1CziB,OAAOmiB,eAAeL,EAASU,OAAOC,YAAa,CAAExb,MAAO,WAE7DjH,OAAOmiB,eAAeL,EAAS,aAAc,CAAE7a,OAAO,GAAO,ECFpC0a,EAAoB","sources":["webpack://@ukegeeks/song-formatter/./src/js/configs/globalConsts.ts","webpack://@ukegeeks/song-formatter/./src/js/configs/index.ts","webpack://@ukegeeks/song-formatter/./src/js/configs/settings.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/chordParser.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/classes/Chord.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/classes/Dot.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/classes/Song.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/cpmParser.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/debugWriter.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/errorWriter.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/getChordNames.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/index.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/interfaces/BlockTypesEnum.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/tabs.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/Styles.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/chords.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/classes/HTMLHandles.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/handles.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/index.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/overlapFixer.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/page.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/referenceDiagrams.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/song.ts","webpack://@ukegeeks/song-formatter/./src/js/imageRenderer/chordSVG.ts","webpack://@ukegeeks/song-formatter/./src/js/imageRenderer/classes/ImageBuilder.ts","webpack://@ukegeeks/song-formatter/./src/js/imageRenderer/imageSVG.ts","webpack://@ukegeeks/song-formatter/./src/js/imageRenderer/index.ts","webpack://@ukegeeks/song-formatter/./src/js/imageRenderer/interfaces/SVGImage.ts","webpack://@ukegeeks/song-formatter/./src/js/imageRenderer/tabSVG.ts","webpack://@ukegeeks/song-formatter/./src/js/index.ts","webpack://@ukegeeks/song-formatter/./src/js/scriptasaurus.ts","webpack://@ukegeeks/song-formatter/./src/js/tools/helpers.ts","webpack://@ukegeeks/song-formatter/./src/js/tools/index.ts","webpack://@ukegeeks/song-formatter/./src/js/tools/logger.ts","webpack://@ukegeeks/song-formatter/./src/js/tunings/classes/Instrument.ts","webpack://@ukegeeks/song-formatter/./src/js/tunings/definitions.ts","webpack://@ukegeeks/song-formatter/./src/js/tunings/index.ts","webpack://@ukegeeks/song-formatter/./src/js/tunings/transpose.ts","webpack://@ukegeeks/song-formatter/./src/js/configs/definitions.sopranoUkuleleGcea.js","webpack://@ukegeeks/song-formatter/webpack/bootstrap","webpack://@ukegeeks/song-formatter/webpack/runtime/define property getters","webpack://@ukegeeks/song-formatter/webpack/runtime/hasOwnProperty shorthand","webpack://@ukegeeks/song-formatter/webpack/runtime/make namespace object","webpack://@ukegeeks/song-formatter/webpack/startup"],"sourcesContent":["import { NumberDict, StringDict } from '../tools';\n\n/**\n * local substitions (replacements for identical chord shapes)\n */\nexport const chordNameAliases: StringDict = Object.freeze({\n  'A#': 'Bb',\n  Db: 'C#',\n  'D#': 'Eb',\n  Gb: 'F#',\n  Ab: 'G#',\n});\n\n/**\n * Predefined ukuele instrument tunings\n */\nexport const InstrumentTunings: NumberDict = Object.freeze({\n  /** GCEA */\n  sopranoUke: 0,\n  /** DGBA  -- Baritone's \"A\" fingering is the Soprano's \"D\" */\n  baritoneUke: 5,\n});\n","import settings from './settings';\nimport sopranoUkuleleGcea from './definitions.sopranoUkuleleGcea';\n\nexport const { getLastStringName, getNumStrings } = settings;\nexport { settings, sopranoUkuleleGcea };\nexport * from './globalConsts';\nexport { TabSettings } from './interfaces/Settings';\n","import { TabSettings } from './interfaces/Settings';\nimport { InstrumentTunings } from './globalConsts';\n\nimport { BooleanDict, StringDict } from '../tools';\nimport { FretBox } from '../imageRenderer';\n\n/**\n * Customize your installation. This JSON object controls appearance and\n * HTML element names. It's divided into four sections: graphics, ids, layout,\n * and \"options\".\n */\nconst Settings = Object.seal({\n\n  /**\n   * Chord Diagram Font styles -- font size, font-weight, font-face stack, etc.\n   */\n  fonts: {\n    dot: '9pt Arial Black,Arial',\n    text: 'bold 14pt Arial',\n    fret: 'bold 13pt Arial',\n  } as StringDict,\n\n  /**\n   * Chord Diagram Colors for fretboard's grid lines and text.\n   */\n  colors: {\n    /* eslint-disable key-spacing */\n    fretLines: '#003366',\n    dots: '#ff0000',\n    dotText: '#ffffff',\n    text: '#000000',\n    fretText: '#4a4a4a',\n    /* a muted string's 'X' stroke color */\n    xStroke: '#444444',\n    /* eslint-enable key-spacing */\n  } as StringDict,\n\n  fretBox: {\n    showText: true,\n    height: 150,\n    width: 100,\n    fretSpace: 20,\n    stringSpace: 20,\n    dotRadius: 8,\n    lineWidth: 1.6,\n    topLeftPos: {\n      x: 22,\n      y: 25,\n    },\n    xWidth: 0.45 * 20,\n    xStroke: 1.6 * 1.6,\n    fonts: {},\n  } as FretBox,\n\n  /**\n   * Layout of Chord Digrams when inlineFredBoxes are being used. Identical in\n   * structure to \"fretBox\". See fretBox for properties.\n   */\n  inlineFretBox: {\n    showText: false,\n    height: 50,\n    width: 40,\n    fretSpace: 9,\n    stringSpace: 7,\n    dotRadius: 3,\n    lineWidth: 1,\n    topLeftPos: {\n      x: 10,\n      y: 2,\n    },\n    xWidth: 0.7 * 7,\n    xStroke: 1.4 * 1,\n    fonts: {\n      dot: '8pt Arial',\n      text: '8pt Arial',\n      fret: '8pt Arial',\n    },\n  } as FretBox,\n\n  /**\n   * ID's of key HTML page elements\n   */\n  ids: {\n    /* eslint-disable key-spacing */\n    songText: 'ukeSongText', // element holding the song's text\n    canvas: 'ukeChordsCanvas', // canvas\n    container: 'ukeSongContainer', // wraps BOTH Song Text and Chord Canvas\n    /* eslint-enable key-spacing */\n  } as StringDict,\n\n  /**\n   * CSS Class names used to find page elements-- be careful if renaming!\n   */\n  wrapClasses: {\n    /* eslint-disable key-spacing */\n    wrap: '.ugs-song-wrap', // wraps BOTH Song Text and Chord Canvas\n    diagrams: '.ugs-diagrams-wrap', // canvas\n    text: '.ugs-source-wrap', // element holding the song's text\n    /* eslint-enable key-spacing */\n  } as StringDict,\n\n  /**\n   * Options (Features) you can turn on or off\n   */\n  opts: {\n    columnsEnabled: true,\n    /**\n     * the [ and ] surrounding chord names often looks bad in print (usually only good when inline)\n     * set true to keep then, false to get rid of the buggers.\n     */\n    retainBrackets: false,\n    /**\n     * if `true` chords in the \"commonChords\" list will be ignored (excluded) from having thier\n     * master chord diagram drawn\n     */\n    ignoreCommonChords: false,\n    /**\n     * If true chord reference diagrams are sorted alphabetically, otherwise chords are shown in the\n     * order in which they appear within the song.\n     */\n    sortAlphabetical: false,\n    /**\n     * if `true` chords that overlap each other (in the music area) will have their spacing adjuste\n     * to prevent overlapping.\n     */\n    autoFixOverlaps: true,\n    debugVerbose: false,\n  } as BooleanDict,\n\n  /**\n   * If `true` the Chord Digram is drawn ABOVE lyrics\n   */\n  inlineDiagrams: false,\n\n  /**\n   * Number of frets to draw. Default is 5 (as this is as wide as my hand can go and\n   * I've never seen a chord diagram requiring more than this. But ya never know.\n   */\n  numFrets: 5,\n\n  /**\n   * Array of string names, changes between baritone and soprano\n   */\n  tuning: ['G', 'C', 'E', 'A'] as string[],\n\n  /**\n   * Number of Strings (dashed lines of tablature notation) expected. (For now\n   * a constant -- ukueleles \"always\" have four).\n   * @todo Making a variable to help support port for other instruments.\n   */\n  getNumStrings() {\n    return Settings.tuning.length;\n    // export const NUM_STRINGS = 4;\n  },\n\n  /**\n   * Last String Name (Note), as above, on Ukulele is a \"G\".\n   * @todo Here for other instruments.\n   */\n  getLastStringName() {\n    return Settings.tuning[0];\n    // export const LAST_STRING_NAME = 'G';\n  },\n\n  /**\n   * The initial tuning when page first loads, used in scriptasaurus.init.\n   */\n  defaultInstrument: InstrumentTunings.sopranoUke,\n\n  tabs: {\n    lineSpacing: 16,\n    noteSpacing: 14,\n    lineWidth: 1,\n    lineColor: '#999999',\n    labelWidth: 12,\n    labelFont: '10pt Arial, Helvetica, Verdana, Geneva, sans-serif',\n    dotColor: '#eaeaea',\n    dotRadius: 10,\n    textFont: 'bold 12pt Arial, Helvetica, Verdana, Geneva, sans-serif',\n    textColor: '#000000',\n    bottomPadding: 10,\n  } as TabSettings,\n\n  /**\n   * List of common chords to be \"ignored\" (won't show master chord diagrams)\n   */\n  commonChords: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'Am'] as string[],\n});\n\nexport default Settings;\n","/**\n * Converts text to JSON objects. Accetps either large text blocks or single lines of\n * text written in CPM syntax (looks for instrument, tuning, and define statements).\n */\n\nimport Dot from './classes/Dot';\nimport Chord from './classes/Chord';\nimport { log } from './errorWriter';\n\nimport { settings } from '../configs';\nimport { pack } from '../tools';\nimport Instrument from '../tunings/classes/Instrument';\n\n/** Internal storage of partially converted \"define\" statements. */\nclass ChordParts {\n  constructor(definition: string, addIns: string[]) {\n    this.define = definition;\n    this.adds = addIns || null;\n  }\n\n  define = '';\n\n  adds: string[] = [];\n}\n\n/** All regular expressions used in this class. Note, Changed parsing from \"\\n\" to \"{\" which means \"define: ...\" cannot depend on that opening curly-brace! */\nconst RegExes = Object.freeze({\n  /* eslint-disable key-spacing */\n  // first pass filters\n  DEFINE:         /\\s*{?define\\s*:(.*?)(}|add:)/i,\n  ADD:            /(add:.*?)(}|add:)/i,\n  // chord building filters\n  NAME:           /(\\S+)\\s+/,\n  FRETS:          /\\s+frets\\s+([\\dx]{4}|(([\\dx]{1,2}\\s){3})[\\dx]{1,2})/i,\n  FINGERS:        /\\s+fingers\\s+((\\d\\s+){3}\\d|\\d{4})/i,\n  MUTED:          /\\s+mute\\s+(\\d\\s){0,3}\\d?/i,\n  // TODO: ignores \"base-fret 1\"\n  // filter \"add-in\" chord fingers\n  ADD_IN:         /add:\\s*string\\s*(\\S+)\\s+fret\\s+(\\d+)\\sfinger\\s(\\d)/i,\n  // extra commands\n  INSTRUCTION:    /{\\s*instrument\\s*:\\s*(.*?)\\s*}/i,\n  TUNING:         /{\\s*tuning\\s*:\\s*(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s*}/i,\n  // single digit numbers\n  // num: /(\\d)/g,\n  NBR_OR_X:       /(\\d{1,2}|x)/gi,\n  ANY:            /(.)/g,\n  /* eslint-enable key-spacing */\n});\n\nfunction getChordParts(line: string): ChordParts | null {\n  line = pack(line);\n  if (!line.length || line[0] === '#') {\n    return null;\n  }\n  const matches = line.match(RegExes.DEFINE);\n  return matches\n    ? new ChordParts(matches[1], getAddIns(line))\n    : null;\n}\n\nfunction getChordPartsAry(lines: string[]): ChordParts[] {\n  return lines.reduce((acc: ChordParts[], line) => {\n    const parts = getChordParts(line);\n    if (parts) {\n      acc.push(parts);\n    }\n    return acc;\n  }, []);\n}\n\nfunction getAddIns(text: string): string[] {\n  const results = [];\n  let matches = text.match(RegExes.ADD);\n  while (matches) {\n    results.push(matches[1]);\n    text = text.replace(matches[1], '');\n    matches = text.match(RegExes.ADD);\n  }\n  return results;\n}\n\nfunction getInstrument(text: string): string | null {\n  const matches = text.match(RegExes.INSTRUCTION);\n  return matches ? pack(matches[1]) : null;\n}\n\n/**\n * TODO: expects FOUR strings.\n */\nfunction getTuning(text: string): string[] | null {\n  const matches = text.match(RegExes.TUNING);\n  return !matches ? null : [matches[1], matches[2], matches[3], matches[4]];\n}\n\nfunction getName(text: string): string | null {\n  const matches = text.match(RegExes.NAME);\n  return !matches ? null : matches[1];\n}\n\nfunction getKey(name: string, tuning: string[]): string {\n  let result = name.replace(' ', '-');\n  tuning.forEach((t) => {\n    result += `-${t}`;\n  });\n  return result.toLowerCase();\n}\n\n/**\n * TODO: Change will affect \"packed\" chord fingers -- spaces required. No longer accepts \"frets 1231\", it must be \"frets 1 2 3 1\"\n * Replaces _getFrets. Sets frets and muted arrays.\n */\nfunction fretOMatic(text: string, frets: number[], muted: boolean[]) {\n  const fretMatches = text.match(RegExes.FRETS);\n  if (!fretMatches) {\n    return;\n  }\n  const matches = (fretMatches[1].length === 4) ? fretMatches[1].match(RegExes.ANY) : fretMatches[1].match(RegExes.NBR_OR_X);\n  for (let i = 0; matches && (i < matches?.length); i++) {\n    const isX = matches[i] === 'x' || matches[i] === 'X';\n    frets[i] = isX ? 0 : parseInt(matches[i], 10);\n    muted[i] = isX;\n  }\n}\n\nfunction getFingers(text: string): string[] {\n  const matches = text.match(RegExes.FINGERS);\n  if (!matches) {\n    return [];\n  }\n  let x = matches[1];\n  if (x.length === 4) {\n    x = x.replace(RegExes.ANY, '$1 ');\n  }\n  return x.split(' ');\n}\n\n/** Pass in integer arrays, frets is list of frets, plus corresponding fingers array */\nfunction toDots(frets: (number | string)[], fingers: string[]): Dot[] {\n  const { tuning } = settings;\n\n  return tuning\n    .reduce((dots, ignoreMe, index) => {\n      const value = frets[index];\n      const fretNumber = typeof value === 'string' ? parseInt(value, 10) : value;\n      if (fretNumber > 0) {\n        const finger = (fingers.length - 1 >= index) ? parseInt(fingers[index], 10) : 0;\n        dots.push(new Dot(index, fretNumber, finger));\n      }\n      return dots;\n    }, [] as Dot[]);\n}\n\n/**\n * If a valid \"add\" instruction is present pushes a new dot object into dots array.\n * @param adds array of \"add instruction\" to be parsed (i.e. \"add: string G fret 1 finger 1\")\n */\nfunction addInDots(dots: Dot[], adds: string[]): void {\n  if (!adds?.length) {\n    return;\n  }\n  adds.forEach((value) => {\n    const matches = value.match(RegExes.ADD_IN);\n    if (matches && matches?.length > 2) {\n      dots.push(new Dot(parseInt(matches[1], 10) - 1, parseInt(matches[2], 10), parseInt(matches[3], 10)));\n    }\n  });\n}\n\nfunction getChord(text: string, adds: string[]): Chord | null {\n  const frets: number[] = [];\n  const muted: boolean[] = [];\n  fretOMatic(text, frets, muted);\n\n  const name = getName(text);\n  const fingers = getFingers(text);\n\n  if (name === null || name === 'frets') {\n    log(`bad \"define\" instruction: chord name not found: ${text}`);\n    return null;\n  }\n  if (frets === null) {\n    log(`bad \"define\" instruction: frets not found: ${text}`);\n    return null;\n  }\n  const chrd = new Chord(name);\n  const dots = toDots(frets, fingers);\n  addInDots(dots, adds);\n  chrd.dots = dots;\n  chrd.muted = muted;\n  return chrd;\n}\n\nfunction partsToChords(parts: ChordParts[]): Chord[] {\n  return parts\n    .reduce((result: Chord[], { define, adds }) => {\n      const chord = getChord(define, adds);\n      if (chord) {\n        result.push(chord);\n      }\n      return result;\n    }, []);\n}\n\nexport function runLine(line: string): Chord | null {\n  const parts = getChordParts(line);\n  return !parts ? null : getChord(parts.define, parts.adds);\n}\n\n/**\n * @param text Multiline text block containing definition, instrument, and tuning statements.\n */\nexport function runBlock(text: string): Instrument {\n  // TODO: newlines get lost in strings, do I always rely on \"{\"?\n  let lines = text.split('\\n');\n  if (lines.length < 2) {\n    lines = text.split('{');\n  }\n\n  const partsAry = getChordPartsAry(lines);\n  const name = getInstrument(text) || '';\n  const tuning = getTuning(text) || [];\n\n  return new Instrument(\n    getKey(name || '', tuning || []),\n    name,\n    tuning,\n    partsToChords(partsAry),\n  );\n}\n","import Dot from './Dot';\n\n/**\n * Chord info sutiable for plotting on Canvas; has name and dot positions\n */\nexport default class Chord {\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  /** string, i.e. 'C#6' */\n  name = '';\n\n  dots: Dot[] = [];\n\n  /** true means that string is not played (muted). i.e. chord.mute[2] means third string is muted. */\n  muted: boolean[] = [];\n}\n","/**\n * A single fretboard fingering \"dot\".\n *\n * Add-in fingerings. Frequently you'll add this to indicate\n * \"nutting\" or \"barring\" with one or more fingers.\n *\n * For example, the D7 is often played by laying the index finger across the entire\n * second fret and then placing middle finger on 3rd fret of \"A\" string like this:\n *\n * ```\n *  G C E A\n *  - - - -  (1st fret)\n *  X X X X\n *  - - - X\n *  - - - -  (4th fret)\n * ```\n *\n * The \"A\" string has two fingers on it, obviously one does nothing -- except to make the\n * chord much easier to play.\n */\nexport default class Dot {\n  constructor(string: number, fret: number, finger: number) {\n    this.string = string;\n    this.fret = fret;\n    this.finger = finger;\n  }\n\n  /**\n   * The ukulele's string, numbered from \"top\" (1) to \"bottom\" (4). Sporano uke strings would be ['G' => 1,'C' => 2,'E' => 3,'A' => 4]\n   * TODO: do \"add-ins\" use char or int?\n   */\n  string: number | null = null;\n\n  /**\n   * Fret position, i.e. 0-12\n   */\n  fret: number | null = null;\n\n  /**\n   * ex: 0-4 (where 1 = index finger and 4 = pinky)\n   */\n  finger: number | null = null;\n}\n","import { SongBlockArray } from '../interfaces/SongBlock';\nimport Chord from './Chord';\n\nexport default class Song {\n  title: string = '';\n\n  album: string = '';\n\n  artist: string = '';\n\n  /**\n   * \"Subtitle\", often Artist Info\n   */\n  st: string = '';\n\n  /**\n   * \"Subtitle #2\", subtitle2 (not used yet)\n   */\n  st2: string = '';\n\n  /**\n   * Song's Key ('A', 'C', etc)\n   */\n  key: string = '';\n\n  /**\n   * `true` if there is at least one chord in use, `false` otherwise.\n   * Useful for laying out tablature, which might have no chords.\n   */\n  hasChords: boolean = false;\n\n  ugsMeta: string[] = [];\n\n  chordDefs: Chord[] = [];\n\n  chordNames: string[] = [];\n\n  columnCount = 1;\n\n  songBlocks: SongBlockArray = [];\n}\n","/* eslint-disable prefer-destructuring */\n\nimport { BlockTypes, CpmInstructions } from './interfaces/BlockTypesEnum';\nimport { echo } from './debugWriter';\nimport { readTabs } from './tabs';\nimport { runLine } from './chordParser';\nimport {\n  BaseSongBlock, SongBlock, SongBlockArray, StringArray, TabBlock,\n} from './interfaces/SongBlock';\nimport getChordNames from './getChordNames';\nimport Song from './classes/Song';\n\nimport { clean, logger } from '../tools';\nimport definitions from '../tunings';\nimport { settings } from '../configs';\n\n/**\n * @todo add ukeGeeks Meta support:\n * /{(ukegeeks-meta|meta)\\s*:\\s*(.+?)}/i\n */\n\nconst RegExes = {\n  /* eslint-disable key-spacing */\n  BLOCKS:           /\\s*{\\s*(start_of_tabs?|sot|start_of_chorus|soc|end_of_tabs?|eot|end_of_chorus|eoc)\\s*}\\s*/im,\n  TAB_BLOCKS:       /\\s*{\\s*(start_of_tabs?|sot)\\s*}\\s*/im,\n  CHORUS_BLOCKS:    /\\s*{\\s*(start_of_chorus|soc)\\s*}\\s*/im,\n\n  /** HTML <pre></pre> */\n  PRE_TAG:          /<\\/?pre>/img,\n  /** HTML <!-- Comment --> */\n  HTML_COMMENT:     /<!--(.|\\n)*?-->/gm,\n\n  // #region used in `parseSimpleInstructions`\n  COLUMN_BREAK:     /\\s*{\\s*(column_break|colb|np|new_page)\\s*}\\s*/im,\n  // #endregion\n\n  // #region used in `markChordLines`\n  CHORD:            /\\[(.+?)]/i,\n  ALL_CHORDS:       /\\[(.+?)]/img,\n  // #endregion\n\n  // #region used in `parseInstructions`\n  INSTRUCTION:      /\\{[^}]+?:.*?\\}/im,\n  COMMAND_ARGS:     /\\{.+?:(.*)\\}/gi,\n  COMMAND_VERB:     /\\{(.+?)\\s*:.*\\}/gi,\n  // #endregion\n  /* eslint-enable key-spacing */\n};\n\n/**\n * Under development, bool indicating whether any chords were found within the lyrics.\n * Helpful for tablature-only arrangements.\n * @todo: do not rely on this!!!\n */\nlet hasChords = false; // TODO:\nlet columnCount = 1;\n\n/** Song's key. May be set via command tag {key: C} otherwise use the first chord found (if available) */\nlet firstChord = '';\n\n// type guards\nconst isSongBlock = (block: BaseSongBlock): block is SongBlock => block.type !== BlockTypes.TabBlock;\nconst isTabBlock = (block: BaseSongBlock): block is TabBlock => !isSongBlock(block);\n\nfunction parseSongBlocks(text: string): SongBlockArray {\n  text = stripHtml(text);\n  const songBlocks = textToSongBlocks(text);\n  parseInstructions(songBlocks);\n  parseSimpleInstructions(songBlocks);\n  markChordLines(songBlocks);\n  expandTabs(songBlocks);\n  if (settings.opts.debugVerbose) {\n    echo(songBlocks);\n  }\n  return songBlocks;\n}\n\n/**\n * Accepts raw CPM text block, returns a Song object containing whatever ChordPro elements it recognizes.\n */\nexport function parseCPM(text: string): Song {\n  const song = new Song();\n  // eslint-disable-next-line no-multi-assign\n  const songBlocks = song.songBlocks = parseSongBlocks(text);\n  song.hasChords = hasChords;\n  song.columnCount = columnCount;\n  let info;\n\n  info = getInfo(songBlocks, BlockTypes.Title);\n  if (info.length) {\n    song.title = info[0];\n  }\n  info = getInfo(songBlocks, BlockTypes.Artist);\n  if (info.length) {\n    song.artist = info[0];\n  }\n  info = getInfo(songBlocks, BlockTypes.Subtitle);\n  if (info.length) {\n    song.st = info[0];\n    if (info.length > 1) {\n      song.st2 = info[1];\n    }\n  }\n  info = getInfo(songBlocks, BlockTypes.Album);\n  if (info.length) {\n    song.album = info[0];\n  }\n  info = getInfo(songBlocks, BlockTypes.UkeGeeksMeta);\n  if (info.length) {\n    song.ugsMeta = info;\n  }\n  info = getInfo(songBlocks, BlockTypes.Key);\n  if (info.length) {\n    song.key = info[0];\n  } else if (firstChord !== '') {\n    song.key = firstChord;\n  }\n\n  info = getInfo(songBlocks, BlockTypes.ChordDefinition);\n  info.forEach((t) => {\n    const d = runLine(`{define: ${t}}`);\n    if (d) {\n      song.chordDefs.push(d);\n    }\n  });\n\n  definitions.replace(song.chordDefs);\n  song.chordNames = getChordNames(text);\n\n  if (settings.opts.debugVerbose) {\n    logger.json(song);\n  }\n  return song;\n}\n\nfunction getBlockType(line: string): BlockTypes {\n  // TODO: verify line's type in documentation\n  if (RegExes.CHORUS_BLOCKS.test(line)) {\n    return BlockTypes.ChorusBlock;\n  }\n  if (RegExes.TAB_BLOCKS.test(line)) {\n    return BlockTypes.TabBlock;\n  }\n  return BlockTypes.TextBlock;\n}\n\n/** Explodes passed in text block into an array of songNodes ready for further parsing. */\nfunction textToSongBlocks(text: string): SongBlockArray {\n  let hasBeenInitialized = false;\n  const songBlocks: SongBlockArray = [];\n  let block: SongBlock = {\n    type: BlockTypes.Comment,\n    lines: [],\n  };\n\n  text.split('\\n')\n    .filter((line) => line[0] !== '#')\n    .forEach((line) => {\n      const isBlockBoundary = RegExes.BLOCKS.test(line);\n      if (isBlockBoundary || !hasBeenInitialized) {\n        // save last block, start new one...\n        if (hasBeenInitialized) {\n          songBlocks.push(block);\n        }\n        hasBeenInitialized = true;\n        block = {\n          type: getBlockType(line),\n          lines: [],\n        };\n        if (!isBlockBoundary) {\n          // Don't miss that first line!\n          block.lines.push(line);\n        }\n      } else {\n        line = line.trim();\n        if (line) {\n          block.lines.push(line);\n        }\n      }\n    });\n\n  if (block.lines.length) {\n    songBlocks.push(block);\n  }\n\n  return songBlocks;\n}\n\n/**\n * Goes through songNodes, those nodes that are \"instructions\" are exploded and\n * a \"the resulting \"songDomElement\" built, this songDomElement then replaces the\n * original line.\n *\n * The regular expression look for instructions with this format:\n * {commandVerb: commandArguments}\n */\nfunction parseInstructions(songBlocks: SongBlockArray): void {\n  /* eslint-disable key-spacing */\n  const verbToBlockTypeHash: {\n    [key: string]: BlockTypes\n  } = {\n    [CpmInstructions.title]:            BlockTypes.Title,\n    [CpmInstructions.titleShort]:       BlockTypes.Title,\n    [CpmInstructions.artist]:           BlockTypes.Artist,\n    [CpmInstructions.subtitle]:         BlockTypes.Subtitle,\n    [CpmInstructions.subtitleShort]:    BlockTypes.Subtitle,\n    [CpmInstructions.album]:            BlockTypes.Album,\n    [CpmInstructions.comment]:          BlockTypes.Comment,\n    [CpmInstructions.commentShort]:     BlockTypes.Comment,\n    [CpmInstructions.key]:              BlockTypes.Key,\n    [CpmInstructions.keyShort]:         BlockTypes.Key,\n    [CpmInstructions.define]:           BlockTypes.ChordDefinition,\n    [CpmInstructions.ugsMeta]:          BlockTypes.UkeGeeksMeta,\n  };\n  /* eslint-enable key-spacing */\n\n  songBlocks\n    .filter(isSongBlock)\n    .forEach((block) => {\n      block.lines = block.lines.map((line) => {\n        if (typeof line !== 'string' || !RegExes.INSTRUCTION.test(line)) {\n          return line;\n        }\n\n        const args = line.replace(RegExes.COMMAND_ARGS, '$1');\n        const verb = line.replace(RegExes.COMMAND_VERB, '$1')\n          .toLowerCase()\n          .replace(/\\r/, ''); // IE7 bug\n\n        return {\n          type: verbToBlockTypeHash[verb] || `Undefined-${verb}`,\n          lines: [args.trim()],\n        };\n      });\n    });\n}\n\n/** A \"Simple Instruction\" is one that accepts no arguments. Presently this only handles Column Breaks. */\nfunction parseSimpleInstructions(songBlocks: SongBlockArray): void {\n  songBlocks\n    .filter(isSongBlock)\n    .forEach((block: SongBlock) => {\n      block.lines = block.lines.map((line) => {\n        if (typeof line !== 'string' || !RegExes.COLUMN_BREAK.test(line)) {\n          return line;\n        }\n\n        const verb = line.replace(RegExes.COLUMN_BREAK, '$1').toLowerCase();\n        switch (verb) {\n          case CpmInstructions.columnBreak:\n          case CpmInstructions.columnBreakShort:\n            columnCount++;\n            line = {\n              type: BlockTypes.ColumnBreak,\n              lines: [],\n            };\n            break;\n          case CpmInstructions.newPage:\n          case CpmInstructions.newPageShort:\n            line = {\n              type: BlockTypes.NewPage,\n              lines: [],\n            };\n            break;\n        }\n        return line;\n      });\n    });\n}\n\n/**\n * Runs through songNodes and if the line contains at least one chord it's type is et to\n * ChordText, otherwise it's marked as \"PlainText\", meaning straight lyrics\n */\nfunction markChordLines(songBlocks: SongBlockArray): void {\n  let chordFound;\n  let hasOnlyChords;\n\n  songBlocks\n    .filter((block) => block.type === BlockTypes.TextBlock || block.type === BlockTypes.ChorusBlock)\n    .filter(isSongBlock)\n    .forEach((block) => {\n      block.lines = block.lines.map((line) => {\n        if (typeof line !== 'string') {\n          return line;\n        }\n\n        chordFound = RegExes.CHORD.test(line);\n        hasChords = hasChords || chordFound;\n        hasOnlyChords = chordFound && (line.replace(RegExes.ALL_CHORDS, '').trim().length < 1);\n\n        if (chordFound && firstChord === '') {\n          const matches = line.match(RegExes.CHORD);\n          if (matches) {\n            firstChord = matches[1];\n          }\n        }\n\n        return {\n          // eslint-disable-next-line no-nested-ternary\n          type: (hasOnlyChords ? BlockTypes.ChordOnlyText : (chordFound ? BlockTypes.ChordText : BlockTypes.PlainText)),\n          lines: [line],\n        };\n      });\n    });\n}\n\nfunction expandTabs(songBlocks: SongBlockArray): void {\n  songBlocks\n    .filter(isTabBlock)\n    .forEach((block) => {\n      // @ts-ignore-next-line\n      const { lines } = block;\n      // @ts-ignore-next-line\n      Object.assign(clean(block), readTabs(lines as StringArray));\n    });\n}\n\n/** Searches the songNodes for the specified block type, returning all matching node line (text) values. */\nfunction getInfo(songBlocks: SongBlockArray, type: BlockTypes): string[] {\n  const rtn: string[] = [];\n\n  songBlocks\n    .filter((block) => block.type === type)\n    // @ts-ignore-next-line\n    .forEach((block) => rtn.push(block.lines[0]));\n\n  songBlocks\n    .filter((block) => block.type === BlockTypes.TextBlock)\n    .filter(isSongBlock)\n    .forEach((block) => {\n      block.lines\n        // @ts-ignore-next-line\n        .filter((line) => line.type === type)\n        // @ts-ignore-next-line\n        .forEach((line) => rtn.push(line.lines[0]));\n    });\n\n  return rtn;\n}\n\n/** Removes HTML \"pre\" tags and comments. */\nconst stripHtml = (text: string): string => text\n  .replace(RegExes.PRE_TAG, '')\n  .replace(RegExes.HTML_COMMENT, '');\n\nexport const __test__ = {\n  stripHtml,\n};\n","import { BlockTypes } from './interfaces/BlockTypesEnum';\nimport { BaseSongBlock, SongBlock, SongBlockArray, TabBlock } from './interfaces/SongBlock';\n\nimport { logger } from '../tools';\n\nconst getTypeName = (type: BlockTypes): string => Object\n  .keys(BlockTypes)\n  // @ts-ignore-next-line\n  .find((key) => BlockTypes[key] === type) || 'unknown';\n\nexport function echo(songBlocks: SongBlockArray): void {\n  songBlocks.forEach((block: BaseSongBlock, i: number) => {\n    const { type } = block;\n    const typeName = getTypeName(type);\n    if (block && type === BlockTypes.TabBlock) {\n      const { tabs } = block as TabBlock;\n      logger.log(`>> ${i}. ${type} node (\"${typeName}\"), ${tabs.length} lines`);\n      logger.json(tabs);\n      return;\n    }\n\n    const { lines } = block as SongBlock;\n    logger.log(`>> ${i}. ${type} node (\"${typeName}\"), ${lines.length} lines`);\n    lines.forEach((line) => {\n      if (typeof line === 'string') {\n        logger.log(line);\n        return;\n      }\n\n      if (!line.lines.length) {\n        logger.log({\n          type: line.type,\n          typeName: getTypeName(line.type),\n        });\n        return;\n      }\n\n      logger.log({\n        ...line,\n        typeName: getTypeName(line.type),\n      });\n    });\n  });\n}\n","import { logger } from '../tools';\n\nconst errs: string[] = [];\n\n/** Add an error. As one would with console.log(\"blah\"). */\nexport const log = (msg: string): number => errs.push(msg);\n\nexport const echo = () => errs.forEach((e, i) => logger.log(`${i}. ${e}`));\n","/**\n * Returns an array of all of the unique bracket chord names. So even if [D7] appears a\n * dozen times you'll only see it once in this list.\n * @param text CPM Text Block to be parsed\n */\nexport function getChordNames(text: string): string[] {\n  const chordRegEx = /\\[(.+?)]/img;\n  const matches = text.match(chordRegEx);\n  if (!matches) {\n    return [];\n  }\n\n  return matches\n    .reduce((acc: string[], name) => {\n      if (!acc.includes(name)) {\n        acc.push(name);\n      }\n      return acc;\n    }, [])\n    .map((name) => name.replace('[', '').replace(']', ''));\n}\n\nexport default getChordNames;\n","import Song from './classes/Song';\nimport Dot from './classes/Dot';\nimport Chord from './classes/Chord';\n\nexport { Chord, Dot, Song };\nexport * from './interfaces/SongBlock';\nexport { BlockTypes } from './interfaces/BlockTypesEnum';\nexport { parseCPM } from './cpmParser';\nexport { runBlock, runLine } from './chordParser';\n","/* eslint-disable no-multi-spaces, no-shadow */\n\n/**\n * Enumeration defining the types of nodes used within this class to parse CPM\n */\nexport enum BlockTypes {\n  // #region Multiline Nodes\n  TextBlock=            1, // temporary type, should be replaced with Chord Text or Plain Text\n  ChorusBlock=          2,\n  TabBlock=             3,\n  // #endregion\n\n  // #endregion Single Line \"Instruction\" Nodes\n  Comment=            101,\n  Title=              102,\n  Subtitle=           103,\n  Album=              104,\n  ChordDefinition=    105,\n  UkeGeeksMeta=       106,\n  ColumnBreak=        107, // Defining this as an instruction instead of a node since I'm not requiring a Begin/End syntax and it simplifies processing\n  Artist=             108,\n  NewPage=            109,\n  Key=                110,\n  // #endregion\n\n  // #region Text Types\n  ChordText=          201,\n  PlainText=          202,\n  ChordOnlyText=      203,\n  // #endregion\n\n  // Undefined\n  Undefined=          666,\n}\n\nexport enum CpmInstructions {\n  title =               'title',\n  titleShort =          't',\n  subtitle =            'subtitle',\n  subtitleShort =       'st',\n\n  album =               'album',\n  artist =              'artist',\n\n  comment =             'comment',\n  commentShort =        'c',\n\n  key =                 'key',\n  keyShort =            'k',\n  define =              'define',\n\n  columnBreak =         'column_break',\n  columnBreakShort =    'colb',\n  newPage =             'new_page',\n  newPageShort =        'np',\n  ugsMeta =             'ukegeeks-meta',\n\n  /*\n  startOfTab =          'start_of_tab',\n  startOfTabShort =     'sot',\n  endOfTab =            'end_of_tab',\n  endOfTabShort =       'eot',\n\n  startOfChorus =       'start_of_chorus',\n  startOfChorusShort =  'soc',\n  endOfChorus =         'end_of_chorus',\n  endOfChorusShort =    'eoc',\n  */\n}\n","/**\n * Tablature renderer -- reads tab data and draws canvas elements.\n * Creates \"packed\" versions of the tabs, including a \"key line\" that's comprised\n * only of '-' and '*' -- the asterisks denoting where a dot will eventually be placed.\n */\n\nimport { StringArray, ExpandedTabs, TabBlock } from './interfaces/SongBlock';\n\nimport { getLastStringName, getNumStrings } from '../configs';\nimport { BlockTypes } from './interfaces/BlockTypesEnum';\n\n/**\n * This is insanely long, insanely kludgy, but, insanely, it works. This will read break a block of text into\n * four lines (the ukulele strings), then find which frets are used by each. Then, the hard part, pack un-needed\n * dashes. Once it's done that a 2-dimentional array (strings X frets) is created and returned.\n * @param tabStrings {array<string>} Block of tablbabure to be parsed\n * @return {2-dimentional array}\n */\nexport function readTabs(tabStrings: StringArray): TabBlock {\n  const hasLabels = tabStrings[getNumStrings() - 1][0] === getLastStringName();\n  if (hasLabels) {\n    stripStringLabels(tabStrings);\n  }\n  const frets = getFretNumbers(tabStrings);\n  const symbols = getSymbols(tabStrings);\n  const minLength = getMinLineLength(tabStrings);\n  const guide = getGuideLine(symbols, minLength);\n\n  return {\n    type: BlockTypes.TabBlock,\n    tabs: getPackedLines(frets, symbols, guide, minLength),\n    hasLabels,\n  };\n}\n\n/**\n * Processes tabStrings stripping the first character from each line\n */\nfunction stripStringLabels(tabStrings: StringArray): void {\n  for (let i = 0; i < getNumStrings(); i++) {\n    tabStrings[i] = tabStrings[i].substr(1);\n  }\n}\n\n/**\n * Finds the frets in use for each line. In other words, ignoring\n * spacers (\"-\" or \"|\") this returns arrays of numbers, the frets\n * in use, for each line.\n */\nfunction getFretNumbers(tabStrings: StringArray): StringArray[] {\n  // first, get the frets\n  const integerRegEx = /([0-9]+)/g;\n  const frets = [];\n  for (let i = 0; i < getNumStrings(); i++) {\n    frets[i] = tabStrings[i].match(integerRegEx) || [];\n  }\n  return frets;\n}\n\n/**\n * Returns array of the strings with placeholders instead of the numbers.\n * This helps us pack because \"12\" and \"7\" now occupy the same space horizontally.\n */\nfunction getSymbols(tabStrings: StringArray): StringArray {\n  // convert to symbols\n  const twoDigitRegEx = /([0-9]{2})/g;\n  const singleDigitRegex = /([0-9])/g;\n  const symbols = [];\n\n  // TODO: verify why using getNumStrings() instead of tabStrings.length (appears in other methods, again, do you recall why?)\n  for (let i = 0; i < getNumStrings(); i++) {\n    symbols[i] = tabStrings[i]\n      .replace(twoDigitRegEx, '-*')\n      .replace(singleDigitRegex, '*');\n  }\n  return symbols;\n}\n\n/**\n * Run through all of the strings (array) and return the length of the shortest one.\n * would prefer the max length, but then I'd need to pad the shorter ones and ... well, it's complicated.\n * this gets a TODO: get max!\n */\nfunction getMinLineLength(tabStrings: StringArray): number {\n  let minLength = 0;\n  const trailingDashesRegEx = /-+$/gi;\n\n  for (let i = 0; i < tabStrings.length; i++) {\n    const line = tabStrings[i].trim().replace(trailingDashesRegEx, '');\n    if (line.length > minLength) {\n      minLength = line.length;\n    }\n  }\n  return minLength;\n}\n\n/**\n * OK, having created symbolic representations for the lines in earlier steps\n * here we go through and \"merge\" them into a single, master \"guide\" -- saying\n * \"somewhere on this beat you'll pluck (or not) one note\". This normalized\n * guide will be the master for the next step.\n */\nfunction getGuideLine(symbols: StringArray, minLength: number): string {\n  // Build a master pattern \"guide\" and eliminate double dashes\n  let guide = '';\n  for (let i = 0; i < minLength; i++) {\n    if (symbols[0][i] === '|') {\n      guide += '|';\n    } else {\n      // TODO: assumes 4 strings, use getNumStrings()\n      guide += ((symbols[0][i] === '*') || (symbols[1][i] === '*') || (symbols[2][i] === '*') || (symbols[3][i] === '*')) ? '*' : '-';\n    }\n  }\n  const doubleDashRegEx = /--/g;\n  guide = guide.replace(doubleDashRegEx, '- ');\n  const singleDashReg = / -/g;\n  let lastGuide = guide;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    guide = guide.replace(singleDashReg, '  ');\n    if (guide === lastGuide) {\n      break;\n    }\n    lastGuide = guide;\n  }\n  return guide;\n}\n\n/**\n * Using the packed \"guide\" line we loop over the strings, rebuilding each string\n * with either a space, measure marker, or the note -- as an integer! Now the frets\n * are the same regardless of whether they are single or double digit numbers:\n * a \"12\" occupies no more horizontal space than a \"5\".\n */\nfunction getPackedLines(frets: StringArray[], symbols: StringArray, guide: string, minLength: number): ExpandedTabs {\n  // pack it!\n  const packed: ExpandedTabs = [];\n\n  for (let stringIdx = 0; stringIdx < getNumStrings(); stringIdx++) {\n    packed.push([]);\n  }\n\n  for (let stringIdx = 0; stringIdx < getNumStrings(); stringIdx++) { // loop over lines\n    // index to single line within packed array (along a string)\n    let lineIdx = 0;\n    // fret marker counter\n    let fretCount = 0;\n    for (let guideIdx = 0; guideIdx < minLength; guideIdx++) { // loop over guide\n      if (guide[guideIdx] !== ' ') {\n        // a temp variable to hold the 'note'\n        let chrNote = '';\n        if (symbols[stringIdx][guideIdx] === '*') {\n          chrNote = frets[stringIdx][fretCount];\n          fretCount++;\n        } else {\n          chrNote = ((guide[guideIdx] === '|')) ? '|' : '-';\n        }\n        packed[stringIdx][lineIdx] = chrNote;\n        lineIdx++;\n      }\n    }\n  }\n  return packed;\n}\n\nexport const __test__ = {\n  getFretNumbers,\n  getGuideLine,\n  getMinLineLength,\n  getPackedLines,\n  getSymbols,\n  stripStringLabels,\n};\n","/* eslint-disable key-spacing */\nexport const ChordsStyles = {\n  INLINE_SPACER:   'ugsInlineSpacer',\n};\n\nexport const PageStyles = Object.freeze({\n  INLINE_DIAGRAMS: 'ugsInlineDiagrams',\n  NO_CHORDS:       'ugsNoChords',\n});\n\nexport const RefDiagramsStyles = Object.freeze({\n  IGNORED_CHORDS:  'ugsIgnoredChords',\n});\n\n/** All of the CSS classnames used by UkeGeeks JavaScript */\nexport const SongStyles = Object.freeze({\n  Comment:         'ugsComment',\n  Tabs:            'ugsTabs',\n  Chorus:          'ugsChorus',\n  /** preformatted with chords */\n  PreChords:       'ugsChords',\n  /** preformated, no chords */\n  PrePlain:        'ugsPlain',\n  /** preformated, chords ONLY -- no lyrics (text) between 'em */\n  NoLyrics:        'ugsNoLyrics',\n  ColumnWrap:      'ugsWrap',\n  ColumnCount:     'ugsColumnCount',\n  Column:          'ugsColumn',\n  NewPage:         'ugsNewPage',\n});\n\n// export default {\n//   ...PageStyles,\n//   ...ChordsStyles,\n//   ...SongStyles,\n// };\n","import { settings } from '../configs';\n\nimport { ChordsStyles as Styles } from './Styles';\n\n/**\n * This does all of the work -- it's a Wrapper method that calls all of this classes other\n * (private) methods in correct order.\n * Returns the HTML block with wrapped chords: &lt;code&gt;&lt;strong&gt;&lt;em&gt;\n */\nexport function markupChords(chordNames: string[], text: string): string {\n  text = encloseChords(chordNames, text);\n  text = packChords(text);\n  return text;\n}\n\n/**\n * Returns the input string having replaced all of the \"bracketed chord names\" (i.e. [D7]) with HTML\n * marked-up version (i.e. &lt;code&gt;&lt;strong&gt;[&lt;em&gt;D7&lt;/em&gt;]&lt;/strong&gt;&lt;/code&gt;)\n */\nfunction encloseChords(chordNames: string[], text: string): string {\n  const { retainBrackets } = settings.opts;\n  const openBracket = retainBrackets ? '[' : ' ';\n  const closeBracket = retainBrackets ? ']' : ' ';\n  // eslint-disable-next-line no-restricted-syntax, guard-for-in\n  for (const i in chordNames) {\n    do { /* empty */ }\n    while (text.length !== (\n      // eslint-disable-next-line no-cond-assign\n      text = text.replace(`[${chordNames[i]}]`, `<code data-chordName=\"${chordNames[i]}\"><strong>${openBracket}<em>${chordNames[i]}</em>${closeBracket}</strong></code>`)\n    ).length);\n  }\n  return text;\n  /*\n  // need to handle chords such as: [A7+5]\n  var escapeRegEx = new RegExp('([+])','g');\n  for (var j = 0; j < this.chords.length; j++){\n    var s = this.chords[j].replace(escapeRegEx, '\\\\\\$1')\n    var re = new RegExp('[[]' + s + ']', 'img');\n    text = text.replace(re, '<code data-chordName=\"' + this.chords[j] + '\"><strong>[<em>' + this.chords[j] + '</em>]</strong></code>');\n  }\n  */\n}\n\n/**\n * Looks for consecutive chords and strips the whitespace between them -- thus \"packing\" the\n * chords against each other with only a single space separating them.\n */\nfunction packChords(text: string): string {\n  if (settings.inlineDiagrams) {\n    /* TODO: problem with packing */\n    const regEx = /(<\\/strong><\\/code>)[ \\t]*(<code data-chordName=\"[^\"]*\"><strong>)/ig;\n    return text.replace(regEx, `$1<span class=\"${Styles.INLINE_SPACER}\">&nbsp;</span>$2`);\n  }\n\n  const regEx = /<\\/strong><\\/code>[ \\t]*<code data-chordName=\"[^\"]*\"><strong>/ig;\n  return text.replace(regEx, ' ');\n}\n","/**\n * DOM Element object\n */\nexport default class HTMLHandles {\n  constructor(wrap: HTMLElement, diagrams: HTMLElement, text: HTMLElement) {\n    this.wrap = wrap;\n    this.diagrams = diagrams;\n    this.text = text;\n  }\n\n  wrap: HTMLElement;\n\n  diagrams: HTMLElement;\n\n  text: HTMLElement;\n}\n","import HTMLHandles from './classes/HTMLHandles';\n\nimport { settings } from '../configs';\n\nexport function getHandlesFromClass(wrap: HTMLElement): HTMLHandles | null {\n  const diagrams = wrap.querySelectorAll(settings.wrapClasses.diagrams);\n  const text = wrap.querySelectorAll(settings.wrapClasses.text);\n  if ((diagrams === undefined) || (diagrams.length < 1) || (text === undefined) || (text.length < 1)) {\n    return null;\n  }\n  return new HTMLHandles(\n    wrap,\n    diagrams[0] as HTMLElement,\n    text[0] as HTMLElement,\n  );\n}\n\nexport function getHandlesFromId(): HTMLHandles | null {\n  const { ids } = settings;\n  const wrap = document.getElementById(ids.container);\n  const diagrams = document.getElementById(ids.canvas);\n  const text = document.getElementById(ids.songText);\n\n  return wrap && diagrams && text\n    ? new HTMLHandles(wrap, diagrams, text)\n    : null;\n}\n","import HTMLHandles from './classes/HTMLHandles';\n\nexport { HTMLHandles };\n\nexport { getHandlesFromClass, getHandlesFromId } from './handles';\nexport { getUnknownChordErrors, processSong } from './page';\n// for legacy\nexport { Fix } from './overlapFixer';\n","/**\n * Correct overlapping chord names/diagrams in songs rendered by UGS\n */\n\ninterface Box {\n  top: number,\n  left: number,\n  right: number,\n  width: number,\n}\n\n/**\n * returns `true` if Box A overlaps Box B. Detailed horizontal check, we \"cheat\" the\n * vertical check by assuming that tops must be equal to collide (a simplification\n * over a full height check.)\n */\nfunction checkOverlap(a: Box, b: Box): boolean {\n  // \"cheat\" vertical check\n  if (a.top !== b.top) {\n    return false;\n  }\n\n  if ((b.left > a.right) || (b.right < a.left)) {\n    // overlap not possible\n    return false;\n  }\n  if ((b.left > a.left) && (b.left < a.right)) {\n    return true;\n  }\n  if ((b.right > a.left) && (b.right < a.right)) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * returns object with width and left & right offsets `element` to be measured\n */\nfunction getBox(ele: HTMLElement): Box {\n  const box = getOffsets(ele);\n  box.width = getWidth(ele);\n\n  // due to how CSS & HTML is defined it's possible that the <em> wrapping the\n  // chord name is actually wider than the <strong>, let's check.\n  // BTW: this will happen on the \"mini-chord diagram\" option\n  const em = ele.getElementsByTagName('em')[0];\n  if (em) {\n    const emWidth = getWidth(em);\n    if (emWidth > box.width) {\n      // console.log('box strong.width: ' + box.width + 'px, em.width: ' + emWidth +'px');\n      box.width = emWidth + 2;\n    }\n  }\n\n  box.right = box.left + box.width;\n  return box;\n}\n\n/**\n * source: http://www.cjboco.com/blog.cfm/post/determining-an-elements-width-and-height-using-javascript/\n */\nfunction getWidth(ele: HTMLElement): number {\n  if ('clip' in ele) {\n    // @ts-ignore-next-line\n    return ele.clip.width;\n  }\n\n  return 'pixelWidth' in ele.style ? ele.style.pixelWidth as number : ele.offsetWidth;\n}\n\n/**\n * Returns JSON with left, right, top, and width properties. ONLY left and top are calculate,\n * width & right need to be added later.\n * source: http://stackoverflow.com/questions/442404/dynamically-retrieve-the-position-x-y-of-an-html-element\n * @return {JSON}\n */\nfunction getOffsets(ele: HTMLElement): Box {\n  const box = {\n    top: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n  };\n\n  // eslint-disable-next-line no-restricted-globals\n  while (ele && !isNaN(ele.offsetLeft) && !isNaN(ele.offsetTop)) {\n    box.left += ele.offsetLeft - ele.scrollLeft;\n    box.top += ele.offsetTop - ele.scrollTop;\n    // @ts-ignore-next-line\n    ele = ele.offsetParent;\n  }\n\n  return box;\n}\n\n/**\n * checks (and fixes if problem is presetn) two code tags\n */\nfunction checkChords(codeA: HTMLElement, codeB: HTMLElement): void {\n  const strongA = codeA.getElementsByTagName('strong')[0];\n  const strongB = codeB.getElementsByTagName('strong')[0];\n\n  if (!strongA || !strongB) {\n    return;\n  }\n\n  const boxA = getBox(strongA);\n  const boxB = getBox(strongB);\n\n  if (checkOverlap(boxA, boxB)) {\n    const width = boxA.right - boxB.left + 1;\n    codeA.style.paddingRight = `${width < 1 ? 1 : width}px`;\n  }\n}\n\n/**\n * Runs through the element looking for UkeGeek chords (based on HTML) and\n * adjust the horizontal spacing if any of the chords overlap.\n * @param element containing the UGS HTML song\n */\nexport function Fix(ele: HTMLElement): void {\n  const elements = Array.from(ele.querySelectorAll('code'));\n  elements\n    .forEach((e) => { e.style.paddingRight = '0px'; });\n  elements\n    .slice(0, -1)\n    .forEach((e, i) => checkChords(e, elements[i + 1]));\n}\n","import { settings } from '../configs';\nimport { Song, parseCPM } from '../cpmImporter';\n\nimport { getErrors, init, show, showInline } from './referenceDiagrams';\nimport HTMLHandles from './classes/HTMLHandles';\nimport { Fix } from './overlapFixer';\nimport { songToHTML } from './song';\nimport { PageStyles as Styles } from './Styles';\n\nlet errList: string[] = [];\n\n/**\n * read Music, find chords, generate HTML version of song\n */\nexport function processSong(handles: HTMLHandles | null): Song | null {\n  const { text, wrap } = handles || {};\n  if (!handles || !handles.diagrams || !text || !wrap) {\n    return null;\n  }\n\n  const song = parseCPM(text.innerHTML);\n  text.innerHTML = songToHTML(song);\n\n  init(handles);\n  show(song.chordNames);\n  // Show chord diagrams inline with lyrics\n  if (settings.inlineDiagrams) {\n    wrap.classList.add(Styles.INLINE_DIAGRAMS);\n    showInline(song.chordNames);\n  }\n\n  // error reporting:\n  errList = errList.concat(getErrors());\n\n  if (wrap) {\n    wrap.classList.toggle(Styles.NO_CHORDS, !song.hasChords);\n  }\n\n  if (settings.opts.autoFixOverlaps) {\n    Fix(text);\n  }\n\n  // done!\n  return song;\n}\n\nexport const getUnknownChordErrors = () => errList;\n","/**\n * Draws large chord diagram grid (aka \"reference\" diagrams)\n */\nimport HTMLHandles from './classes/HTMLHandles';\nimport { RefDiagramsStyles as Styles } from './Styles';\n\nimport { get } from '../tunings';\nimport { plot } from '../imageRenderer';\nimport { settings } from '../configs';\n\nconst RegExes = {\n  /** Ignore \"tacet\" or \"no chord\" chords */\n  TACET: /^(n.?\\/?c.?|tacet)$/i,\n};\n\n/**\n * keep an array of missing chords\n */\nlet errors: string[] = [];\n\nlet handles: HTMLHandles;\n\n/**\n * If ignoreCommonChords option is true then this will contain list of\n * matched chords: ones defined in the ignore list that were also found in the song\n */\nlet ignoreMatchList: string[] = [];\n\n/**\n * Again this is a constructor replacement\n */\nexport function init(htmlHandles: HTMLHandles): void {\n  handles = htmlHandles;\n}\n\n/**\n * Checks whether speicified chord (name) is on the ignore list. return `true` if \"chord\" is on ignore list.\n */\nconst ignoreChord = (chordName: string): boolean => settings.commonChords.includes(chordName);\n\n/**\n * Plots the passed in chords inside passed DOM element.\n */\nexport function show(chordNames: string[]): void {\n  handles.diagrams.innerHTML = '';\n  errors = [];\n  ignoreMatchList = [];\n\n  if (settings.opts.sortAlphabetical) {\n    chordNames.sort();\n  }\n\n  chordNames.forEach((name) => {\n    if (RegExes.TACET.test(name)) {\n      return;\n    }\n\n    if (settings.opts.ignoreCommonChords && ignoreChord(name)) {\n      if ((typeof Array.prototype.indexOf === 'function') && (ignoreMatchList.indexOf(name) === -1)) {\n        ignoreMatchList.push(name);\n      }\n      return;\n    }\n\n    const chord = get(name);\n    if (!chord) {\n      errors.push(name);\n      return;\n    }\n\n    plot(handles.diagrams, chord, settings.fretBox, settings.fonts, settings.colors);\n  });\n\n  if (ignoreMatchList.length > 0) {\n    const para = Object.assign(document.createElement('p'), {\n      className: Styles.IGNORED_CHORDS,\n      innerHTML: `Also uses: ${ignoreMatchList.sort().join(', ')}`,\n    });\n    handles.diagrams.appendChild(para);\n  }\n}\n\n/**\n * Plots chords \"inline\" with the lyrics. Searches for `<code data-chordName=\"Am7\"></code>;`.\n * When found adds canvas element and draws chord named in data-chordName attribute\n */\nexport function showInline(chordNames: string[]): void {\n  const elements = handles.text.querySelectorAll('code');\n  if (elements.length < 1) {\n    return;\n  }\n\n  chordNames.forEach((chordName) => {\n    const chord = get(chordName);\n    if (!chord) {\n      /* TODO: error reporting if not found */\n      // _errors.push(chords[i]);\n      return;\n    }\n\n    elements.forEach((ele) => {\n      if (ele.getAttribute('data-chordName') === chord.name) {\n        plot(ele, chord, settings.inlineFretBox, settings.inlineFretBox.fonts, settings.colors);\n      }\n    });\n  });\n}\n\nexport const getErrors = (): string[] => errors;\n\n/**\n * List of chords excluded from the master chord diagrams\n */\nexport const getIgnoredChords = (): string[] => ignoreMatchList;\n","import { markupChords } from './chords';\nimport { SongStyles as Styles } from './Styles';\n\nimport {\n  BaseSongBlock,\n  BlockTypes, Song, SongBlock, SongBlockArray, TabBlock,\n} from '../cpmImporter';\nimport { generateTabSvg } from '../imageRenderer';\n\n// type guards\nconst isSongBlock = (block: BaseSongBlock): block is SongBlock => block.type !== BlockTypes.TabBlock;\nconst isTabBlock = (block: BaseSongBlock): block is TabBlock => !isSongBlock(block);\n\nfunction songBlocksToHTML(songBlocks: SongBlockArray): string {\n  const nl = '\\n';\n  let nextType;\n\n  return songBlocks.reduce((html: string, block: BaseSongBlock, i: number) => {\n    if (isTabBlock(block)) {\n      html += `<pre class=\"${Styles.Tabs}\">`;\n      html += generateTabSvg(block);\n      html += `</pre>${nl}`;\n      return html;\n    }\n    if (!isSongBlock(block)) {\n      return html;\n    }\n\n    const { type, lines } = block;\n    const firstLine = (typeof lines[0] === 'string' && lines[0]) || '';\n    switch (type) {\n      /* * /\n      case BlockTypes.Title:\n        html += `<h1>${firstLine}</h1>${nl}`;\n        break;\n      case BlockTypes.Subtitle:\n        html += `<h2>${firstLine}</h2>${nl}`;\n        break;\n      case BlockTypes.Album:\n        html += `<h3 class=\"ugsAlbum\">${firstLine}</h3>${nl}`;\n        break;\n      case BlockTypes.UkeGeeksMeta:\n        html += `<h3>${firstLine}</h3>${nl}`;\n        break;\n      /* */\n      case BlockTypes.Comment:\n        html += `<h6 class=\"${Styles.Comment}\">${firstLine}</h6>${nl}`;\n        break;\n      case BlockTypes.NewPage:\n        html += `<hr class=\"${Styles.NewPage}\" />${nl}`;\n        break;\n      case BlockTypes.ChordText:\n      case BlockTypes.PlainText:\n      case BlockTypes.ChordOnlyText: {\n        // TODO: beware undefined's!!!\n        // Repack the text, only open/close <pre> tags when type changes\n        // problem: exacerbates WebKit browsers' first chord position bug.\n        if (!firstLine) {\n          // prevent empty blocks (usually caused by comments mixed in header tags)\n          return html;\n        }\n        let preClasses = (type === BlockTypes.PlainText) ? Styles.PrePlain : Styles.PreChords;\n        if (type === BlockTypes.ChordOnlyText) {\n          preClasses += ` ${Styles.NoLyrics}`;\n        }\n        const currentType = type;\n        const lastType = ((i - 1) >= 0) ? songBlocks[i - 1].type : BlockTypes.Undefined;\n        nextType = ((i + 1) < songBlocks.length) ? nextType = songBlocks[i + 1].type : BlockTypes.Undefined;\n        html += lastType !== currentType ? `<pre class=\"${preClasses}\">` : nl;\n        html += firstLine;\n        html += nextType !== currentType ? `</pre>${nl}` : '';\n      }\n        break;\n      case BlockTypes.ChorusBlock:\n        html += `<div class=\"${Styles.Chorus}\">${nl}`;\n        html += songBlocksToHTML(lines as SongBlockArray);\n        html += `</div>${nl}`;\n        break;\n      case BlockTypes.TextBlock:\n        html += songBlocksToHTML(lines as SongBlockArray);\n        break;\n      case BlockTypes.ColumnBreak:\n        html += `</div><div class=\"${Styles.Column}\">`;\n        break;\n    }\n\n    return html;\n  }, '');\n}\n\n/** Convert passed in song to HTML (text) block */\nexport function songToHTML(song: Song) {\n  const { songBlocks: tempSongBlocks } = song;\n  let html = songBlocksToHTML(tempSongBlocks);\n  if (song.columnCount > 1) {\n    html = ''\n      + `<div class=\"${Styles.ColumnWrap} ${Styles.ColumnCount}${song.columnCount}\">`\n      + `<div class=\"${Styles.Column}\">${html}</div>`\n      + '</div>';\n  }\n\n  return markupChords(song.chordNames, html);\n}\n","import { Position } from './interfaces/SVGImage';\nimport FretBox from './interfaces/FretBox';\nimport ImageBuilder from './classes/ImageBuilder';\nimport { appendChild as appendSvgChild } from './imageSVG';\n\nimport { StringDict } from '../tools';\nimport { Chord, Dot } from '../cpmImporter';\nimport { settings } from '../configs';\n\nconst Styles = {\n  CHORD_IMG: 'ugs-diagrams--chord-img',\n};\n\n/**\n * Puts a new Canvas within ChordBox and draws the chord diagram on it.\n * @param chordBox Handle to the DOM element where the chord is to be drawn.\n * @param chord Chord Diagram to be drawn.\n * @param fretBox Appropriate ukeGeeks.settings.fretBox -- either \"fretBox\" or \"inlineFretBox\"\n * @param fontSettings (optional) Defaults to settings.fonts\n * @param colorSettings (optional) Defaults to settings.colors\n */\nexport function plot(chordBox: HTMLElement, chord: Chord, fretBox: FretBox, fontSettings: StringDict, colorSettings: StringDict): void {\n  const img = generateChordSvg(chord, fretBox, fontSettings, colorSettings);\n  if (!img) {\n    return;\n  }\n  appendSvgChild(chordBox, img, Styles.CHORD_IMG);\n}\n\nexport function generateChordSvg(chord: Chord, fretBox: FretBox, fontSettings: StringDict, colorSettings: StringDict): ImageBuilder | null {\n  const img = new ImageBuilder().newImage(fretBox.width, fretBox.height);\n  if (!img) {\n    return null;\n  }\n\n  if (!fontSettings) {\n    fontSettings = settings.fonts;\n  }\n  if (!colorSettings) {\n    colorSettings = settings.colors;\n  }\n\n  // starting top-left position for chord diagram\n  const pos = {\n    x: fretBox.topLeftPos.x,\n    y: fretBox.topLeftPos.y,\n  };\n  drawFretboard(img, pos, fretBox, colorSettings.fretLines);\n  // find where the circle centers should be:\n  const centers = {\n    x: pos.x,\n    y: pos.y + fretBox.dotRadius,\n  };\n\n  // find the vertical shift by dividing the freespace between top and bottom (freespace is the row height less circle diameter)\n  const fudgeY = (fretBox.fretSpace - 2 * fretBox.dotRadius) / 2;\n  const fretRange = getFretRange(chord.dots);\n  const firstFret = (fretRange.last <= 5) ? 1 : fretRange.last - 4;\n\n  if (Array.isArray(chord.dots)) {\n    // now add Dots (with finger numbers, if present)\n    chord.dots.forEach((dot) => {\n      const s = dot.string || 0;\n      const p = {\n        x: (centers.x + s * fretBox.stringSpace),\n        y: (fudgeY + centers.y + ((dot.fret ? dot.fret : 0) - firstFret) * fretBox.fretSpace),\n      };\n      img.circle(p.x, p.y, fretBox.dotRadius).setStyle({\n        fillColor: colorSettings.dots,\n      });\n      // check that the dot's radius isn't stupidly small\n      if (dot.finger && dot.finger > 0 && fretBox.showText && fretBox.dotRadius > 4) {\n        img.text(p.x, p.y + 5, dot.finger.toString()).setStyle({\n          fillColor: colorSettings.dotText,\n          fontFamily: fontSettings.dot,\n        });\n      }\n    });\n  }\n\n  // If the chord is above the normal first 5 frets we need to add labels for the first and last frets\n  if (firstFret !== 1) {\n    // Label the starting and ending frets (0-12). It's assumed that the fretboard covers frets 1-5.\n    // If instead the top fret is 6, say, well, this is the method called to add that \"6\".\n    // The Y position calculation is a bit klunky. How big of a fret range is present in the chord?\n    const txtPos = {\n      x: 0,\n      y: pos.y + fretBox.fretSpace * (0.96 * (5.0 - (fretRange.last - fretRange.first))),\n      // Old Y caculcation: pos.y + (0.8 * fretBox.fretSpace)\n    };\n    img.text(txtPos.x, txtPos.y, fretRange.first.toString()).setStyle({\n      fontFamily: fontSettings.fret,\n      fillColor: colorSettings.fretText,\n      textAlign: 'left',\n    });\n\n    // no point in double plotting a fret (i.e. barred 8th fret) so only add second label if\n    // first and last frets are different. Also, it's odd to see both 8 & 9, so only show if there's\n    // at least one fret between first and last (i.e. 8 & 10)\n    if ((fretRange.last - fretRange.first) > 1) {\n      txtPos.y = pos.y + (4.8 * fretBox.fretSpace);\n      img.text(txtPos.x, txtPos.y, fretRange.last.toString()).setStyle({\n        fontFamily: fontSettings.fret,\n        fillColor: colorSettings.fretText,\n        textAlign: 'left',\n      });\n    }\n  }\n\n  // TODO: top offset\n  if (fretBox.showText) {\n    img.text((pos.x + 1.5 * fretBox.stringSpace), (pos.y - 5), chord.name).setStyle({\n      fontFamily: fontSettings.text,\n      fillColor: colorSettings.text,\n    });\n  }\n\n  mutedStrings(img, fretBox, chord.muted, colorSettings.xStroke);\n  return img;\n}\n\nfunction drawFretboard(img: ImageBuilder, pos: Position, fretBox: FretBox, fretColor: string = '#000'): void {\n  // width offset, a \"subpixel\" adjustment\n  const offset = fretBox.lineWidth / 2;\n  const stringHeight = settings.numFrets * fretBox.fretSpace;\n  const fretWidth = 3 * fretBox.stringSpace;\n\n  const fretboard = img\n    .newGroup('fretboard')\n    .setStyle({\n      fillColor: 'none',\n      strokeColor: fretColor,\n      strokeWidth: fretBox.lineWidth.toString(),\n    });\n\n  // add \"C\" & \"E\" strings\n  for (let i = 1; i < 3; i++) {\n    const x = pos.x + i * fretBox.stringSpace + offset;\n    fretboard.vLine(x, pos.y + offset, stringHeight);\n  }\n  // add frets\n  for (let i = 1; i < settings.numFrets; i++) {\n    const y = pos.y + i * fretBox.fretSpace + offset;\n    fretboard.hLine(pos.x + offset, y, fretWidth);\n  }\n\n  fretboard\n    .rectangle(pos.x + offset, pos.y + offset, fretWidth, stringHeight)\n    .endGroup();\n}\n\n/**\n * TODO: Loop over the muted array, dropping X's whenever a string position is `true`\n * @param muted    Is this string \"muted\"?\n * @param strokeColor Valid CSS hex color (shorthand not recommended)\n */\nfunction mutedStrings(img: ImageBuilder, fretBox: FretBox, muted: boolean[] | null, strokeColor: string): void {\n  const x = fretBox.topLeftPos.x + fretBox.lineWidth / 2;\n  const y = fretBox.topLeftPos.y + fretBox.lineWidth / 4;\n  muted?.forEach((isMuted, i: number) => {\n    if (isMuted) {\n      drawX(img, {\n        x: x + i * fretBox.stringSpace,\n        y,\n      }, fretBox, strokeColor);\n    }\n  });\n}\n\n/**\n * Plots an \"X\" centered at POSITION\n * @param  {JSON} fretBox  See Settings.fretBox\n * @param  {string} strokeColor Valid CSS hex color (shorthand not recommended)\n */\nfunction drawX(img: ImageBuilder, pos: Position, fretBox: FretBox, strokeColor: string): void {\n  const x = pos.x - fretBox.xWidth / 2;\n  const y = pos.y - fretBox.xWidth / 2;\n\n  img\n    .newGroup('X')\n    .setStyle({\n      strokeColor: strokeColor || 'black',\n      strokeWidth: fretBox.xStroke.toString(),\n    })\n    .line(x, y, x + fretBox.xWidth, y + fretBox.xWidth)\n    .line(x, y + fretBox.xWidth, x + fretBox.xWidth, y)\n    .endGroup();\n}\n\n/**\n * Returns first & last frets, 0 if none found.\n */\nfunction getFretRange(dots: Dot[]): {\n  first: number,\n  last: number\n} {\n  let max = -1;\n  let min = 300;\n\n  dots?.forEach((dot) => {\n    if (dot.fret && dot.fret > max) {\n      max = dot.fret;\n    }\n    if (dot.fret && dot.fret < min) {\n      min = dot.fret;\n    }\n  });\n\n  return {\n    first: (min < 300) ? min : 0,\n    last: (max > 0) ? max : 0,\n  };\n}\n","/**\n * Stores, in an output-format agnostic manner, data for drawing images. Usage:\n * all methods are chainable except getData.\n * Limits: nested groups not supported; names are only available on groups, no unique checks.\n */\nimport {\n  LayerTypes,\n  StyleDef,\n  SVGImage, SVGBase,\n  CircleSVGLayer, GroupSVGLayer, LineSVGLayer, RectangleSVGLayer, TextSVGLayer,\n} from '../interfaces/SVGImage';\n\ninterface ImageContext {\n  root: SVGImage | null,\n  layer: SVGBase | null,\n  current: SVGBase | null,\n}\n\nexport class ImageBuilder implements SVGImage {\n  constructor() {\n    this.#context = {\n      root: null,\n      layer: null,\n      current: null,\n    };\n  }\n\n  #context: ImageContext;\n\n  dimensions = { width: 0, height: 0 };\n\n  layers = [];\n\n  type = LayerTypes.IMAGE;\n\n  newImage(width: number, height: number): ImageBuilder {\n    const obj: SVGImage = {\n      type: LayerTypes.IMAGE,\n      dimensions: {\n        height,\n        width,\n      },\n      layers: [],\n      style: null,\n    };\n\n    this.#context.root = obj;\n    this.#context.current = obj;\n\n    return this;\n  }\n\n  #newLayer(obj: SVGBase): ImageBuilder {\n    const hasLayers = Boolean(this.#context.current && 'layers' in this.#context.current && Array.isArray(this.#context.current.layers));\n    if (!hasLayers) {\n      return this;\n    }\n\n    obj.style = null;\n    // @ts-ignore-next-line\n    this.#context.current.layers.push(obj);\n    if (obj.type && obj.type === LayerTypes.GROUP) {\n      this.#context.current = obj;\n    } else {\n      this.#context.layer = obj;\n    }\n    return this;\n  }\n\n  newGroup(name: string): ImageBuilder {\n    const group: GroupSVGLayer = {\n      type: LayerTypes.GROUP,\n      name,\n      layers: [],\n    };\n    this.#newLayer(group);\n    this.#context.layer = null;\n    return this;\n  }\n\n  endGroup(): ImageBuilder {\n    this.#context.current = this.#context.root;\n    // this.#context.layer = this.#context.current;\n    return this;\n  }\n\n  circle(centerX: number, centerY: number, radius: number): ImageBuilder {\n    const circle: CircleSVGLayer = {\n      type: LayerTypes.CIRCLE,\n      center: {\n        x: centerX,\n        y: centerY,\n      },\n      radius,\n    };\n    return this.#newLayer(circle);\n  }\n\n  rectangle(x: number, y: number, width: number, height: number): ImageBuilder {\n    const rectangle: RectangleSVGLayer = {\n      type: LayerTypes.RECTANGLE,\n      pos: {\n        x,\n        y,\n      },\n      width,\n      height,\n    };\n    return this.#newLayer(rectangle);\n  }\n\n  line(x0: number, y0: number, x1: number, y1: number): ImageBuilder {\n    const line: LineSVGLayer = {\n      type: LayerTypes.LINE,\n      endPoints: [{\n        x: x0,\n        y: y0,\n      }, {\n        x: x1,\n        y: y1,\n      }],\n    };\n    return this.#newLayer(line);\n  }\n\n  hLine(x: number, y: number, length: number): ImageBuilder {\n    return this.line(x, y, x + (length || 1), y);\n  }\n\n  vLine(x: number, y: number, length: number): ImageBuilder {\n    return this.line(x, y, x, y + (length || 1));\n  }\n\n  text(x: number, y: number, text: string): ImageBuilder {\n    const textLayer: TextSVGLayer = {\n      type: LayerTypes.TEXT,\n      pos: { x, y },\n      text,\n    };\n    return this.#newLayer(textLayer);\n  }\n\n  setStyle(styleDef: StyleDef): ImageBuilder {\n    const target = this.#context.layer ? this.#context.layer : this.#context.current;\n    if (!target || target.style) {\n      return this;\n    }\n\n    target.style = styleDef;\n    return this;\n  }\n\n  getData(): SVGImage {\n    // @ts-ignore-next-line\n    return this.#context.root;\n  }\n}\n\nexport default ImageBuilder;\n","/**\n * Converts image JSON data to SVG XML.\n * Limits: no checks for unique Ids.\n */\n\nimport {\n  LayerTypes,\n  StyleDef,\n  SVGImage, SVGLayer,\n  CircleSVGLayer, GroupSVGLayer, LineSVGLayer, RectangleSVGLayer, TextSVGLayer,\n} from './interfaces/SVGImage';\nimport { ImageBuilder } from './classes/ImageBuilder';\n\nfunction getStyle(type: LayerTypes, style: StyleDef): string | null {\n  if (!style) {\n    return null;\n  }\n\n  let result = Object.keys(style)\n    .reduce((acc, key) => {\n      let property: string | null;\n      let value: string | null;\n      value = style[key];\n      switch (key) {\n        case 'fillColor':\n          property = 'fill';\n          break;\n        case 'fontFamily':\n          property = 'font';\n          break;\n        case 'textAlign':\n          property = 'text-anchor';\n          switch (value) {\n            case 'right':\n              value = 'end';\n              break;\n            case 'left':\n              value = 'start';\n              break;\n            default:\n              value = 'middle';\n          }\n          break;\n        case 'strokeColor':\n          property = 'stroke';\n          break;\n        case 'strokeWidth':\n          property = 'stroke-width';\n          break;\n        default:\n          property = null;\n      }\n\n      return (property && value)\n        ? `${acc}${property}:${value};`\n        : acc;\n    }, '');\n\n  if (type === LayerTypes.TEXT && !style.textAlign) {\n    result += 'text-anchor:middle;';\n  }\n\n  return result;\n}\n\n// type guards\nconst isCircle = (shape: SVGLayer): shape is CircleSVGLayer => shape.type === LayerTypes.CIRCLE;\nconst isGroup = (shape: SVGLayer): shape is GroupSVGLayer => shape.type === LayerTypes.GROUP;\nconst isLine = (shape: SVGLayer): shape is LineSVGLayer => shape.type === LayerTypes.LINE;\nconst isRectangle = (shape: SVGLayer): shape is RectangleSVGLayer => shape.type === LayerTypes.RECTANGLE;\nconst isText = (shape: SVGLayer): shape is TextSVGLayer => shape.type === LayerTypes.TEXT;\n\nfunction renderLayer(layer: SVGLayer): string {\n  let style = layer.style ? getStyle(layer.type, layer.style) : '';\n  style = style ? `style=\"${style}\"` : '';\n\n  if (isCircle(layer)) {\n    return `<circle cx=\"${layer.center.x}\" cy=\"${layer.center.y}\" r=\"${layer.radius}\" ${style} />`;\n  }\n  if (isLine(layer)) {\n    return `<line x1=\"${layer.endPoints[0].x}\" y1=\"${layer.endPoints[0].y}\" x2=\"${layer.endPoints[1].x}\" y2=\"${layer.endPoints[1].y}\" ${style} />`;\n  }\n  if (isRectangle(layer)) {\n    return `<rect x=\"${layer.pos.x}\" y=\"${layer.pos.y}\" width=\"${layer.width}\" height=\"${layer.height}\" ${style} />`;\n  }\n  if (isText(layer)) {\n    return `<text x=\"${layer.pos.x}\" y=\"${layer.pos.y}\" ${style}>${layer.text}</text>`;\n  }\n  return '';\n}\n\nfunction renderLayers(layers: SVGLayer[]): string {\n  return layers.reduce((acc: string, layer) => {\n    if (isGroup(layer)) {\n      const { name } = layer;\n      const style = layer.style ? getStyle(LayerTypes.GROUP, layer.style) : '';\n      // TODO: what was intent 15 years ago, bud? \"renderLayers(layer.layers, layer.style)\"\n      acc += `<g ${name ? (`id=\"${name}\"`) : ''} style=\"${style}\">${renderLayers(layer.layers)}</g>`;\n    } else {\n      acc += renderLayer(layer);\n    }\n    return acc;\n  }, '');\n}\n\nfunction toSVGString(image: SVGImage): string {\n  const { width, height } = image.dimensions;\n  return ('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" '\n      + `viewBox=\"0 0 ${width} ${height}\" `\n      + `width=\"${width}px\" height=\"${height}px\">`\n      + `${renderLayers(image.layers)}</svg>`\n  );\n}\n\nexport function toString(image: ImageBuilder): string {\n  return toSVGString(image.getData());\n}\n\nexport function appendChild(element: HTMLElement, image: ImageBuilder, className: string): HTMLElement {\n  const wrapper = document.createElement('span');\n  if (className) {\n    wrapper.classList.add(className);\n  }\n  wrapper.innerHTML = toSVGString(image.getData());\n  element.appendChild(wrapper);\n  return wrapper;\n}\n","import FretBox from './interfaces/FretBox';\nimport ImageBuilder from './classes/ImageBuilder';\n\nexport { FretBox, ImageBuilder };\nexport { toString } from './imageSVG';\nexport { generateChordSvg, plot } from './chordSVG';\nexport { Position } from './interfaces/SVGImage';\nexport { generateTabSvg } from './tabSVG';\n","import { StringDict } from '../../tools';\n\nexport type StyleDef = StringDict;\n\nexport interface Position {\n  x: number,\n  y: number,\n}\n\n// eslint-disable-next-line no-shadow\nexport enum LayerTypes {\n  CIRCLE = 'circle',\n  GROUP = 'group',\n  IMAGE = 'image',\n  LINE = 'line',\n  RECTANGLE = 'rectangle',\n  TEXT = 'text',\n}\n\nexport interface SVGBase {\n  type: LayerTypes,\n  style?: StyleDef | null,\n}\n\nexport interface CircleSVGLayer extends SVGBase {\n  center: Position,\n  radius: number,\n}\n\nexport interface GroupSVGLayer extends SVGBase {\n  name: string,\n  layers: SVGLayer[],\n}\n\nexport interface LineSVGLayer extends SVGBase {\n  endPoints: Position[]\n}\n\nexport interface RectangleSVGLayer extends SVGBase {\n  pos: Position,\n  height: number,\n  width: number,\n}\n\nexport interface TextSVGLayer extends SVGBase {\n  pos: Position,\n  text: string,\n}\n\nexport type SVGLayer = CircleSVGLayer | GroupSVGLayer | LineSVGLayer | RectangleSVGLayer | TextSVGLayer;\n\nexport interface SVGImage extends SVGBase {\n  dimensions: {\n    width: number,\n    height: number,\n  },\n  layers: SVGLayer[],\n}\n","import ImageBuilder from './classes/ImageBuilder';\nimport { toString } from './imageSVG';\nimport { Position } from './interfaces/SVGImage';\n\nimport { settings, getNumStrings } from '../configs';\nimport { ExpandedTabs, TabBlock } from '../cpmImporter';\n\nconst { tabs: tabSettings } = settings;\n\n/**\n * Create the staff -- really the four tablature strings\n */\nfunction drawStaff(img: ImageBuilder, pos: Position, length: number): void {\n  const offset = tabSettings.lineWidth / 2;\n  const x = pos.x + offset;\n  let y = pos.y + offset;\n  const staff = img\n    .newGroup('staff')\n    .setStyle({\n      strokeColor: tabSettings.lineColor,\n      strokeWidth: `${tabSettings.lineWidth}`,\n    });\n  for (let i = 0; i < getNumStrings(); i++) {\n    staff.hLine(x, y, length);\n    y += tabSettings.lineSpacing;\n  }\n  staff.endGroup();\n}\n\n/**\n * @param isTruncate If `true` returns the length of the line, allowing for a terminating \"|\" character, othwrwise, it's for canvas width\n */\nfunction getWidth(tabs: ExpandedTabs, labelOffset: number, isTruncate: boolean): number {\n  if (!isTruncate) {\n    return (tabSettings.noteSpacing * tabs[0].length) + labelOffset + tabSettings.dotRadius;\n  }\n\n  let len = tabs[0].length;\n  let plusDot = tabSettings.dotRadius;\n  if (tabs[0][len - 1] === '|') {\n    // TODO: too much??? retest\n    len -= 1;\n    plusDot = 0;\n  }\n\n  return tabSettings.noteSpacing * len + labelOffset + plusDot;\n}\n\n/**\n * Loop over the normalized tabs emitting the dots/fingers on the passed in canvase\n * @param tabs {array} Array of normalized string data -- space (character) or int (fret number)\n * @param lineWidth Length in pixels (used only when line ends with a measure mark)\n */\nfunction drawNotes(img: ImageBuilder, pos: Position, tabs: ExpandedTabs, lineWidth: number): void {\n  const center: Position = {\n    x: 0,\n    y: pos.y,\n  };\n\n  tabs.forEach((tab, strIdx) => {\n    if (strIdx > 3) {\n      return;\n    }\n\n    center.x = pos.x;\n    tab.forEach((c, chrIdx) => {\n      // (c !== '-'){\n      if (c === '|') {\n        const jnum = chrIdx; // parseInt(chrIdx, 10);\n        const heavy = (((jnum + 1) < (tab.length - 1)) && (tab[jnum + 1] === '|')) || ((jnum === (tab.length - 1)) && (tab[jnum - 1] === '|'));\n        drawMeasure(img, {\n          x: (chrIdx === tab.length - 1) ? pos.x + lineWidth : center.x,\n          y: pos.y,\n        }, heavy);\n        // eslint-disable-next-line no-restricted-globals\n      } else if (!isNaN(parseInt(c, 10))) {\n        img\n          .circle(center.x, center.y, tabSettings.dotRadius)\n          .setStyle({\n            fillColor: tabSettings.dotColor,\n          });\n        img\n          .text(center.x, center.y + 0.5 * tabSettings.dotRadius, c)\n          .setStyle({\n            fontFamily: tabSettings.textFont,\n            fillColor: tabSettings.textColor,\n          });\n      }\n      center.x += tabSettings.noteSpacing;\n    });\n\n    center.y += tabSettings.lineSpacing;\n  });\n}\n\n/**\n * Draws a vertical \"measure\" demarcation line\n */\nfunction drawMeasure(img: ImageBuilder, pos: Position, isHeavyStroke: boolean): void {\n  const offset = tabSettings.lineWidth / 2;\n  img\n    .vLine(pos.x + offset, pos.y, (getNumStrings() - 1) * tabSettings.lineSpacing)\n    .setStyle({\n      strokeColor: tabSettings.lineColor,\n      strokeWidth: `${(isHeavyStroke ? 4.5 : 1) * tabSettings.lineWidth}`,\n    });\n}\n\n/**\n * Adds the string letters on the left-side of the canvas, before the tablature string lines\n */\nfunction drawLabels(img: ImageBuilder, pos: Position): void {\n  // ['A','E','C','G'];\n  const labels = settings.tuning.slice(0).reverse();\n  for (let i = 0; i < getNumStrings(); i++) {\n    img.text(1, (pos.y + (i + 0.3) * tabSettings.lineSpacing), labels[i]).setStyle({\n      fontFamily: tabSettings.labelFont,\n      fillColor: tabSettings.lineColor,\n      textAlign: 'left',\n    });\n  }\n}\n\nexport function generateTabSvg({ hasLabels, tabs }: TabBlock): string {\n  const labelOffset = (hasLabels) ? tabSettings.labelWidth : 0;\n  // how much space?\n  const height = ((getNumStrings() - 1) * tabSettings.lineSpacing) + (2 * tabSettings.dotRadius) + tabSettings.bottomPadding;\n\n  const img = new ImageBuilder().newImage(getWidth(tabs, labelOffset, false), height);\n  const pos = {\n    x: tabSettings.dotRadius + labelOffset,\n    y: 1 + tabSettings.dotRadius,\n  };\n  const lineWidth = getWidth(tabs, labelOffset, true);\n  drawStaff(img, pos, lineWidth);\n  drawNotes(img, pos, tabs, lineWidth);\n  if (hasLabels) {\n    drawLabels(img, pos);\n  }\n\n  return toString(img);\n}\n","/*!\n * Document   : UkeGeeks Song Formatter Scripts\n * Created on : Sep 15, 2012, 7:51:38 AM\n * Author     : Courts\n * Homepage   : https://github.com/buzcarter/song-formatter#readme\n */\n\nimport { Chord, runLine } from './cpmImporter';\nimport { definitions, shift, shiftChords } from './tunings';\nimport { Fix } from './htmlBeast';\nimport { plot } from './imageRenderer';\nimport { settings, InstrumentTunings } from './configs';\nimport scriptasaurus from './scriptasaurus';\n\nclass ChordBrush extends Chord {\n  // @ts-ignore-next-line\n  // eslint-disable-next-line class-methods-use-this\n  plot(...args): void {\n    // @ts-ignore-next-line\n    plot(...args);\n  }\n}\n\n/**\n * Finds page HTML elements & creates ukeGeek objects;\n * Reads song text, parses, draws choard diagrams.\n */\nconst publicInterface = {\n  chordBrush: ChordBrush, // legacy\n  ChordBrush,\n  chordImport: {\n    runLine,\n  },\n  definitions: {\n    ...definitions,\n    instrument: InstrumentTunings,\n  },\n  overlapFixer: {\n    Fix,\n  },\n  settings,\n  scriptasaurus,\n  toolsLite: {\n    addClass(ele: HTMLDivElement, className: string) {\n      ele.classList.add(className);\n    },\n    removeClass(ele: HTMLDivElement, className: string) {\n      ele.classList.remove(className);\n    },\n    setClass(ele: HTMLDivElement, className: string, toggle: boolean) {\n      ele.classList.toggle(className, toggle);\n    },\n  },\n  transpose: {\n    shift,\n    shiftChords,\n  },\n};\n\n// @ts-ignore-next-line\nwindow.ukeGeeks = Object.assign(window.ukeGeeks || {}, publicInterface);\n\nexport default publicInterface;\n","import {\n  getHandlesFromClass,\n  getHandlesFromId,\n  getUnknownChordErrors,\n  processSong,\n} from './htmlBeast';\nimport { definitions } from './tunings';\nimport { logger } from './tools';\nimport { settings, InstrumentTunings, sopranoUkuleleGcea } from './configs';\nimport { Song } from './cpmImporter';\n\nexport function init(): void {\n  const { addInstrument, useInstrument } = definitions;\n\n  // TODO: known problem -- need to preload Sorprano chord libarary then we can retune if needed\n  addInstrument(sopranoUkuleleGcea);\n  useInstrument(InstrumentTunings.sopranoUke);\n  if (settings.defaultInstrument !== InstrumentTunings.sopranoUke) {\n    useInstrument(settings.defaultInstrument);\n  }\n}\n\n/**\n * Runs all Scriptasaurus methods using the element Ids defined in the settings class.\n * This is your \"Do All\".\n */\nexport function run(): Song | null {\n  logger.log('run (Classic Mode)');\n  const song = processSong(getHandlesFromId());\n  if (!song) {\n    return null;\n  }\n  showUnknownChordErrors(getUnknownChordErrors());\n\n  // TODO: for legacy API\n  return Object.assign(song, {\n    chords: song.chordNames,\n  });\n}\n\n/**\n * Same as \"run\" except runs using class names, this allows you to have multiple songs on a single page.\n */\nexport function runByClasses(): Song[] {\n  const songs: Song[] = [];\n  const songWraps = document.querySelectorAll(settings.wrapClasses.wrap);\n  songWraps.forEach((wrap) => {\n    const song = processSong(getHandlesFromClass(wrap as HTMLElement));\n    if (!song) {\n      return;\n    }\n    // TODO: for legacy API\n    Object.assign(song, {\n      chords: song.chordNames,\n    });\n    songs.push(song);\n  });\n  return songs;\n}\n\n/**\n * Is this really nececessary?\n * @param offset {int} (optional) default 0. Number of semitones to shift the tuning. See ukeGeeks.definitions.instrument.\n */\nexport const setTuningOffset = (offset: number): void => definitions.useInstrument(offset);\n\nfunction showUnknownChordErrors(errs: string | string[]): void {\n  if (!errs.length) {\n    return;\n  }\n  const errStr = typeof errs === 'string'\n    ? errs\n    : errs.join(', ');\n  // eslint-disable-next-line no-alert\n  alert(`Forgive me, but I don't know the following chords: ${errStr}`);\n}\n\nexport default {\n  init,\n  run,\n  runByClasses,\n  setTuningOffset,\n};\n","import { JsonData } from './interfaces/CoreTypes';\n\nconst RegExes = {\n  DOUBLE_SPACES: /\\s{2,}/g,\n};\n\nexport const pack = (value: string): string => value.replace(RegExes.DOUBLE_SPACES, ' ').trim();\n\nexport const clean = (sourceObj: JsonData) => {\n  Object.keys(sourceObj).forEach((key) => {\n    delete sourceObj[key];\n  });\n  return sourceObj;\n};\n","export * from './helpers';\nexport * from './interfaces/CoreTypes';\n\nimport logger from './logger';\n\nexport {\n  logger,\n};\n","// import { JsonData } from './interfaces/CoreTypes';\n\n/* eslint-disable no-console, prefer-destructuring */\nconst error = console.error;\nconst info = console.info;\nconst log = console.log;\nconst warn = console.warn;\n\nconst json = (data: unknown) => info(JSON.stringify(data, null, 3).replace(/\\\\n/gm, '\\n'));\n\nexport default {\n  error,\n  info,\n  json,\n  log,\n  warn,\n};\n","import { Chord } from '../../cpmImporter';\n\nexport default class Instrument {\n  constructor(key: string, name: string, tuning: string[], chords: Chord[]) {\n    this.key = key;\n    this.name = name;\n    this.tuning = tuning;\n    this.chords = chords;\n  }\n\n  key: string;\n\n  name: string;\n\n  tuning: string[];\n\n  chords: Chord[];\n}\n","/**\n * Defines chords and provides simple lookup (find) tools.\n */\n\nimport { retune, RetuneMap } from './transpose';\n\nimport { chordNameAliases, InstrumentTunings } from '../configs';\nimport { Chord, runBlock } from '../cpmImporter';\n\nconst instruments: string[] = [];\n\n/**\n * Array of \"user\" defined chords, in compactChord format. Use \"Add\" method.\n */\nlet userChords: Chord[] = [];\nlet chordCache: Chord[] = [];\nlet globalOffset = 0;\nlet retuneMap: RetuneMap[] = [];\n\n/**\n * Define an instrument's chord dictionary, this makes this instrument avaiable for showing its chord diagrams.\n * @param definitions Block of CPM text -- specifically looks for instrument, tuning, and define statements.\n * @returns new instruments length\n */\nexport const addInstrument = (definitions: string | string[]): number => instruments.push(Array.isArray(definitions) ? definitions.join('\\n') : definitions);\n\n/**\n * Choose which instrument's chord dictionary you want used for the chord\n * diagrams. NOTE: .\n * @param offset {int} (optional) default 0. Number of semitones to shift the tuning.\n */\nexport function useInstrument(offset: number | string) {\n  offset = (arguments.length > 0) ? offset : InstrumentTunings.sopranoUke;\n  globalOffset = typeof offset === 'string' ? parseInt(offset, 10) : offset;\n  if (globalOffset > 0) {\n    retuneMap = retune(globalOffset);\n  }\n  setChords(runBlock(instruments[0]).chords);\n}\n\n/**\n * Returns expanded ChordObject for requested \"chord\"\n */\nexport function get(chordName: string): Chord | null {\n  // try User Defined chords first\n  const match = userChords.find((c) => c.name === chordName);\n  if (match) {\n    return match;\n  }\n\n  // next: built-in chords:\n  if (globalOffset < 1) {\n    return underscoreGet(chordName);\n  }\n\n  // user has retuned the chords, need to find chord name \"as-is\",\n  // but get the fingering from the mapping\n  const name = getAlias(chordName);\n\n  return retuneMap\n    .filter((t) => name === t.original)\n    .map((t) => underscoreGet(t.transposed))\n    .filter(Boolean)\n    .reduce((acc, c) => Object.assign(\n      new Chord(chordName),\n      c && {\n        dots: c.dots,\n        muted: c.muted,\n      }), null) || null;\n}\n\n/**\n * A chord name normalizer: We don't store any chord definitions for A#, Db, D#, Gb, or Ab. Instead\n * definitions of the more common notes are stored instead. So for the A# fingering we return the\n * Bb fingering and so on.\n *\n * Returns original chord name if there is no defined alias.\n */\nfunction getAlias(chordName: string): string {\n  const n = chordName.substr(0, 2);\n  return !chordNameAliases[n] ? chordName : chordNameAliases[n] + chordName.substr(2);\n}\n\n/**\n * Pass in \"standard\" chord name, returns match from defined chords or null if not found\n */\nfunction underscoreGet(chordName: string): Chord | null {\n  const name = getAlias(chordName);\n  const chord = chordCache.find((c) => name === c.name);\n  if (!chord) {\n    return null;\n  }\n\n  return Object.assign(\n    new Chord(chordName), {\n      dots: chord.dots,\n      muted: chord.muted,\n    },\n  );\n}\n\nexport function add(chords: Chord[]): number {\n  if (chords.length) {\n    for (let i = 0; i < chords.length; i++) {\n      userChords.push(chords[i]);\n    }\n  }\n  return userChords.length;\n}\n\nexport function replace(chords: Chord[]): number {\n  userChords = [];\n  return add(chords);\n}\n\nexport const getChords = (): Chord[] => chordCache;\n\n// eslint-disable-next-line no-return-assign\nexport const setChords = (chords: Chord[]) => chordCache = chords;\n","import * as definitions from './definitions';\nimport Instrument from './classes/Instrument';\n\nexport {\n  definitions,\n  Instrument,\n};\nexport default definitions;\nexport { get } from './definitions';\n// for legacy\nexport { shift, shiftChords } from './transpose';\n","/**\n * Can shift a single chord or list of chords up/down by a series of steps. Hangles\n * finding equivalent chord names (i.e. A# is same as Bb)\n */\nimport { getChords } from './definitions';\n\nimport { NumberDict } from '../tools';\n\nexport interface RetuneMap {\n  original: string,\n  transposed: string,\n}\n\ninterface ToneThing{\n  tone: number,\n  prefix: string,\n  suffix: string,\n}\n\nconst RegExes = {\n  CHORD_NAME: /^(?<prefix>[A-G][#b]?)(?<suffix>.*)/,\n};\n\n/* eslint-disable key-spacing */\nconst NoteToToneMap: NumberDict = Object.freeze({\n  A:      0,\n  'A#':   1,\n  Bb:     1,\n  B:      2,\n  C:      3,\n  'C#':   4,\n  Db:     4,\n  D:      5,\n  'D#':   6,\n  Eb:     6,\n  E:      7,\n  F:      8,\n  'F#':   9,\n  Gb:     9,\n  G:     10,\n  'G#':  11,\n  Ab:    11,\n});\n/* eslint-enable key-spacing */\n\n/**\n   * Pass in a chord name returns new chord name for the original chord shifted by \"steps\" semitones.\n  * @param name chord name, should be in chord dictionary\n  * @param steps number of semitones to transpose\n  */\nexport function shift(name: string, steps: number = 0): string | null {\n  const toneInfo = getTone(name);\n  if (toneInfo === null) {\n    return null;\n  }\n  let tone = (toneInfo.tone + steps) % 12;\n  // TODO: negative steps are allowed!!!\n  if (tone < 0) {\n    tone += 12;\n  }\n\n  // TODO: this is nuts? reduce????\n  const result = Object.keys(NoteToToneMap)\n    .filter((key) => tone === NoteToToneMap[key])\n    .reduce((acc, key) => key + toneInfo.suffix);\n\n  return result || null;\n}\n\n/**\n * Returns object with name (A - G with flat/sharp), integer value (0 - 11), and its \"suffix\" (minor, 7th, etc)\n */\nexport function getTone(name: string): ToneThing | null {\n  if (!name || typeof name !== 'string') {\n    return null;\n  }\n\n  const matches = name.match(RegExes.CHORD_NAME);\n  if (!matches?.groups) {\n    return null;\n  }\n\n  const { prefix, suffix } = matches.groups;\n  return {\n    tone: NoteToToneMap[prefix],\n    prefix,\n    suffix,\n  };\n}\n\n/**\n * Returns a mapping -- an array of JSON with \"original\" chord name and \"transposed\" chord names.\n */\nexport function retune(offset: number | undefined): RetuneMap[] {\n  offset = offset || 0;\n  const hasOffset = offset === 0;\n\n  return getChords()\n    .map((chord) => ({\n      original: chord.name,\n      transposed: hasOffset ? chord.name : shift(chord.name, offset) || '',\n    }));\n}\n\n/**\n * returns copy of `chordNames`, each chord shifted by `semitoneSteps` steps (up or down)\n */\nexport const shiftChords = (chordNames: string[], semitoneSteps: number): string[] => chordNames\n  .map((c) => shift(c, semitoneSteps))\n  .filter(Boolean) as string[];\n","// fdRequire.define('scriptasaurus/ukeGeeks.definitions.sopranoUkuleleGcea', (require, module) => {\n// -------------------------------------------------------\n// Scriptasaurus preloads Soprano Uke chord dictionary.\n// Unusual array joined to make multi-lined super string\n// being used to avoid JsLint warnings about JS string\n// continuation character: \\\n// -------------------------------------------------------\nconst sopranoUkuleleGcea = [\n  // Required: Instruement Name and Tuning (string names)\n  // -------------------------------------------------------\n  '{instrument: Soprano Ukulele}',\n  '{tuning: G C E A}',\n  //  Ab returns G#\n  //  A\n  // -------------------------------------------------------\n  '{define: A frets 2 1 0 0 fingers 2 1 0 0}',\n  '{define: Am frets 2 0 0 0 fingers 1 0 0 0}',\n  '{define: A7 frets 0 1 0 0 fingers 0 1 0 0}',\n  '{define: A7sus4 frets 0 2 0 0 fingers 0 2 0 0}',\n  '{define: Am7 frets 0 0 0 0}',\n  '{define: Adim frets 2 3 2 3 fingers 1 3 2 4}',\n  '{define: Amaj7 frets 1 1 0 0 fingers 1 2 0 0}',\n  '{define: A6 frets 2 4 2 4 fingers 1 3 2 4}',\n  '{define: Asus2 frets 2 4 5 2 fingers 2 3 4 1}',\n  '{define: Asus4 frets 2 2 0 0 fingers 1 2 0 0}',\n  '{define: Aaug frets 2 1 1 4 fingers 2 1 1 4 add: string 1 fret 1 finger 1 add: string 4 fret 1 finger 1}',\n  '{define: Am6 frets 2 4 2 3 fingers 1 3 1 2 add: string 2 fret 2 finger 1}',\n  '{define: A9 frets 0 1 0 2 fingers 0 1 0 2}',\n  //  A# retruns Bb\n  //  Bb\n  // -------------------------------------------------------\n  '{define: Bb frets 3 2 1 1 fingers 3 2 1 1}',\n  '{define: Bbm frets 3 1 1 1 fingers 3 1 1 1 add: string 1 fret 1 finger 1}',\n  '{define: Bb7 frets 1 2 1 1 fingers 1 2 1 1 add: string 2 fret 1 finger 1}',\n  '{define: Bb7sus4 frets 1 3 1 1 fingers 1 3 1 1 add: string 2 fret 1 finger 1}',\n  '{define: Bbm7 frets 1 1 1 1 fingers 1 1 1 1}',\n  '{define: Bbdim frets 0 1 0 1 fingers 0 1 0 2}',\n  '{define: Bbmaj7 frets 2 2 1 1 fingers 2 2 1 1}',\n  '{define: Bb6 frets 0 2 1 1 fingers 0 2 1 1}',\n  '{define: Bbm6 frets 0 1 1 1 fingers 0 1 1 1}',\n  '{define: Bbsus2 frets 3 0 1 1 fingers 3 0 1 1}',\n  '{define: Bbsus4 frets 3 3 1 1 fingers 3 3 1 1}',\n  '{define: Bbaug frets 3 2 2 5 fingers 2 1 1 4 add: string 1 fret 2 finger 1 add: string 4 fret 2 finger 1}',\n  '{define: Bb9 frets 1 2 1 3 fingers 2 1 4 3}',\n  // '{define: Bbmaj7 frets 2 2 1 1 fingers 2 2 1 1}',\n  '{define: Bbm7-5 frets 1 1 0 1 fingers 1 2 0 3}',\n  //  B\n  // -------------------------------------------------------\n  '{define: B frets 4 3 2 2 fingers 3 2 1 1}',\n  '{define: Bm frets 4 2 2 2 fingers 3 1 1 1 add: string 1 fret 2 finger 1}',\n  '{define: Bm6 frets 1 2 2 2 fingers 1 2 3 4}',\n  '{define: B7 frets 2 3 2 2 fingers 1 2 1 1 add: string 2 fret 2 finger 1}',\n  '{define: B7sus4 frets 2 4 2 2 fingers 1 3 1 1 add: string 2 fret 2 finger 1}',\n  '{define: Bm7 frets 2 2 2 2 fingers 1 1 1 1}',\n  '{define: Bdim frets 1 2 1 2 fingers 1 3 2 4}',\n  '{define: Bmaj7 frets 3 3 2 2 fingers 2 2 1 1}',\n  '{define: B6 frets 1 3 2 2 fingers 1 4 2 3}',\n  '{define: Bsus2 frets 5 1 2 2 fingers 4 1 3 2}',\n  '{define: Bsus4 frets 4 4 2 2 fingers 2 2 1 1}',\n  '{define: Baug frets 0 3 3 2 fingers 0 2 2 1}',\n  '{define: B9 frets 2 3 2 4}',\n  //  C\n  // -------------------------------------------------------\n  '{define: C frets 0 0 0 3 fingers 0 0 0 3}',\n  '{define: Cm frets 0 3 3 3 fingers 0 1 2 3}',\n  '{define: C7 frets 0 0 0 1 fingers 0 0 0 1}',\n  '{define: C7sus4 frets 0 0 1 1 fingers 0 0 1 1}',\n  '{define: Cm7 frets 3 3 3 3 fingers 1 1 1 1}',\n  '{define: Cdim frets 2 3 2 3 fingers 1 3 2 4}',\n  '{define: Cmaj7 frets 0 0 0 2 fingers 0 0 0 1}',\n  '{define: C6 frets 0 0 0 0}',\n  '{define: Cm6 frets 0 3 5 5 fingers 0 1 3 1}',\n  '{define: Csus2 frets 0 2 3 3 fingers 0 1 2 2}',\n  '{define: Csus4 frets 0 0 1 3 fingers 0 0 1 3}',\n  '{define: Caug frets 1 0 0 3 fingers 1 0 0 4}',\n  '{define: C9 frets 0 2 0 1 fingers 0 2 0 1}',\n  //  C#\n  // -------------------------------------------------------\n  '{define: C# frets 1 1 1 4 fingers 1 1 1 4 add: string 4 fret 1 finger 1}',\n  '{define: C#m frets 1 4 4 4 fingers 1 2 3 3}',\n  '{define: C#7 frets 1 1 1 2 fingers 1 1 1 2 add: string 4 fret 1 finger 1}',\n  '{define: C#7sus4 frets 1 1 2 2 fingers 1 1 2 3}',\n  '{define: C#m7 frets 1 4 4 2 fingers 1 3 3 2}',\n  '{define: C#dim frets 0 1 0 1 fingers 0 1 0 2}',\n  '{define: C#maj7 frets 1 1 1 3 fingers 1 1 1 3 add: string 4 fret 1 finger 1}',\n  '{define: C#6 frets 1 1 1 1 fingers 1 1 1 1}',\n  '{define: C#m6 frets 1 1 0 1 fingers 1 2 0 3}',\n  '{define: C#sus2 frets 1 3 4 4 fingers 1 2 3 3}',\n  '{define: C#sus4 frets 1 1 2 4 fingers 1 1 2 4}',\n  '{define: C#aug frets 2 1 1 4 fingers 2 1 1 4 add: string 1 fret 1 finger 1 add: string 4 fret 1 finger 1}',\n  '{define: C#9 frets 1 3 1 2}',\n  //  Db returns C#\n  //  D\n  // -------------------------------------------------------\n  '{define: D frets 2 2 2 0 fingers 1 1 1 0}',\n  '{define: Dm frets 2 2 1 0 fingers 2 2 1 0}',\n  '{define: Dm6 frets 0 2 1 2 fingers 0 2 1 3}',\n  '{define: D7 frets 2 2 2 3 fingers 1 1 1 2 add: string 4 fret 2 finger 1}',\n  '{define: D7sus4 frets 2 2 3 3 fingers 1 1 2 3}',\n  '{define: Dm7 frets 2 2 1 3 fingers 2 2 1 3}',\n  '{define: Ddim frets 1 2 1 2 fingers 1 3 2 4}',\n  '{define: Dmaj7 frets 2 2 2 4 fingers 1 1 1 2 add: string 4 fret 2 finger 1}',\n  '{define: D6 frets 2 2 2 2 fingers 2 2 2 2}',\n  '{define: Dsus2 frets 2 2 0 0 fingers 1 2 0 0}',\n  '{define: Dsus4 frets 0 2 3 0 fingers 0 1 2 0}',\n  '{define: Daug frets 3 2 2 5 fingers 2 1 1 4 add: string 1 fret 2 finger 1 add: string 4 fret 2 finger 1}',\n  '{define: D9 frets 2 4 2 3}',\n  //  D# returns Eb\n  //  Eb\n  // -------------------------------------------------------\n  '{define: Eb frets 0 3 3 1 fingers 0 2 2 1}',\n  '{define: Ebm frets 3 3 2 1 fingers 3 3 2 1}',\n  '{define: Eb7 frets 3 3 3 4 fingers 1 1 1 2 add: string 4 fret 3 finger 1}',\n  '{define: Eb7sus4 frets 3 3 4 4 fingers 1 1 2 3}',\n  '{define: Ebm7 frets 3 3 2 4 fingers 2 2 1 4}',\n  '{define: Ebdim frets 2 3 2 3 fingers 1 3 2 4}',\n  '{define: Ebmaj7 frets 3 3 3 5 fingers 1 1 1 2 add: string 4 fret 3 finger 1}',\n  '{define: Eb6 frets 3 3 3 3 fingers 1 1 1 1}',\n  '{define: Ebm6 frets 3 3 2 3 fingers 2 3 1 4}',\n  '{define: Ebsus2 frets 3 3 1 1 fingers 2 2 1 1}',\n  '{define: Ebsus4 frets 1 3 4 1 fingers 2 3 4 1}',\n  '{define: Ebaug frets 0 3 3 2 fingers 0 2 2 1}',\n  '{define: Eb9 frets 0 1 1 1}',\n  //  E\n  // -------------------------------------------------------\n  '{define: E frets 4 4 4 2 fingers 2 3 4 1}',\n  '{define: Em frets 0 4 3 2 fingers 0 3 2 1}',\n  '{define: E7 frets 1 2 0 2 fingers 1 2 0 3}',\n  '{define: E7sus4 frets 2 2 0 2 fingers 2 3 0 4}',\n  '{define: Em6 frets 4 4 3 4 fingers 2 3 1 4}',\n  '{define: Em7 frets 0 2 0 2 fingers 0 1 0 2}',\n  '{define: Edim frets 0 1 0 1 fingers 0 1 0 2}',\n  '{define: Emaj7 frets 1 3 0 2 fingers 1 3 0 2}',\n  '{define: E6 frets 4 4 4 4 fingers 1 1 1 1}',\n  '{define: Esus2 frets 4 4 2 2 fingers 3 3 1 1}',\n  '{define: Esus4 frets 2 4 0 2 fingers 2 4 0 1}',\n  '{define: Eaug frets 1 0 0 3 fingers 1 0 0 4}',\n  '{define: E9 frets 1 2 2 2}',\n  //  F\n  // -------------------------------------------------------\n  '{define: F frets 2 0 1 0 fingers 2 0 1 0}',\n  '{define: Fm frets 1 0 1 3 fingers 1 0 2 4}',\n  '{define: F7 frets 2 3 1 0 fingers 2 3 1 0}',\n  '{define: F7sus4 frets 3 3 1 3 fingers 2 3 1 4}',\n  '{define: Fm6 frets 1 2 1 3 fingers 1 2 1 3 add: string 2 fret 1 finger 1 add: string 4 fret 1 finger 1}',\n  '{define: Fm7 frets 1 3 1 3 fingers 1 3 2 4}',\n  '{define: Fdim frets 1 2 1 2 fingers 1 3 2 4}',\n  '{define: Fmaj7 frets 5 5 0 0 fingers 1 2 0 0}',\n  '{define: F6 frets 2 2 1 3 fingers 2 2 1 4}',\n  '{define: Fsus2 frets 0 0 1 3 fingers 0 0 1 3}',\n  '{define: Fsus4 frets 3 0 1 3 fingers 3 0 1 4}',\n  '{define: F6sus2 frets 0 0 1 3 fingers 0 0 1 3}',\n  '{define: F6sus4 frets 3 0 1 1 fingers 3 0 1 1}',\n  '{define: F6aug frets 2 1 1 4 fingers 2 1 1 4 add: string 1 fret 1 finger 1 add: string 4 fret 1 finger 1}',\n  '{define: F9 frets 2 3 3 3}',\n  '{define: Faug frets 2 1 1 0 fingers 3 1 2 0}',\n  //  F#\n  // -------------------------------------------------------\n  '{define: F# frets 3 1 2 1 fingers 3 1 2 1 add: string 1 fret 1 finger 1 add: string 3 fret 1 finger 1}',\n  '{define: F#m frets 2 1 2 0 fingers 2 1 3 0}',\n  '{define: F#7 frets 3 4 2 4 fingers 2 3 1 4}',\n  '{define: F#7sus4 frets 4 4 2 4 fingers 2 3 1 4}',\n  '{define: F#m7 frets 2 4 2 4 fingers 1 3 2 4}',\n  '{define: F#dim frets 2 3 2 3 fingers 1 3 2 4}',\n  '{define: F#maj7 frets 3 5 2 4 fingers 2 4 1 3}',\n  '{define: F#m6 frets 2 1 2 4 fingers 2 1 3 4}',\n  '{define: F#6 frets 3 3 2 4 fingers 2 2 1 4}',\n  '{define: F#sus2 frets 1 1 2 4 fingers 1 1 2 4}',\n  '{define: F#sus4 frets 4 1 2 2 fingers 4 1 2 3}',\n  '{define: F#aug frets 3 2 2 5 fingers 2 1 1 4 add: string 1 fret 2 finger 1 add: string 4 fret 2 finger 1}',\n  '{define: F#9 frets 1 1 0 1}',\n  //  Gb returns F#\n  //  G\n  // -------------------------------------------------------\n  '{define: G frets 0 2 3 2 fingers 0 1 3 2}',\n  '{define: Gm frets 0 2 3 1 fingers 0 2 3 1}',\n  '{define: Gm6 frets 0 2 0 1 fingers 0 2 0 1}',\n  '{define: G7 frets 0 2 1 2 fingers 0 2 1 3}',\n  '{define: G7sus4 frets 0 2 1 3 fingers 0 2 1 4}',\n  '{define: Gm7 frets 0 2 1 1 fingers 0 2 1 1}',\n  '{define: Gdim frets 0 1 0 1 fingers 0 1 0 2}',\n  '{define: Gmaj7 frets 0 2 2 2 fingers 0 1 2 3}',\n  '{define: G6 frets 0 2 0 2 fingers 0 1 0 2}',\n  '{define: Gsus2 frets 0 2 3 0 fingers 0 1 2 0}',\n  '{define: Gsus4 frets 0 2 3 3 fingers 0 1 2 3}',\n  '{define: Gaug frets 0 3 3 2 fingers 0 2 2 1}',\n  // '{define: Gsus4 frets 0 2 3 3}',\n  '{define: G9 frets 2 2 1 2}',\n  //  G#\n  // -------------------------------------------------------\n  '{define: G# frets 5 3 4 3 fingers 3 1 2 1 add: string 1 fret 3 finger 1 add: string 3 fret 3 finger 1}',\n  '{define: G#m frets 1 3 4 2 fingers 1 3 4 2}',\n  '{define: G#7 frets 1 3 2 3 fingers 1 3 2 4}',\n  '{define: G#7sus4 frets 1 3 2 4 fingers 1 3 2 4}',\n  '{define: G#m7 frets 1 3 2 2 fingers 1 4 2 3}',\n  '{define: G#dim frets 1 2 1 2 fingers 1 3 2 4}',\n  '{define: G#maj7 frets 1 3 3 3 fingers 1 2 2 3}',\n  '{define: G#6 frets 1 3 1 3 fingers 1 3 2 4}',\n  '{define: G#m6 frets 1 3 1 2 fingers 1 3 1 2 add: string 2 fret 1 finger 1 add: string 4 fret 1 finger 1}',\n  '{define: G#sus2 frets 1 3 4 1 fingers 2 3 4 1}',\n  '{define: G#sus4 frets 1 3 4 4 fingers 1 2 3 3}',\n  '{define: G#aug frets 1 0 0 3 fingers 1 0 0 4}',\n  '{define: G#9 frets 1 0 2 1 fingers 1 0 3 2}',\n  //  slash chords & other oddities\n  // -------------------------------------------------------\n  '{define: C-F frets 2 0 1 3}',\n  '{define: D/A frets 2 2 2 0}',\n  '{define: Dm/C frets 2 2 1 3}',\n  '{define: Fm7/C frets 1 3 1 3}',\n  '{define: G/B frets 0 2 3 2}',\n  '{define: G/F# frets 0 2 2 2}',\n  '{define: G/F frets 0 2 1 2}',\n  '{define: G7/B frets 0 2 1 2}',\n];\n\nexport default sopranoUkuleleGcea;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(206);\n"],"names":["chordNameAliases","Object","freeze","Db","Gb","Ab","InstrumentTunings","sopranoUke","baritoneUke","settings","sopranoUkuleleGcea","getLastStringName","getNumStrings","Settings","seal","fonts","dot","text","fret","colors","fretLines","dots","dotText","fretText","xStroke","fretBox","showText","height","width","fretSpace","stringSpace","dotRadius","lineWidth","topLeftPos","x","y","xWidth","inlineFretBox","ids","songText","canvas","container","wrapClasses","wrap","diagrams","opts","columnsEnabled","retainBrackets","ignoreCommonChords","sortAlphabetical","autoFixOverlaps","debugVerbose","inlineDiagrams","numFrets","tuning","length","defaultInstrument","tabs","lineSpacing","noteSpacing","lineColor","labelWidth","labelFont","dotColor","textFont","textColor","bottomPadding","commonChords","ChordParts","constructor","definition","addIns","define","adds","this","RegExes","DEFINE","ADD","NAME","FRETS","FINGERS","MUTED","ADD_IN","INSTRUCTION","TUNING","NBR_OR_X","ANY","getChordParts","line","pack","matches","match","results","push","replace","getAddIns","getChord","frets","muted","fretMatches","i","isX","parseInt","fretOMatic","name","getName","fingers","split","getFingers","log","chrd","reduce","ignoreMe","index","value","fretNumber","finger","toDots","forEach","addInDots","parts","lines","partsAry","acc","getChordPartsAry","getInstrument","getTuning","result","t","toLowerCase","getKey","chord","string","title","album","artist","st","st2","key","hasChords","ugsMeta","chordDefs","chordNames","columnCount","songBlocks","BLOCKS","TAB_BLOCKS","CHORUS_BLOCKS","PRE_TAG","HTML_COMMENT","COLUMN_BREAK","CHORD","ALL_CHORDS","COMMAND_ARGS","COMMAND_VERB","firstChord","isSongBlock","block","type","BlockTypes","TabBlock","isTabBlock","getBlockType","test","ChorusBlock","TextBlock","getInfo","rtn","filter","song","hasBeenInitialized","Comment","isBlockBoundary","trim","textToSongBlocks","stripHtml","verbToBlockTypeHash","CpmInstructions","Title","titleShort","Artist","subtitle","Subtitle","subtitleShort","Album","comment","commentShort","Key","keyShort","ChordDefinition","UkeGeeksMeta","map","args","verb","parseInstructions","columnBreak","columnBreakShort","ColumnBreak","newPage","newPageShort","NewPage","parseSimpleInstructions","chordFound","hasOnlyChords","ChordOnlyText","ChordText","PlainText","markChordLines","assign","clean","readTabs","expandTabs","echo","parseSongBlocks","info","d","runLine","logger","json","__test__","getTypeName","keys","find","typeName","errs","msg","e","getChordNames","includes","Song","Dot","Chord","parseCPM","runBlock","stripStringLabels","tabStrings","substr","getFretNumbers","integerRegEx","getSymbols","twoDigitRegEx","singleDigitRegex","symbols","getMinLineLength","minLength","trailingDashesRegEx","getGuideLine","guide","singleDashReg","lastGuide","getPackedLines","packed","stringIdx","lineIdx","fretCount","guideIdx","chrNote","hasLabels","ChordsStyles","INLINE_SPACER","PageStyles","INLINE_DIAGRAMS","NO_CHORDS","RefDiagramsStyles","IGNORED_CHORDS","SongStyles","Tabs","Chorus","PreChords","PrePlain","NoLyrics","ColumnWrap","ColumnCount","Column","regEx","packChords","openBracket","closeBracket","encloseChords","querySelectorAll","undefined","document","getElementById","HTMLHandles","get","getHandlesFromClass","getHandlesFromId","getUnknownChordErrors","processSong","Fix","getBox","ele","box","top","left","right","isNaN","offsetLeft","offsetTop","scrollLeft","scrollTop","offsetParent","getOffsets","getWidth","em","getElementsByTagName","emWidth","clip","style","pixelWidth","offsetWidth","elements","Array","from","paddingRight","slice","codeA","codeB","strongA","strongB","boxA","boxB","b","a","checkChords","errList","handles","innerHTML","songToHTML","init","show","classList","add","showInline","concat","getErrors","toggle","TACET","errors","ignoreMatchList","htmlHandles","sort","chordName","prototype","indexOf","plot","para","createElement","className","join","appendChild","getAttribute","getIgnoredChords","songBlocksToHTML","nl","nextType","html","generateTabSvg","firstLine","preClasses","currentType","lastType","Undefined","tempSongBlocks","markupChords","generateChordSvg","fontSettings","colorSettings","img","newImage","pos","fretColor","offset","stringHeight","fretWidth","fretboard","newGroup","setStyle","fillColor","strokeColor","strokeWidth","toString","vLine","hLine","rectangle","endGroup","drawFretboard","centers","fudgeY","fretRange","max","min","first","last","getFretRange","firstFret","isArray","s","p","circle","fontFamily","txtPos","textAlign","isMuted","drawX","mutedStrings","chordBox","ImageBuilder","dimensions","layers","LayerTypes","IMAGE","root","layer","current","obj","group","GROUP","centerX","centerY","radius","CIRCLE","center","RECTANGLE","x0","y0","x1","y1","LINE","endPoints","textLayer","TEXT","styleDef","target","getData","Boolean","getStyle","property","isCircle","shape","isGroup","isLine","isRectangle","isText","renderLayers","renderLayer","toSVGString","image","element","wrapper","tabSettings","labelOffset","isTruncate","len","plusDot","staff","drawStaff","tab","strIdx","c","chrIdx","jnum","heavy","isHeavyStroke","drawMeasure","drawNotes","labels","reverse","drawLabels","ChordBrush","publicInterface","chordBrush","chordImport","definitions","instrument","overlapFixer","scriptasaurus","toolsLite","addClass","removeClass","remove","setClass","transpose","shift","shiftChords","window","ukeGeeks","addInstrument","useInstrument","run","errStr","alert","showUnknownChordErrors","chords","runByClasses","songs","setTuningOffset","sourceObj","error","console","warn","data","JSON","stringify","instruments","userChords","chordCache","globalOffset","retuneMap","getAlias","n","underscoreGet","arguments","retune","setChords","original","transposed","getChords","Instrument","CHORD_NAME","NoteToToneMap","A","Bb","B","C","D","Eb","E","F","G","steps","toneInfo","getTone","tone","suffix","groups","prefix","hasOffset","semitoneSteps","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","o","defineProperty","enumerable","prop","hasOwnProperty","r","Symbol","toStringTag"],"sourceRoot":""}