{"version":3,"file":"song-formatter.bundle.js","mappings":"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","sources":["webpack://@ukegeeks/song-formatter/./src/js/configs/globalConsts.ts","webpack://@ukegeeks/song-formatter/./src/js/configs/index.ts","webpack://@ukegeeks/song-formatter/./src/js/configs/settings.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/chordParser.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/classes/Chord.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/classes/Dot.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/classes/Song.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/cpmParser.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/debugWriter.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/errorWriter.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/getChordNames.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/index.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/interfaces/BlockTypesEnum.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/metaParser.ts","webpack://@ukegeeks/song-formatter/./src/js/cpmImporter/tabs.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/Styles.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/chords.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/classes/HTMLHandles.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/handles.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/index.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/overlapFixer.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/page.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/referenceDiagrams.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/song.ts","webpack://@ukegeeks/song-formatter/./src/js/htmlBeast/svgPlot.ts","webpack://@ukegeeks/song-formatter/./src/js/imageRenderer/chordSVG.ts","webpack://@ukegeeks/song-formatter/./src/js/imageRenderer/classes/ImageBuilder.ts","webpack://@ukegeeks/song-formatter/./src/js/imageRenderer/imageSVG.ts","webpack://@ukegeeks/song-formatter/./src/js/imageRenderer/index.ts","webpack://@ukegeeks/song-formatter/./src/js/imageRenderer/interfaces/SVGImage.ts","webpack://@ukegeeks/song-formatter/./src/js/imageRenderer/tabSVG.ts","webpack://@ukegeeks/song-formatter/./src/js/index.ts","webpack://@ukegeeks/song-formatter/./src/js/scriptasaurus.ts","webpack://@ukegeeks/song-formatter/./src/js/tools/helpers.ts","webpack://@ukegeeks/song-formatter/./src/js/tools/index.ts","webpack://@ukegeeks/song-formatter/./src/js/tools/logger.ts","webpack://@ukegeeks/song-formatter/./src/js/tunings/chordDefinitions.ts","webpack://@ukegeeks/song-formatter/./src/js/tunings/classes/Instrument.ts","webpack://@ukegeeks/song-formatter/./src/js/tunings/index.ts","webpack://@ukegeeks/song-formatter/./src/js/tunings/transpose.ts","webpack://@ukegeeks/song-formatter/./src/js/configs/definitions.sopranoUkuleleGcea.js","webpack://@ukegeeks/song-formatter/webpack/bootstrap","webpack://@ukegeeks/song-formatter/webpack/runtime/define property getters","webpack://@ukegeeks/song-formatter/webpack/runtime/hasOwnProperty shorthand","webpack://@ukegeeks/song-formatter/webpack/runtime/make namespace object","webpack://@ukegeeks/song-formatter/webpack/startup"],"sourcesContent":["import { NumberDict, StringDict } from '../tools';\n\n/**\n * local substitions (replacements for identical chord shapes)\n */\nexport const chordNameAliases: StringDict = Object.freeze({\n  'A#': 'Bb',\n  Db: 'C#',\n  'D#': 'Eb',\n  Gb: 'F#',\n  Ab: 'G#',\n});\n\n/**\n * Predefined ukuele instrument tunings\n * Actually this is just offset, default is 0;\n */\nexport const InstrumentTunings: NumberDict = Object.freeze({\n  none: 0,\n  /** GCEA */\n  sopranoUke: 0,\n  /** DGBA  -- Baritone's \"A\" fingering is the Soprano's \"D\" */\n  baritoneUke: 5,\n});\n","import settings from './settings';\nimport sopranoUkuleleGcea from './definitions.sopranoUkuleleGcea';\n\nexport const { getLastStringName, getNumStrings } = settings;\nexport { settings, sopranoUkuleleGcea };\nexport * from './globalConsts';\nexport { TabSettings } from './interfaces/Settings';\n","import { TabSettings } from './interfaces/Settings';\nimport { InstrumentTunings } from './globalConsts';\n\nimport { BooleanDict, StringDict } from '../tools';\nimport { FretBox } from '../imageRenderer';\n\n/**\n * Customize your installation. This JSON object controls appearance and\n * HTML element names. It's divided into four sections: graphics, ids, layout,\n * and \"options\".\n */\nconst Settings = Object.seal({\n\n  /**\n   * Chord Diagram Font styles -- font size, font-weight, font-face stack, etc.\n   */\n  fonts: {\n    dot: '9pt Arial Black,Arial',\n    text: 'bold 14pt Arial',\n    fret: 'bold 13pt Arial',\n  } as StringDict,\n\n  /**\n   * Chord Diagram Colors for fretboard's grid lines and text.\n   */\n  colors: {\n    /* eslint-disable key-spacing */\n    fretLines: '#003366',\n    dots: '#ff0000',\n    dotText: '#ffffff',\n    text: '#000000',\n    fretText: '#4a4a4a',\n    /* a muted string's 'X' stroke color */\n    xStroke: '#444444',\n    /* eslint-enable key-spacing */\n  } as StringDict,\n\n  fretBox: {\n    showText: true,\n    height: 150,\n    width: 100,\n    fretSpace: 20,\n    stringSpace: 20,\n    dotRadius: 8,\n    lineWidth: 1.6,\n    topLeftPos: {\n      x: 22,\n      y: 25,\n    },\n    xWidth: 0.45 * 20,\n    xStroke: 1.6 * 1.6,\n    fonts: {},\n  } as FretBox,\n\n  /**\n   * Layout of Chord Digrams when inlineFredBoxes are being used. Identical in\n   * structure to \"fretBox\". See fretBox for properties.\n   */\n  inlineFretBox: {\n    showText: false,\n    height: 50,\n    width: 40,\n    fretSpace: 9,\n    stringSpace: 7,\n    dotRadius: 3,\n    lineWidth: 1,\n    topLeftPos: {\n      x: 10,\n      y: 2,\n    },\n    xWidth: 0.7 * 7,\n    xStroke: 1.4 * 1,\n    fonts: {\n      dot: '8pt Arial',\n      text: '8pt Arial',\n      fret: '8pt Arial',\n    },\n  } as FretBox,\n\n  /* eslint-disable key-spacing */\n  /**\n   * ID's of key HTML page elements, the \"buckets\" into which generated\n   * HTML markup will be placed\n   * @todo sync naming with the `wrapClasses`\n   * @see `wrapClasses`\n   */\n  ids: {\n    /** \"Meta\" includes song Title, Subtitle, Album, Artist */\n    songMeta:     'ukeSongMeta',\n    /** element holding the song's text */\n    songText:     'ukeSongText',\n    /** Chord Diagrams */\n    canvas:       'ukeChordsCanvas',\n    /** wraps BOTH Song Text and Chord Canvas */\n    container:    'ukeSongContainer',\n  } as StringDict,\n\n  /**\n   * Magic CSS Class names used to find page elements-- be careful if renaming!\n   * @todo update with `js-` prefix!\n   * @see `ids`\n   */\n  wrapClasses: {\n    /** \"Meta\" includes song Title, Subtitle, Album, Artist */\n    songMeta:     'ugs-song-meta',\n    /** wraps BOTH Song Text and Chord Canvas */\n    wrap:         '.ugs-song-wrap',\n    /** Chord Diagrams */\n    diagrams:     '.ugs-diagrams-wrap',\n    /** element holding the song's text */\n    text:         '.ugs-source-wrap',\n  } as StringDict,\n  /* eslint-enable key-spacing */\n\n  /**\n   * Options (Features) you can turn on or off\n   */\n  opts: {\n    columnsEnabled: true,\n    /**\n     * the [ and ] surrounding chord names often looks bad in print (usually only good when inline)\n     * set true to keep then, false to get rid of the buggers.\n     */\n    retainBrackets: false,\n    /**\n     * if `true` chords in the \"commonChords\" list will be ignored (excluded) from having thier\n     * master chord diagram drawn\n     */\n    ignoreCommonChords: false,\n    /**\n     * If true chord reference diagrams are sorted alphabetically, otherwise chords are shown in the\n     * order in which they appear within the song.\n     */\n    sortAlphabetical: false,\n    /**\n     * if `true` chords that overlap each other (in the music area) will have their spacing adjuste\n     * to prevent overlapping.\n     */\n    autoFixOverlaps: true,\n    debugVerbose: false,\n  } as BooleanDict,\n\n  /**\n   * If `true` the Chord Digram is drawn ABOVE lyrics\n   */\n  inlineDiagrams: false,\n\n  /**\n   * Number of frets to draw. Default is 5 (as this is as wide as my hand can go and\n   * I've never seen a chord diagram requiring more than this. But ya never know.\n   */\n  numFrets: 5,\n\n  /** Array of string names (letters) */\n  tuning: ['G', 'C', 'E', 'A'] as string[],\n\n  /**\n   * Number of Strings (dashed lines of tablature notation) expected. (For now\n   * a constant -- ukueleles \"always\" have four).\n   * @todo Making a variable to help support port for other instruments.\n   */\n  getNumStrings() {\n    return Settings.tuning.length;\n  },\n\n  /**\n   * Last String Name (Note), as above, on Ukulele is a \"G\".\n   * @todo Here for other instruments.\n   */\n  getLastStringName() {\n    return Settings.tuning[0];\n    // export const LAST_STRING_NAME = 'G';\n  },\n\n  /**\n   * The initial tuning when page first loads\n   */\n  defaultInstrument: InstrumentTunings.none,\n\n  tabs: {\n    lineSpacing: 16,\n    noteSpacing: 14,\n    lineWidth: 1,\n    lineColor: '#999999',\n    labelWidth: 12,\n    labelFont: '10pt Arial, Helvetica, Verdana, Geneva, sans-serif',\n    dotColor: '#eaeaea',\n    dotRadius: 10,\n    textFont: 'bold 12pt Arial, Helvetica, Verdana, Geneva, sans-serif',\n    textColor: '#000000',\n    bottomPadding: 10,\n  } as TabSettings,\n\n  /**\n   * List of common chords to be \"ignored\" (won't show master chord diagrams)\n   */\n  commonChords: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'Am'] as string[],\n});\n\nexport default Settings;\n","import Dot from './classes/Dot';\nimport Chord from './classes/Chord';\nimport { log } from './errorWriter';\n\nimport { settings } from '../configs';\n\nconst RegExes = Object.freeze({\n  /* eslint-disable key-spacing */\n  ADD_SPLIT:         /\\b(string|fret|finger)\\b/,\n  KEYWORDS_SPLIT:    /(\\bdefine\\s*:\\s*|\\bfrets\\b|\\bfingers\\b|\\badd\\s*:\\s*\\b)/,\n  SPACES_SPLIT:      /\\s+/,\n\n  KEYWORDS:          /.*(define|frets|fingers|add).*/g,\n\n  TRIM:              /^\\s*{\\s*|\\s*}\\s*$/g,\n\n  HAS_DEFINE_TAG:    /^\\s*{\\s*define\\s*:.*}\\s*$/,\n  /* eslint-enable key-spacing */\n});\n\nconst MUTED_CHAR = 'x';\n\n/** Pass in integer arrays, frets is list of frets, plus corresponding fingers array */\nexport function toDots(frets: (number | string)[], fingers: string[]): Dot[] {\n  const { tuning } = settings;\n\n  return tuning\n    .reduce((dots, ignoreMe, index) => {\n      const value = frets[index];\n      const fretNumber = typeof value === 'string' ? parseInt(value, 10) : value;\n      if (fretNumber > 0) {\n        const finger = (fingers.length - 1 >= index) ? parseInt(fingers[index], 10) : 0;\n        dots.push(new Dot(index, fretNumber, finger));\n      }\n      return dots;\n    }, [] as Dot[]);\n}\n\nfunction getAddIn(input: string): Dot {\n  const pairs = input.split(RegExes.ADD_SPLIT);\n  let key: string | null = null;\n  return pairs\n    .reduce((result, value) => {\n      value = value.trim();\n      if (!key && RegExes.ADD_SPLIT.test(value)) {\n        key = value.toLowerCase();\n      } else {\n        if (key && value) {\n          // @ts-ignore-next-line\n          result[key] = parseInt(value, 10) + (key === 'string' ? -1 : 0);\n        }\n        key = null;\n      }\n      return result;\n    }, {\n      string: null,\n      fret: null,\n      finger: null,\n    });\n}\n\nfunction getValues(input: string): (number|string)[] {\n  let split = input\n    .toLowerCase()\n    .split(RegExes.SPACES_SPLIT);\n\n  if (split[0].length === input.length && input.length === settings.getNumStrings()) {\n    split = input.split('');\n  }\n  return split.map((value) => (value === MUTED_CHAR ? MUTED_CHAR : parseInt(value, 10)));\n}\n\nexport function runLine(line: string): Chord | null {\n  if (!RegExes.HAS_DEFINE_TAG.test(`${line}`)) {\n    return null;\n  }\n  line = `${line || ''}`.replace(RegExes.TRIM, '');\n  const pairs = line.split(RegExes.KEYWORDS_SPLIT);\n\n  let key: string | null = null;\n\n  const chordArrays = pairs.reduce((result, value) => {\n    value = value.trim();\n\n    if (!key && RegExes.KEYWORDS.test(value)) {\n      key = value.replace(RegExes.KEYWORDS, '$1').toLowerCase();\n    } else {\n      if (key && value) {\n        switch (key) {\n          case 'add': {\n            const addIn = getAddIn(value);\n            if (addIn) {\n              // @ts-ignore-next-line\n              result.add.push(addIn);\n            }\n            break;\n          }\n          case 'define':\n            result.name = value;\n            break;\n          default:\n            // @ts-ignore-next-line\n            result[key] = getValues(value);\n            break;\n        }\n      }\n      key = null;\n    }\n\n    return result;\n  }, {\n    name: '',\n    frets: [],\n    fingers: [],\n    add: [],\n  });\n\n  if (!chordArrays.name) {\n    log(`bad \"define\" instruction: chord name not found: ${line}`);\n    return null;\n  }\n\n  return {\n    name: chordArrays.name,\n    dots: [\n      ...toDots(chordArrays.frets, chordArrays.fingers),\n      ...chordArrays.add.map(({ string, fret, finger }) => new Dot(string, fret, finger)),\n    ],\n    muted: chordArrays.frets.map((fret) => fret === MUTED_CHAR),\n  };\n}\n\nexport function runLines(lines: string[]): Chord[] {\n  return lines\n    .map((line) => runLine(line))\n    .filter(Boolean) as Chord[];\n}\n","import Dot from './Dot';\n\n/**\n * Chord info sutiable for plotting on Canvas; has name and dot positions\n */\nexport default class Chord {\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  /** string, i.e. 'C#6' */\n  name = '';\n\n  dots: Dot[] = [];\n\n  /** true means that string is not played (muted). i.e. chord.mute[2] means third string is muted. */\n  muted: boolean[] = [];\n}\n","/**\n * A single fretboard fingering \"dot\".\n *\n * Add-in fingerings. Frequently you'll add this to indicate\n * \"nutting\" or \"barring\" with one or more fingers.\n *\n * For example, the D7 is often played by laying the index finger across the entire\n * second fret and then placing middle finger on 3rd fret of \"A\" string like this:\n *\n * ```\n *  G C E A\n *  - - - -  (1st fret)\n *  X X X X\n *  - - - X\n *  - - - -  (4th fret)\n * ```\n *\n * The \"A\" string has two fingers on it, obviously one does nothing -- except to make the\n * chord much easier to play.\n */\nexport default class Dot {\n  constructor(string: number, fret: number, finger: number) {\n    this.string = string;\n    this.fret = fret;\n    this.finger = finger;\n  }\n\n  /**\n   * The ukulele's string, numbered from \"top\" (1) to \"bottom\" (4). Sporano uke strings would be ['G' => 1,'C' => 2,'E' => 3,'A' => 4]\n   * TODO: do \"add-ins\" use char or int?\n   */\n  string: number | null = null;\n\n  /**\n   * Fret position, i.e. 0-12\n   */\n  fret: number | null = null;\n\n  /**\n   * ex: 0-4 (where 1 = index finger and 4 = pinky)\n   */\n  finger: number | null = null;\n}\n","import { SongBlockArray } from '../interfaces/SongBlock';\nimport Chord from './Chord';\n\nexport default class Song {\n  title: string = '';\n\n  album: string = '';\n\n  artist: string = '';\n\n  /**\n   * \"Subtitle\", often Artist Info\n   */\n  st: string = '';\n\n  /**\n   * \"Subtitle #2\", subtitle2 (not used yet)\n   */\n  st2: string = '';\n\n  /**\n   * Song's Key ('A', 'C', etc)\n   */\n  key: string = '';\n\n  /**\n   * `true` if there is at least one chord in use, `false` otherwise.\n   * Useful for laying out tablature, which might have no chords.\n   */\n  hasChords: boolean = false;\n\n  ugsMeta: string[] = [];\n\n  chordDefs: Chord[] = [];\n\n  chordNames: string[] = [];\n\n  columnCount = 1;\n\n  songBlocks: SongBlockArray = [];\n}\n","/* eslint-disable prefer-destructuring */\n\nimport { BlockTypes, CpmInstructions } from './interfaces/BlockTypesEnum';\nimport { echo } from './debugWriter';\nimport { readTabs } from './tabs';\nimport { runLine } from './chordParser';\nimport {\n  BaseSongBlock, SongBlock, SongBlockArray, StringArray, TabBlock,\n} from './interfaces/SongBlock';\nimport getChordNames from './getChordNames';\nimport Song from './classes/Song';\n\nimport { clean, logger } from '../tools';\nimport definitions from '../tunings';\nimport { settings } from '../configs';\n\n/**\n * @todo add ukeGeeks Meta support:\n * /{(ukegeeks-meta|meta)\\s*:\\s*(.+?)}/i\n */\n\nconst RegExes = {\n  /* eslint-disable key-spacing */\n  BLOCKS:           /\\s*{\\s*(start_of_tabs?|sot|start_of_chorus|soc|end_of_tabs?|eot|end_of_chorus|eoc)\\s*}\\s*/im,\n  TAB_BLOCKS:       /\\s*{\\s*(start_of_tabs?|sot)\\s*}\\s*/im,\n  CHORUS_BLOCKS:    /\\s*{\\s*(start_of_chorus|soc)\\s*}\\s*/im,\n\n  /** HTML <pre></pre> */\n  PRE_TAG:          /<\\/?pre>/img,\n  /** HTML <!-- Comment --> */\n  HTML_COMMENT:     /<!--(.|\\n)*?-->/gm,\n\n  // #region used in `parseSimpleInstructions`\n  COLUMN_BREAK:     /\\s*{\\s*(column_break|colb|np|new_page)\\s*}\\s*/im,\n  // #endregion\n\n  // #region used in `markChordLines`\n  CHORD:            /\\[(.+?)]/i,\n  ALL_CHORDS:       /\\[(.+?)]/img,\n  // #endregion\n\n  // #region used in `parseInstructions`\n  INSTRUCTION:      /\\{[^}]+?:.*?\\}/im,\n  COMMAND_ARGS:     /\\{.+?:(.*)\\}/gi,\n  COMMAND_VERB:     /\\{(.+?)\\s*:.*\\}/gi,\n  // #endregion\n  /* eslint-enable key-spacing */\n};\n\n/**\n * Under development, bool indicating whether any chords were found within the lyrics.\n * Helpful for tablature-only arrangements.\n * @todo: do not rely on this!!!\n */\nlet hasChords = false; // TODO:\nlet columnCount = 1;\n\n/** Song's key. May be set via command tag {key: C} otherwise use the first chord found (if available) */\nlet firstChord = '';\n\n// type guards\nconst isSongBlock = (block: BaseSongBlock): block is SongBlock => block.type !== BlockTypes.TabBlock;\nconst isTabBlock = (block: BaseSongBlock): block is TabBlock => !isSongBlock(block);\n\nfunction parseSongBlocks(text: string): SongBlockArray {\n  text = stripHtml(text);\n  const songBlocks = textToSongBlocks(text);\n  parseInstructions(songBlocks);\n  parseSimpleInstructions(songBlocks);\n  markChordLines(songBlocks);\n  expandTabs(songBlocks);\n  if (settings.opts.debugVerbose) {\n    echo(songBlocks);\n  }\n  return songBlocks;\n}\n\n/**\n * Accepts raw CPM text block, returns a Song object containing whatever ChordPro elements it recognizes.\n */\nexport function parseCPM(text: string): Song {\n  const song = new Song();\n  // eslint-disable-next-line no-multi-assign\n  const songBlocks = song.songBlocks = parseSongBlocks(text);\n  song.hasChords = hasChords;\n  song.columnCount = columnCount;\n  let info;\n\n  info = getInfo(songBlocks, BlockTypes.Title);\n  if (info.length) {\n    song.title = info[0];\n  }\n  info = getInfo(songBlocks, BlockTypes.Artist);\n  if (info.length) {\n    song.artist = info[0];\n  }\n  info = getInfo(songBlocks, BlockTypes.Subtitle);\n  if (info.length) {\n    song.st = info[0];\n    if (info.length > 1) {\n      song.st2 = info[1];\n    }\n  }\n  info = getInfo(songBlocks, BlockTypes.Album);\n  if (info.length) {\n    song.album = info[0];\n  }\n  info = getInfo(songBlocks, BlockTypes.UkeGeeksMeta);\n  if (info.length) {\n    song.ugsMeta = info;\n  }\n  info = getInfo(songBlocks, BlockTypes.Key);\n  if (info.length) {\n    song.key = info[0];\n  } else if (firstChord !== '') {\n    song.key = firstChord;\n  }\n\n  info = getInfo(songBlocks, BlockTypes.ChordDefinition);\n  info.forEach((t) => {\n    const d = runLine(`{define: ${t}}`);\n    if (d) {\n      song.chordDefs.push(d);\n    }\n  });\n\n  definitions.replace(song.chordDefs);\n  song.chordNames = getChordNames(text);\n\n  if (settings.opts.debugVerbose) {\n    logger.json(song);\n  }\n  return song;\n}\n\nfunction getBlockType(line: string): BlockTypes {\n  // TODO: verify line's type in documentation\n  if (RegExes.CHORUS_BLOCKS.test(line)) {\n    return BlockTypes.ChorusBlock;\n  }\n  if (RegExes.TAB_BLOCKS.test(line)) {\n    return BlockTypes.TabBlock;\n  }\n  return BlockTypes.TextBlock;\n}\n\n/** Explodes passed in text block into an array of songNodes ready for further parsing. */\nfunction textToSongBlocks(text: string): SongBlockArray {\n  let hasBeenInitialized = false;\n  const songBlocks: SongBlockArray = [];\n  let block: SongBlock = {\n    type: BlockTypes.Comment,\n    lines: [],\n  };\n\n  text.split('\\n')\n    .filter((line) => line[0] !== '#')\n    .forEach((line) => {\n      const isBlockBoundary = RegExes.BLOCKS.test(line);\n      if (isBlockBoundary || !hasBeenInitialized) {\n        // save last block, start new one...\n        if (hasBeenInitialized) {\n          songBlocks.push(block);\n        }\n        hasBeenInitialized = true;\n        block = {\n          type: getBlockType(line),\n          lines: [],\n        };\n        if (!isBlockBoundary) {\n          // Don't miss that first line!\n          block.lines.push(line);\n        }\n      } else {\n        line = line.trim();\n        if (line) {\n          block.lines.push(line);\n        }\n      }\n    });\n\n  if (block.lines.length) {\n    songBlocks.push(block);\n  }\n\n  return songBlocks;\n}\n\n/**\n * Goes through songNodes, those nodes that are \"instructions\" are exploded and\n * a \"the resulting \"songDomElement\" built, this songDomElement then replaces the\n * original line.\n *\n * The regular expression look for instructions with this format:\n * {commandVerb: commandArguments}\n */\nfunction parseInstructions(songBlocks: SongBlockArray): void {\n  /* eslint-disable key-spacing */\n  const verbToBlockTypeHash: {\n    [key: string]: BlockTypes\n  } = {\n    [CpmInstructions.title]:            BlockTypes.Title,\n    [CpmInstructions.titleShort]:       BlockTypes.Title,\n    [CpmInstructions.artist]:           BlockTypes.Artist,\n    [CpmInstructions.subtitle]:         BlockTypes.Subtitle,\n    [CpmInstructions.subtitleShort]:    BlockTypes.Subtitle,\n    [CpmInstructions.album]:            BlockTypes.Album,\n    [CpmInstructions.comment]:          BlockTypes.Comment,\n    [CpmInstructions.commentShort]:     BlockTypes.Comment,\n    [CpmInstructions.key]:              BlockTypes.Key,\n    [CpmInstructions.keyShort]:         BlockTypes.Key,\n    [CpmInstructions.define]:           BlockTypes.ChordDefinition,\n    [CpmInstructions.ugsMeta]:          BlockTypes.UkeGeeksMeta,\n  };\n  /* eslint-enable key-spacing */\n\n  songBlocks\n    .filter(isSongBlock)\n    .forEach((block) => {\n      block.lines = block.lines.map((line) => {\n        if (typeof line !== 'string' || !RegExes.INSTRUCTION.test(line)) {\n          return line;\n        }\n\n        const args = line.replace(RegExes.COMMAND_ARGS, '$1');\n        const verb = line.replace(RegExes.COMMAND_VERB, '$1')\n          .toLowerCase()\n          .replace(/\\r/, ''); // IE7 bug\n\n        return {\n          type: verbToBlockTypeHash[verb] || `Undefined-${verb}`,\n          lines: [args.trim()],\n        };\n      });\n    });\n}\n\n/** A \"Simple Instruction\" is one that accepts no arguments. Presently this only handles Column Breaks. */\nfunction parseSimpleInstructions(songBlocks: SongBlockArray): void {\n  songBlocks\n    .filter(isSongBlock)\n    .forEach((block: SongBlock) => {\n      block.lines = block.lines.map((line) => {\n        if (typeof line !== 'string' || !RegExes.COLUMN_BREAK.test(line)) {\n          return line;\n        }\n\n        const verb = line.replace(RegExes.COLUMN_BREAK, '$1').toLowerCase();\n        switch (verb) {\n          case CpmInstructions.columnBreak:\n          case CpmInstructions.columnBreakShort:\n            columnCount++;\n            line = {\n              type: BlockTypes.ColumnBreak,\n              lines: [],\n            };\n            break;\n          case CpmInstructions.newPage:\n          case CpmInstructions.newPageShort:\n            line = {\n              type: BlockTypes.NewPage,\n              lines: [],\n            };\n            break;\n        }\n        return line;\n      });\n    });\n}\n\n/**\n * Runs through songNodes and if the line contains at least one chord it's type is et to\n * ChordText, otherwise it's marked as \"PlainText\", meaning straight lyrics\n */\nfunction markChordLines(songBlocks: SongBlockArray): void {\n  let chordFound;\n  let hasOnlyChords;\n\n  songBlocks\n    .filter((block) => block.type === BlockTypes.TextBlock || block.type === BlockTypes.ChorusBlock)\n    .filter(isSongBlock)\n    .forEach((block) => {\n      block.lines = block.lines.map((line) => {\n        if (typeof line !== 'string') {\n          return line;\n        }\n\n        chordFound = RegExes.CHORD.test(line);\n        hasChords = hasChords || chordFound;\n        hasOnlyChords = chordFound && (line.replace(RegExes.ALL_CHORDS, '').trim().length < 1);\n\n        if (chordFound && firstChord === '') {\n          const matches = line.match(RegExes.CHORD);\n          if (matches) {\n            firstChord = matches[1];\n          }\n        }\n\n        return {\n          // eslint-disable-next-line no-nested-ternary\n          type: (hasOnlyChords ? BlockTypes.ChordOnlyText : (chordFound ? BlockTypes.ChordText : BlockTypes.PlainText)),\n          lines: [line],\n        };\n      });\n    });\n}\n\nfunction expandTabs(songBlocks: SongBlockArray): void {\n  songBlocks\n    .filter(isTabBlock)\n    .forEach((block) => {\n      // @ts-ignore-next-line\n      const { lines } = block;\n      // @ts-ignore-next-line\n      Object.assign(clean(block), readTabs(lines as StringArray));\n    });\n}\n\n/** Searches the songNodes for the specified block type, returning all matching node line (text) values. */\nfunction getInfo(songBlocks: SongBlockArray, type: BlockTypes): string[] {\n  const rtn: string[] = [];\n\n  songBlocks\n    .filter((block) => block.type === type)\n    // @ts-ignore-next-line\n    .forEach((block) => rtn.push(block.lines[0]));\n\n  songBlocks\n    .filter((block) => block.type === BlockTypes.TextBlock)\n    .filter(isSongBlock)\n    .forEach((block) => {\n      block.lines\n        // @ts-ignore-next-line\n        .filter((line) => line.type === type)\n        // @ts-ignore-next-line\n        .forEach((line) => rtn.push(line.lines[0]));\n    });\n\n  return rtn;\n}\n\n/** Removes HTML \"pre\" tags and comments. */\nconst stripHtml = (text: string): string => text\n  .replace(RegExes.PRE_TAG, '')\n  .replace(RegExes.HTML_COMMENT, '');\n\nexport const __test__ = {\n  stripHtml,\n};\n","import { BlockTypes } from './interfaces/BlockTypesEnum';\nimport { BaseSongBlock, SongBlock, SongBlockArray, TabBlock } from './interfaces/SongBlock';\n\nimport { logger } from '../tools';\n\nconst getTypeName = (type: BlockTypes): string => Object\n  .keys(BlockTypes)\n  // @ts-ignore-next-line\n  .find((key) => BlockTypes[key] === type) || 'unknown';\n\nexport function echo(songBlocks: SongBlockArray): void {\n  songBlocks.forEach((block: BaseSongBlock, i: number) => {\n    const { type } = block;\n    const typeName = getTypeName(type);\n    if (block && type === BlockTypes.TabBlock) {\n      const { tabs } = block as TabBlock;\n      logger.log(`>> ${i}. ${type} node (\"${typeName}\"), ${tabs.length} lines`);\n      logger.json(tabs);\n      return;\n    }\n\n    const { lines } = block as SongBlock;\n    logger.log(`>> ${i}. ${type} node (\"${typeName}\"), ${lines.length} lines`);\n    lines.forEach((line) => {\n      if (typeof line === 'string') {\n        logger.log(line);\n        return;\n      }\n\n      if (!line.lines.length) {\n        logger.log({\n          type: line.type,\n          typeName: getTypeName(line.type),\n        });\n        return;\n      }\n\n      logger.log({\n        ...line,\n        typeName: getTypeName(line.type),\n      });\n    });\n  });\n}\n","import { logger } from '../tools';\n\nconst errs: string[] = [];\n\n/** Add an error. As one would with console.log(\"blah\"). */\nexport const log = (msg: string): number => errs.push(msg);\n\nexport const echo = () => errs.forEach((e, i) => logger.log(`${i}. ${e}`));\n","/**\n * Returns an array of all of the unique bracket chord names. So even if [D7] appears a\n * dozen times you'll only see it once in this list.\n * @param text CPM Text Block to be parsed\n */\nexport function getChordNames(text: string): string[] {\n  const chordRegEx = /\\[(.+?)]/img;\n  const matches = text.match(chordRegEx);\n  if (!matches) {\n    return [];\n  }\n\n  return matches\n    .reduce((acc: string[], name) => {\n      if (!acc.includes(name)) {\n        acc.push(name);\n      }\n      return acc;\n    }, [])\n    .map((name) => name.replace('[', '').replace(']', ''));\n}\n\nexport default getChordNames;\n","import Song from './classes/Song';\nimport Dot from './classes/Dot';\nimport Chord from './classes/Chord';\n\nexport { Chord, Dot, Song };\nexport * from './interfaces/SongBlock';\nexport { BlockTypes } from './interfaces/BlockTypesEnum';\nexport { parseCPM } from './cpmParser';\nexport { runLine } from './chordParser';\nexport { runBlock } from './metaParser';\n","/* eslint-disable no-multi-spaces, no-shadow */\n\n/**\n * Enumeration defining the types of nodes used within this class to parse CPM\n */\nexport enum BlockTypes {\n  // #region Multiline Nodes\n  TextBlock=            1, // temporary type, should be replaced with Chord Text or Plain Text\n  ChorusBlock=          2,\n  TabBlock=             3,\n  // #endregion\n\n  // #endregion Single Line \"Instruction\" Nodes\n  Comment=            101,\n  Title=              102,\n  Subtitle=           103,\n  Album=              104,\n  ChordDefinition=    105,\n  UkeGeeksMeta=       106,\n  ColumnBreak=        107, // Defining this as an instruction instead of a node since I'm not requiring a Begin/End syntax and it simplifies processing\n  Artist=             108,\n  NewPage=            109,\n  Key=                110,\n  // #endregion\n\n  // #region Text Types\n  ChordText=          201,\n  PlainText=          202,\n  ChordOnlyText=      203,\n  // #endregion\n\n  // Undefined\n  Undefined=          666,\n}\n\nexport enum CpmInstructions {\n  title =               'title',\n  titleShort =          't',\n  subtitle =            'subtitle',\n  subtitleShort =       'st',\n\n  album =               'album',\n  artist =              'artist',\n\n  comment =             'comment',\n  commentShort =        'c',\n\n  key =                 'key',\n  keyShort =            'k',\n  define =              'define',\n\n  columnBreak =         'column_break',\n  columnBreakShort =    'colb',\n  newPage =             'new_page',\n  newPageShort =        'np',\n  ugsMeta =             'ukegeeks-meta',\n\n  /*\n  startOfTab =          'start_of_tab',\n  startOfTabShort =     'sot',\n  endOfTab =            'end_of_tab',\n  endOfTabShort =       'eot',\n\n  startOfChorus =       'start_of_chorus',\n  startOfChorusShort =  'soc',\n  endOfChorus =         'end_of_chorus',\n  endOfChorusShort =    'eoc',\n  */\n}\n","/**\n * Converts text to JSON objects. Accepts either large text blocks or single lines of\n * text written in CPM syntax (looks for instrument, tuning, and define statements).\n */\n\nimport { settings } from '../configs';\nimport { pack } from '../tools';\nimport Instrument from '../tunings/classes/Instrument';\nimport { runLines } from './chordParser';\n\n/** All regular expressions used in this class. Note, Changed parsing from \"\\n\" to \"{\" which means \"define: ...\" cannot depend on that opening curly-brace! */\nconst RegExes = Object.freeze({\n  /* eslint-disable key-spacing */\n  INSTRUMENT:     /{\\s*instrument\\s*:\\s*(.*?)\\s*}/i,\n  TUNING:         /{\\s*tuning\\s*:\\s*([^}]+?)\\s*}/i,\n  /* eslint-enable key-spacing */\n});\n\nfunction getInstrument(text: string): string | null {\n  const matches = text.match(RegExes.INSTRUMENT);\n  return matches ? pack(matches[1]) : null;\n}\n\nfunction getTuning(text: string): string[] | null {\n  const matches = text.match(RegExes.TUNING);\n  if (!matches) {\n    return null;\n  }\n  return matches[1].split(/\\s+/);\n}\n\nfunction getKey(name: string, tuning: string[]): string {\n  let result = name.replace(' ', '-');\n  tuning.forEach((t) => {\n    result += `-${t}`;\n  });\n  return result.toLowerCase();\n}\n\n/**\n * @param text Multiline text block containing definition, instrument, and tuning statements.\n */\nexport function runBlock(text: string): Instrument {\n  // TODO: newlines get lost in strings, do I always rely on \"{\"?\n  let lines = text.split('\\n');\n  if (lines.length < 2) {\n    lines = text.split('{');\n  }\n\n  const name = getInstrument(text) || '';\n  const tuning = getTuning(text) || [];\n\n  // TODO: want to pass this dependency, not set -- unexpected sideeffect!!\n  settings.tuning = tuning;\n\n  const chords = runLines(lines);\n  return new Instrument(\n    getKey(name, tuning),\n    name,\n    tuning,\n    chords,\n  );\n}\n\nexport const __test__ = {\n  getTuning,\n};\n","/**\n * Tablature renderer -- reads tab data and draws canvas elements.\n * Creates \"packed\" versions of the tabs, including a \"key line\" that's comprised\n * only of '-' and '*' -- the asterisks denoting where a dot will eventually be placed.\n */\nimport { StringArray, ExpandedTabs, TabBlock } from './interfaces/SongBlock';\nimport { BlockTypes } from './interfaces/BlockTypesEnum';\n\nimport { getLastStringName, getNumStrings } from '../configs';\n\nconst RegExes = Object.freeze({\n  /* eslint-disable key-spacing */\n  INT:              /(\\d+)/g,\n\n  TWO_DIGITS:       /(\\d{2})/g,\n  ONE_DIGIT:        /(\\d)/g,\n\n  DOUBLE_DASH:      /--/g,\n  SINGLE_DASH:      / -/g,\n  TRAILING_DASH:    /-+$/g,\n  /* eslint-enable key-spacing */\n});\n\n/**\n * This is insanely long, insanely kludgy, but, insanely, it works. This will read break a block of text into\n * four lines (the ukulele strings), then find which frets are used by each. Then, the hard part, pack un-needed\n * dashes. Once it's done that a 2-dimentional array (strings X frets) is created and returned.\n * @param tabStrings Block of tablbabure to be parsed\n */\nexport function readTabs(tabStrings: StringArray): TabBlock {\n  const hasLabels = tabStrings[getNumStrings() - 1][0] === getLastStringName();\n  if (hasLabels) {\n    stripStringLabels(tabStrings);\n  }\n  const frets = getFretNumbers(tabStrings);\n  const symbols = getSymbols(tabStrings);\n  const minLength = getMinLineLength(tabStrings);\n  const guide = getGuideLine(symbols, minLength);\n\n  return {\n    type: BlockTypes.TabBlock,\n    tabs: getPackedLines(frets, symbols, guide, minLength),\n    hasLabels,\n  };\n}\n\n/**\n * Processes tabStrings stripping the first character from each line\n */\nfunction stripStringLabels(tabStrings: StringArray): void {\n  tabStrings\n    .forEach((string, i) => {\n      tabStrings[i] = string.substr(1);\n    });\n}\n\n/**\n * Finds the frets in use for each line. In other words, ignoring\n * spacers (\"-\" or \"|\") this returns arrays of numbers, the frets\n * in use, for each line.\n */\nfunction getFretNumbers(tabStrings: StringArray): StringArray[] {\n  const frets = [];\n  for (let i = 0; i < getNumStrings(); i++) {\n    frets[i] = tabStrings[i].match(RegExes.INT) || [];\n  }\n  return frets;\n}\n\n/**\n * Returns array of the strings with placeholders instead of the numbers.\n * This helps us pack because \"12\" and \"7\" now occupy the same space horizontally.\n */\nfunction getSymbols(tabStrings: StringArray): StringArray {\n  return tabStrings\n    .slice(0, getNumStrings())\n    .reduce((symbols: StringArray, sym) => {\n      symbols.push(sym\n        .replace(RegExes.TWO_DIGITS, '-*')\n        .replace(RegExes.ONE_DIGIT, '*'));\n      return symbols;\n    }, []);\n}\n\n/**\n * Run through all of the strings (array) and return the length of the shortest one.\n * would prefer the max length, but then I'd need to pad the shorter ones and ... well, it's complicated.\n * this gets a TODO: get max!\n */\nfunction getMinLineLength(tabStrings: StringArray): number {\n  return tabStrings\n    .slice(0, getNumStrings())\n    .reduce((minLength, line) => {\n      line = line.trim().replace(RegExes.TRAILING_DASH, '');\n      if (line.length > minLength) {\n        minLength = line.length;\n      }\n      return minLength;\n    }, 0);\n}\n\n/**\n * OK, having created symbolic representations for the lines in earlier steps\n * here we go through and \"merge\" them into a single, master \"guide\" -- saying\n * \"somewhere on this beat you'll pluck (or not) one note\". This normalized\n * guide will be the master for the next step.\n */\nfunction getGuideLine(symbols: StringArray, minLength: number): string {\n  // Build a master pattern \"guide\" and eliminate double dashes\n  let guide = '';\n  for (let i = 0; i < minLength; i++) {\n    if (symbols[0][i] === '|') {\n      guide += '|';\n    } else {\n      guide += symbols.some((sym) => sym[i] === '*') ? '*' : '-';\n    }\n  }\n\n  guide = guide.replace(RegExes.DOUBLE_DASH, '- ');\n  let lastGuide = guide;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    guide = guide.replace(RegExes.SINGLE_DASH, '  ');\n    if (guide === lastGuide) {\n      break;\n    }\n    lastGuide = guide;\n  }\n  return guide;\n}\n\n/**\n * Using the packed \"guide\" line we loop over the strings, rebuilding each string\n * with either a space, measure marker, or the note -- as an integer! Now the frets\n * are the same regardless of whether they are single or double digit numbers:\n * a \"12\" occupies no more horizontal space than a \"5\".\n */\nfunction getPackedLines(frets: StringArray[], symbols: StringArray, guide: string, minLength: number): ExpandedTabs {\n  const packed = Array(getNumStrings()).fill('*').map((): string[] => []);\n  packed\n    .forEach((string, stringIdx) => {\n      // index to single line within packed array (along a string)\n      let lineIdx = 0;\n\n      // fret marker counter\n      let fretCount = 0;\n\n      guide\n        .split('')\n        .slice(0, minLength)\n        .forEach((char, guideIdx) => {\n          if (char === ' ') {\n            return;\n          }\n          // a temp variable to hold the 'note'\n          let chrNote = '';\n          if (symbols[stringIdx][guideIdx] === '*') {\n            chrNote = frets[stringIdx][fretCount];\n            fretCount++;\n          } else {\n            chrNote = char === '|' ? '|' : '-';\n          }\n          packed[stringIdx][lineIdx] = chrNote;\n          lineIdx++;\n        });\n    });\n\n  return packed;\n}\n\nexport const __test__ = {\n  getFretNumbers,\n  getGuideLine,\n  getMinLineLength,\n  getPackedLines,\n  getSymbols,\n  stripStringLabels,\n};\n","/* eslint-disable key-spacing */\nexport const ChordsStyles = {\n  INLINE_SPACER:   'ugsInlineSpacer',\n};\n\nexport const PageStyles = Object.freeze({\n  INLINE_DIAGRAMS: 'ugsInlineDiagrams',\n  NO_CHORDS:       'ugsNoChords',\n});\n\nexport const RefDiagramsStyles = Object.freeze({\n  IGNORED_CHORDS:  'ugsIgnoredChords',\n});\n\n/** All of the CSS classnames used by UkeGeeks JavaScript */\nexport const SongStyles = Object.freeze({\n  Title:           'ugsTitle',\n  Subtitle:        'ugsSubtitle',\n  Album:           'ugsAlbum',\n  Artist:          'ugsArtist',\n  UgsMeta:         'ugsUgsMeta',\n  Comment:         'ugsComment',\n  Tabs:            'ugsTabs',\n  Chorus:          'ugsChorus',\n  /** preformatted with chords */\n  PreChords:       'ugsChords',\n  /** preformated, no chords */\n  PrePlain:        'ugsPlain',\n  /** preformated, chords ONLY -- no lyrics (text) between 'em */\n  NoLyrics:        'ugsNoLyrics',\n  ColumnWrap:      'ugsWrap',\n  ColumnCount:     'ugsColumnCount',\n  Column:          'ugsColumn',\n  NewPage:         'ugsNewPage',\n});\n\nexport const SvgChordStyles = {\n  CHORD_IMG: 'ugs-diagrams--chord-img',\n};\n","import { settings } from '../configs';\n\nimport { ChordsStyles as Styles } from './Styles';\n\n/**\n * This does all of the work -- it's a Wrapper method that calls all of this classes other\n * (private) methods in correct order.\n * Returns the HTML block with wrapped chords: &lt;code&gt;&lt;strong&gt;&lt;em&gt;\n */\nexport function markupChords(chordNames: string[], text: string): string {\n  text = encloseChords(chordNames, text);\n  text = packChords(text);\n  return text;\n}\n\n/**\n * Returns the input string having replaced all of the \"bracketed chord names\" (i.e. [D7]) with HTML\n * marked-up version (i.e. &lt;code&gt;&lt;strong&gt;[&lt;em&gt;D7&lt;/em&gt;]&lt;/strong&gt;&lt;/code&gt;)\n */\nfunction encloseChords(chordNames: string[], text: string): string {\n  const { retainBrackets } = settings.opts;\n  const openBracket = retainBrackets ? '[' : ' ';\n  const closeBracket = retainBrackets ? ']' : ' ';\n  // eslint-disable-next-line no-restricted-syntax, guard-for-in\n  for (const i in chordNames) {\n    do { /* empty */ }\n    while (text.length !== (\n      // eslint-disable-next-line no-cond-assign\n      text = text.replace(`[${chordNames[i]}]`, `<code data-chordName=\"${chordNames[i]}\"><strong>${openBracket}<em>${chordNames[i]}</em>${closeBracket}</strong></code>`)\n    ).length);\n  }\n  return text;\n  /*\n  // need to handle chords such as: [A7+5]\n  var escapeRegEx = new RegExp('([+])','g');\n  for (var j = 0; j < this.chords.length; j++){\n    var s = this.chords[j].replace(escapeRegEx, '\\\\\\$1')\n    var re = new RegExp('[[]' + s + ']', 'img');\n    text = text.replace(re, '<code data-chordName=\"' + this.chords[j] + '\"><strong>[<em>' + this.chords[j] + '</em>]</strong></code>');\n  }\n  */\n}\n\n/**\n * Looks for consecutive chords and strips the whitespace between them -- thus \"packing\" the\n * chords against each other with only a single space separating them.\n */\nfunction packChords(text: string): string {\n  if (settings.inlineDiagrams) {\n    /* TODO: problem with packing */\n    const regEx = /(<\\/strong><\\/code>)[ \\t]*(<code data-chordName=\"[^\"]*\"><strong>)/ig;\n    return text.replace(regEx, `$1<span class=\"${Styles.INLINE_SPACER}\">&nbsp;</span>$2`);\n  }\n\n  const regEx = /<\\/strong><\\/code>[ \\t]*<code data-chordName=\"[^\"]*\"><strong>/ig;\n  return text.replace(regEx, ' ');\n}\n","/**\n * DOM Elements, the \"buckets\" into which generated HTML markup will be placed\n */\nexport default class HTMLHandles {\n  constructor(wrap: HTMLElement, diagrams: HTMLElement, text: HTMLElement, meta?: HTMLElement | null) {\n    this.wrap = wrap;\n    this.diagrams = diagrams;\n    this.text = text;\n    if (meta) {\n      this.meta = meta;\n    }\n  }\n\n  meta?: HTMLElement;\n\n  wrap: HTMLElement;\n\n  diagrams: HTMLElement;\n\n  text: HTMLElement;\n}\n","import HTMLHandles from './classes/HTMLHandles';\n\nimport { settings } from '../configs';\n\nexport function getHandlesFromClass(wrap: HTMLElement): HTMLHandles | null {\n  const diagrams = wrap.querySelectorAll(settings.wrapClasses.diagrams);\n  const text = wrap.querySelectorAll(settings.wrapClasses.text);\n  const songMeta = wrap.querySelectorAll(settings.wrapClasses.songMeta);\n\n  if (!diagrams.length || !text.length) {\n    return null;\n  }\n\n  return new HTMLHandles(\n    wrap,\n    diagrams[0] as HTMLElement,\n    text[0] as HTMLElement,\n    (songMeta.length && songMeta[0] as HTMLElement) || null,\n  );\n}\n\nexport function getHandlesFromId(): HTMLHandles | null {\n  const { ids } = settings;\n  const wrap = document.getElementById(ids.container);\n  const diagrams = document.getElementById(ids.canvas);\n  const text = document.getElementById(ids.songText);\n  const meta = document.getElementById(ids.songMeta);\n\n  return wrap && diagrams && text\n    ? new HTMLHandles(wrap, diagrams, text, meta)\n    : null;\n}\n","import HTMLHandles from './classes/HTMLHandles';\n\nexport { HTMLHandles };\n\nexport { getHandlesFromClass, getHandlesFromId } from './handles';\nexport { getUnknownChordErrors, processSong } from './page';\nexport { plot } from './svgPlot';\n\n// for legacy\nexport { Fix } from './overlapFixer';\n","/**\n * Correct overlapping chord names/diagrams in songs rendered by UGS\n */\n\ninterface Box {\n  top: number,\n  left: number,\n  right: number,\n  width: number,\n}\n\n/**\n * returns `true` if Box A overlaps Box B. Detailed horizontal check, we \"cheat\" the\n * vertical check by assuming that tops must be equal to collide (a simplification\n * over a full height check.)\n */\nfunction checkOverlap(a: Box, b: Box): boolean {\n  // \"cheat\" vertical check\n  if (a.top !== b.top) {\n    return false;\n  }\n\n  if ((b.left > a.right) || (b.right < a.left)) {\n    // overlap not possible\n    return false;\n  }\n  if ((b.left > a.left) && (b.left < a.right)) {\n    return true;\n  }\n  if ((b.right > a.left) && (b.right < a.right)) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * returns object with width and left & right offsets `element` to be measured\n */\nfunction getBox(ele: HTMLElement): Box {\n  const box = getOffsets(ele);\n  box.width = getWidth(ele);\n\n  // due to how CSS & HTML is defined it's possible that the <em> wrapping the\n  // chord name is actually wider than the <strong>, let's check.\n  // BTW: this will happen on the \"mini-chord diagram\" option\n  const em = ele.getElementsByTagName('em')[0];\n  if (em) {\n    const emWidth = getWidth(em);\n    if (emWidth > box.width) {\n      // console.log('box strong.width: ' + box.width + 'px, em.width: ' + emWidth +'px');\n      box.width = emWidth + 2;\n    }\n  }\n\n  box.right = box.left + box.width;\n  return box;\n}\n\n/**\n * source: http://www.cjboco.com/blog.cfm/post/determining-an-elements-width-and-height-using-javascript/\n */\nfunction getWidth(ele: HTMLElement): number {\n  if ('clip' in ele) {\n    // @ts-ignore-next-line\n    return ele.clip.width;\n  }\n\n  return 'pixelWidth' in ele.style ? ele.style.pixelWidth as number : ele.offsetWidth;\n}\n\n/**\n * Returns JSON with left, right, top, and width properties. ONLY left and top are calculate,\n * width & right need to be added later.\n * source: http://stackoverflow.com/questions/442404/dynamically-retrieve-the-position-x-y-of-an-html-element\n * @return {JSON}\n */\nfunction getOffsets(ele: HTMLElement): Box {\n  const box = {\n    top: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n  };\n\n  // eslint-disable-next-line no-restricted-globals\n  while (ele && !isNaN(ele.offsetLeft) && !isNaN(ele.offsetTop)) {\n    box.left += ele.offsetLeft - ele.scrollLeft;\n    box.top += ele.offsetTop - ele.scrollTop;\n    // @ts-ignore-next-line\n    ele = ele.offsetParent;\n  }\n\n  return box;\n}\n\n/**\n * checks (and fixes if problem is presetn) two code tags\n */\nfunction checkChords(codeA: HTMLElement, codeB: HTMLElement): void {\n  const strongA = codeA.getElementsByTagName('strong')[0];\n  const strongB = codeB.getElementsByTagName('strong')[0];\n\n  if (!strongA || !strongB) {\n    return;\n  }\n\n  const boxA = getBox(strongA);\n  const boxB = getBox(strongB);\n\n  if (checkOverlap(boxA, boxB)) {\n    const width = boxA.right - boxB.left + 1;\n    codeA.style.paddingRight = `${width < 1 ? 1 : width}px`;\n  }\n}\n\n/**\n * Runs through the element looking for UkeGeek chords (based on HTML) and\n * adjust the horizontal spacing if any of the chords overlap.\n * @param element containing the UGS HTML song\n */\nexport function Fix(ele: HTMLElement): void {\n  const elements = Array.from(ele.querySelectorAll('code'));\n  elements\n    .forEach((e) => { e.style.paddingRight = '0px'; });\n  elements\n    .slice(0, -1)\n    .forEach((e, i) => checkChords(e, elements[i + 1]));\n}\n","import { settings } from '../configs';\nimport { BlockTypes, Song, parseCPM } from '../cpmImporter';\n\nimport { getErrors, init, show, showInline } from './referenceDiagrams';\nimport HTMLHandles from './classes/HTMLHandles';\nimport { Fix } from './overlapFixer';\nimport { songToHTML } from './song';\nimport { PageStyles as Styles } from './Styles';\n\nlet errList: string[] = [];\n\n/**\n * read Music, find chords, generate HTML version of song\n */\nexport function processSong(handles: HTMLHandles | null): Song | null {\n  const { meta, text, wrap } = handles || {};\n  if (!handles?.diagrams || !text || !wrap) {\n    return null;\n  }\n\n  const metaBlockTypes = [\n    BlockTypes.Title,\n    BlockTypes.Subtitle,\n    BlockTypes.Album,\n    BlockTypes.Artist,\n    BlockTypes.UkeGeeksMeta,\n  ];\n\n  const song = parseCPM(text.innerHTML);\n  text.innerHTML = songToHTML(song, { exclude: metaBlockTypes });\n  if (meta) {\n    meta.innerHTML = songToHTML(song, {\n      include: metaBlockTypes,\n      blocksOnly: true,\n    });\n  }\n\n  init(handles);\n  show(song.chordNames);\n  // Show chord diagrams inline with lyrics\n  if (settings.inlineDiagrams) {\n    wrap.classList.add(Styles.INLINE_DIAGRAMS);\n    showInline(song.chordNames);\n  }\n\n  // error reporting:\n  errList = errList.concat(getErrors());\n\n  if (wrap) {\n    wrap.classList.toggle(Styles.NO_CHORDS, !song.hasChords);\n  }\n\n  if (settings.opts.autoFixOverlaps) {\n    Fix(text);\n  }\n\n  // done!\n  return song;\n}\n\nexport const getUnknownChordErrors = () => errList;\n","/**\n * Draws large chord diagram grid (aka \"reference\" diagrams)\n */\nimport HTMLHandles from './classes/HTMLHandles';\nimport { RefDiagramsStyles as Styles } from './Styles';\n\nimport { get } from '../tunings';\nimport { settings } from '../configs';\nimport { plot } from './svgPlot';\n\nconst RegExes = {\n  /** Ignore \"tacet\" or \"no chord\" chords */\n  TACET: /^(n.?\\/?c.?|tacet)$/i,\n};\n\n/**\n * keep an array of missing chords\n */\nlet errors: string[] = [];\n\nlet handles: HTMLHandles;\n\n/**\n * If ignoreCommonChords option is true then this will contain list of\n * matched chords: ones defined in the ignore list that were also found in the song\n */\nlet ignoreMatchList: string[] = [];\n\n/**\n * Again this is a constructor replacement\n */\nexport function init(htmlHandles: HTMLHandles): void {\n  handles = htmlHandles;\n}\n\n/**\n * Checks whether speicified chord (name) is on the ignore list. return `true` if \"chord\" is on ignore list.\n */\nconst ignoreChord = (chordName: string): boolean => settings.commonChords.includes(chordName);\n\n/**\n * Plots the passed in chords inside passed DOM element.\n */\nexport function show(chordNames: string[]): void {\n  handles.diagrams.innerHTML = '';\n  errors = [];\n  ignoreMatchList = [];\n\n  if (settings.opts.sortAlphabetical) {\n    chordNames.sort();\n  }\n\n  chordNames.forEach((name) => {\n    if (RegExes.TACET.test(name)) {\n      return;\n    }\n\n    if (settings.opts.ignoreCommonChords && ignoreChord(name)) {\n      if ((typeof Array.prototype.indexOf === 'function') && (ignoreMatchList.indexOf(name) === -1)) {\n        ignoreMatchList.push(name);\n      }\n      return;\n    }\n\n    const chord = get(name);\n    if (!chord) {\n      errors.push(name);\n      return;\n    }\n\n    plot(handles.diagrams, chord, settings.fretBox, settings.fonts, settings.colors);\n  });\n\n  if (ignoreMatchList.length > 0) {\n    const para = Object.assign(document.createElement('p'), {\n      className: Styles.IGNORED_CHORDS,\n      innerHTML: `Also uses: ${ignoreMatchList.sort().join(', ')}`,\n    });\n    handles.diagrams.appendChild(para);\n  }\n}\n\n/**\n * Plots chords \"inline\" with the lyrics. Searches for `<code data-chordName=\"Am7\"></code>;`.\n * When found adds canvas element and draws chord named in data-chordName attribute\n */\nexport function showInline(chordNames: string[]): void {\n  const elements = handles.text.querySelectorAll('code');\n  if (elements.length < 1) {\n    return;\n  }\n\n  chordNames.forEach((chordName) => {\n    const chord = get(chordName);\n    if (!chord) {\n      /* TODO: error reporting if not found */\n      // _errors.push(chords[i]);\n      return;\n    }\n\n    elements.forEach((ele) => {\n      if (ele.getAttribute('data-chordName') === chord.name) {\n        plot(ele, chord, settings.inlineFretBox, settings.inlineFretBox.fonts, settings.colors);\n      }\n    });\n  });\n}\n\nexport const getErrors = (): string[] => errors;\n\n/**\n * List of chords excluded from the master chord diagrams\n */\nexport const getIgnoredChords = (): string[] => ignoreMatchList;\n","import { markupChords } from './chords';\nimport { SongStyles as Styles } from './Styles';\n\nimport {\n  BaseSongBlock,\n  BlockTypes, Song, SongBlock, SongBlockArray, TabBlock,\n} from '../cpmImporter';\nimport { generateTabSvg } from '../imageRenderer';\n\ninterface SongBlockOptions {\n  include?: BlockTypes[]\n  exclude?: BlockTypes[]\n  /** if `true` bypass Column Wrap & Chord HTML */\n  blocksOnly?: boolean\n}\n\n// TS type guards\nconst isSongBlock = (block: BaseSongBlock): block is SongBlock => block.type !== BlockTypes.TabBlock;\nconst isTabBlock = (block: BaseSongBlock): block is TabBlock => !isSongBlock(block);\n\nfunction songBlocksToHTML(songBlocks: SongBlockArray, options?: SongBlockOptions): string {\n  let nextType;\n\n  return songBlocks\n    .filter(({ type }) => {\n      if (!options || type === BlockTypes.TextBlock) {\n        return true;\n      }\n      if (Array.isArray(options.include)) {\n        return options.include.includes(type);\n      }\n      if (Array.isArray(options.exclude)) {\n        return !options.exclude.includes(type);\n      }\n      return true;\n    })\n    .reduce((html: string, block: BaseSongBlock, i: number) => {\n      if (isTabBlock(block)) {\n        html += `<pre class=\"${Styles.Tabs}\">`;\n        html += generateTabSvg(block);\n        html += '</pre>\\n';\n        return html;\n      }\n      if (!isSongBlock(block)) {\n        return html;\n      }\n\n      const { type, lines } = block;\n      const firstLine = (typeof lines[0] === 'string' && lines[0]) || '';\n      switch (type) {\n        case BlockTypes.Title:\n          html += `<h1 class=\"${Styles.Title}\">${firstLine}</h1>\\n`;\n          break;\n        case BlockTypes.Subtitle:\n          html += `<h2 class=\"${Styles.Subtitle}\">${firstLine}</h2>\\n`;\n          break;\n        case BlockTypes.Album:\n          html += `<h3 class=\"${Styles.Album}\">${firstLine}</h3>\\n`;\n          break;\n        case BlockTypes.Artist:\n          html += `<h3 class=\"${Styles.Artist}\">${firstLine}</h3>\\n`;\n          break;\n        case BlockTypes.UkeGeeksMeta:\n          html += `<h3 class=\"${Styles.UgsMeta}\">${firstLine}</h3>\\n`;\n          break;\n        case BlockTypes.Comment:\n          html += `<h6 class=\"${Styles.Comment}\">${firstLine}</h6>\\n`;\n          break;\n        case BlockTypes.NewPage:\n          html += `<hr class=\"${Styles.NewPage}\" />\\n`;\n          break;\n        case BlockTypes.ChordText:\n        case BlockTypes.PlainText:\n        case BlockTypes.ChordOnlyText: {\n          // TODO: beware undefined's!!!\n          // Repack the text, only open/close <pre> tags when type changes\n          // problem: exacerbates WebKit browsers' first chord position bug.\n          if (!firstLine) {\n          // prevent empty blocks (usually caused by comments mixed in header tags)\n            return html;\n          }\n          let preClasses = (type === BlockTypes.PlainText) ? Styles.PrePlain : Styles.PreChords;\n          if (type === BlockTypes.ChordOnlyText) {\n            preClasses += ` ${Styles.NoLyrics}`;\n          }\n          const currentType = type;\n          const lastType = ((i - 1) >= 0) ? songBlocks[i - 1].type : BlockTypes.Undefined;\n          nextType = ((i + 1) < songBlocks.length) ? nextType = songBlocks[i + 1].type : BlockTypes.Undefined;\n          html += lastType !== currentType ? `<pre class=\"${preClasses}\">` : '\\n';\n          html += firstLine;\n          html += nextType !== currentType ? '</pre>\\n' : '';\n        }\n          break;\n        case BlockTypes.ChorusBlock:\n          html += `<div class=\"${Styles.Chorus}\">\\n`;\n          html += songBlocksToHTML(lines as SongBlockArray, options);\n          html += '</div>\\n';\n          break;\n        case BlockTypes.TextBlock:\n          html += songBlocksToHTML(lines as SongBlockArray, options);\n          break;\n        case BlockTypes.ColumnBreak:\n          html += `</div><div class=\"${Styles.Column}\">`;\n          break;\n      }\n\n      return html;\n    }, '');\n}\n\n/** Convert passed in song to HTML (text) block */\nexport function songToHTML(song: Song, options?: SongBlockOptions) {\n  const { songBlocks: tempSongBlocks } = song;\n  let html = songBlocksToHTML(tempSongBlocks, options);\n  if (options?.blocksOnly) {\n    return html;\n  }\n  if (song.columnCount > 1) {\n    html = ''\n      + `<div class=\"${Styles.ColumnWrap} ${Styles.ColumnCount}${song.columnCount}\">`\n      + `<div class=\"${Styles.Column}\">${html}</div>`\n      + '</div>';\n  }\n\n  return markupChords(song.chordNames, html);\n}\n","import { Chord } from '../cpmImporter';\nimport { FretBox, ImageBuilder, generateChordSvg, toSVGString } from '../imageRenderer';\nimport { StringDict } from '../tools';\nimport { SvgChordStyles } from './Styles';\n\nfunction appendChild(element: HTMLElement, image: ImageBuilder, className: string): HTMLElement {\n  const wrapper = document.createElement('span');\n  if (className) {\n    wrapper.classList.add(className);\n  }\n  wrapper.innerHTML = toSVGString(image.getData());\n  element.appendChild(wrapper);\n  return wrapper;\n}\n\nexport function plot(chordBox: HTMLElement, chord: Chord, fretBox: FretBox, fontSettings: StringDict, colorSettings: StringDict): void {\n  const img = generateChordSvg(chord, fretBox, fontSettings, colorSettings);\n  if (!img) {\n    return;\n  }\n  appendChild(chordBox, img, SvgChordStyles.CHORD_IMG);\n}\n","import { Position } from './interfaces/SVGImage';\nimport FretBox from './interfaces/FretBox';\nimport ImageBuilder from './classes/ImageBuilder';\n\nimport { StringDict, integer } from '../tools';\nimport { Chord, Dot } from '../cpmImporter';\nimport { settings } from '../configs';\n\nexport function generateChordSvg(chord: Chord, fretBox: FretBox, fontSettings: StringDict, colorSettings: StringDict): ImageBuilder | null {\n  if (!fontSettings) {\n    fontSettings = settings.fonts;\n  }\n  if (!colorSettings) {\n    colorSettings = settings.colors;\n  }\n\n  const { numFrets = 5 } = settings;\n  const { dotRadius } = fretBox;\n\n  // starting top-left position for chord diagram\n  const pos = {\n    x: fretBox.topLeftPos.x,\n    y: fretBox.topLeftPos.y,\n  };\n\n  const img = newFretboard(pos, fretBox, settings.getNumStrings(), numFrets, colorSettings.fretLines);\n\n  // find where the circle centers should be:\n  const centers = {\n    x: pos.x,\n    y: pos.y + dotRadius,\n  };\n\n  // find the vertical shift by dividing the freespace between top and bottom (freespace is the row height less circle diameter)\n  const fudgeY = (fretBox.fretSpace - 2 * dotRadius) / 2;\n  const fretRange = getFretRange(chord.dots);\n  const firstFret = fretRange.last <= numFrets ? 1 : fretRange.last - (numFrets - 1);\n\n  if (Array.isArray(chord.dots)) {\n    // now add Dots (with finger numbers, if present)\n    chord.dots.forEach((dot) => {\n      const stringNbr = dot.string || 0;\n\n      const dotPos = {\n        x: (centers.x + stringNbr * fretBox.stringSpace),\n        y: (fudgeY + centers.y + ((dot.fret ? dot.fret : 0) - firstFret) * fretBox.fretSpace),\n      };\n\n      img.circle(dotPos.x, dotPos.y, dotRadius).setStyle({\n        fillColor: colorSettings.dots,\n      });\n\n      // check that the dot's radius isn't stupidly small\n      if (dot.finger && dot.finger > 0 && fretBox.showText && dotRadius > 4) {\n        img.text(dotPos.x, dotPos.y + 5, dot.finger.toString()).setStyle({\n          fillColor: colorSettings.dotText,\n          fontFamily: fontSettings.dot,\n        });\n      }\n    });\n  }\n\n  // If the chord is above the normal first 5 frets we need to add labels for the first and last frets\n  if (firstFret !== 1) {\n    // Label the starting and ending frets (0-12). It's assumed that the fretboard covers frets 1-5 (or `numFrets`).\n    // If instead the top fret is 6, say, well, this is the method called to add that \"6\".\n    // The Y position calculation is a bit klunky. How big of a fret range is present in the chord?\n    const txtPos = {\n      x: 0,\n      y: pos.y + fretBox.fretSpace * (0.96 * (numFrets - (fretRange.last - fretRange.first))),\n      // Old Y caculcation: pos.y + (0.8 * fretBox.fretSpace)\n    };\n    img.text(txtPos.x, txtPos.y, fretRange.first.toString()).setStyle({\n      fontFamily: fontSettings.fret,\n      fillColor: colorSettings.fretText,\n      textAlign: 'left',\n    });\n\n    // no point in double plotting a fret (i.e. barred 8th fret) so only add second label if\n    // first and last frets are different. Also, it's odd to see both 8 & 9, so only show if there's\n    // at least one fret between first and last (i.e. 8 & 10)\n    if ((fretRange.last - fretRange.first) > 1) {\n      txtPos.y = pos.y + (4.8 * fretBox.fretSpace);\n      img.text(txtPos.x, txtPos.y, fretRange.last.toString()).setStyle({\n        fontFamily: fontSettings.fret,\n        fillColor: colorSettings.fretText,\n        textAlign: 'left',\n      });\n    }\n  }\n\n  // TODO: top offset\n  if (fretBox.showText) {\n    img.text((pos.x + 1.5 * fretBox.stringSpace), (pos.y - 5), chord.name).setStyle({\n      fontFamily: fontSettings.text,\n      fillColor: colorSettings.text,\n    });\n  }\n\n  mutedStrings(img, fretBox, chord.muted, colorSettings.xStroke);\n  return img;\n}\n\n/** When requested diminsions won't accomodate other settings force adjustments. Allow for padding for text above and on sides. */\nfunction adjustDimensions(width: number, height: number, numStrings: integer, numFrets: integer, fretSpace: integer, stringSpace: integer): {\n    width: number,\n    height: number,\n  } {\n  const requiredWidth = (numStrings + 0.9) * stringSpace;\n  const requiredHeight = (numFrets + 1.3) * fretSpace;\n\n  return {\n    width: requiredWidth < width ? width : requiredWidth,\n    height: requiredHeight < height ? height : requiredHeight,\n  };\n}\n\nfunction newFretboard(\n  { x: topX, y: topY }: Position,\n  { width, height, lineWidth, fretSpace, stringSpace }: FretBox,\n  numStrings: integer,\n  numFrets: integer,\n  fretColor: string = '#000',\n): ImageBuilder {\n  // width offset, a \"subpixel\" adjustment\n  const offset = lineWidth / 2;\n  const stringLinesHeight = numFrets * fretSpace;\n  const fretLinesWidth = (numStrings - 1) * stringSpace;\n\n  const newDims = adjustDimensions(width, height, numStrings, numFrets, fretSpace, stringSpace);\n\n  const fretboard = new ImageBuilder()\n    .newImage(newDims.width, newDims.height)\n    .newGroup('fretboard')\n    .setStyle({\n      fillColor: 'none',\n      strokeColor: fretColor,\n      strokeWidth: lineWidth.toString(),\n    });\n\n  // add middle strings\n  for (let i = 1; i < numStrings - 1; i++) {\n    const lineX = topX + i * stringSpace + offset;\n    fretboard.vLine(lineX, topY + offset, stringLinesHeight);\n  }\n  // add frets\n  for (let i = 1; i < numFrets; i++) {\n    const lineX = topY + i * fretSpace + offset;\n    fretboard.hLine(topX + offset, lineX, fretLinesWidth);\n  }\n\n  // The border/rectangle takes care of first & last strings & frets\n  return fretboard\n    .rectangle(topX + offset, topY + offset, fretLinesWidth, stringLinesHeight)\n    .endGroup();\n}\n\n/** TODO: Loop over the muted array, dropping X's whenever a string position is `true` */\nfunction mutedStrings(img: ImageBuilder, fretBox: FretBox, muted: boolean[] | null, strokeColor: string): void {\n  const { lineWidth, topLeftPos } = fretBox;\n\n  const x = topLeftPos.x + lineWidth / 2;\n  const y = topLeftPos.y + lineWidth / 4;\n\n  muted?.forEach((isMuted, i: number) => {\n    if (isMuted) {\n      drawX(img, {\n        x: x + i * fretBox.stringSpace,\n        y,\n      }, fretBox, strokeColor);\n    }\n  });\n}\n\n/** Plots an \"X\" centered at POSITION */\nfunction drawX(img: ImageBuilder, pos: Position, fretBox: FretBox, strokeColor: string): void {\n  const { xWidth } = fretBox;\n  const x = pos.x - xWidth / 2;\n  const y = pos.y - xWidth / 2;\n\n  img\n    .newGroup('X')\n    .setStyle({\n      strokeColor: strokeColor || 'black',\n      strokeWidth: fretBox.xStroke.toString(),\n    })\n    .line(x, y, x + xWidth, y + xWidth)\n    .line(x, y + xWidth, x + xWidth, y)\n    .endGroup();\n}\n\n/** Returns first & last frets, 0 if none found. */\nfunction getFretRange(dots: Dot[]): {\n  first: number,\n  last: number\n} {\n  let max = -1;\n  let min = 300;\n\n  dots?.forEach((dot) => {\n    if (dot.fret && dot.fret > max) {\n      max = dot.fret;\n    }\n    if (dot.fret && dot.fret < min) {\n      min = dot.fret;\n    }\n  });\n\n  return {\n    first: (min < 300) ? min : 0,\n    last: (max > 0) ? max : 0,\n  };\n}\n\nexport const __test__ = {\n  newFretboard,\n};\n","/**\n * Stores, in an output-format agnostic manner, data for drawing images. Usage:\n * all methods are chainable except getData.\n * Limits: nested groups not supported; names are only available on groups, no unique checks.\n */\nimport {\n  LayerTypes,\n  StyleDef,\n  SVGImage, SVGBase,\n  CircleSVGLayer, GroupSVGLayer, LineSVGLayer, RectangleSVGLayer, TextSVGLayer,\n} from '../interfaces/SVGImage';\n\ninterface ImageContext {\n  root: SVGImage | null,\n  layer: SVGBase | null,\n  current: SVGBase | null,\n}\n\nexport class ImageBuilder implements SVGImage {\n  constructor() {\n    this.#context = {\n      root: null,\n      layer: null,\n      current: null,\n    };\n  }\n\n  #context: ImageContext;\n\n  dimensions = { width: 0, height: 0 };\n\n  layers = [];\n\n  type = LayerTypes.IMAGE;\n\n  newImage(width: number, height: number): ImageBuilder {\n    const obj: SVGImage = {\n      type: LayerTypes.IMAGE,\n      dimensions: {\n        height,\n        width,\n      },\n      layers: [],\n      style: null,\n    };\n\n    this.#context.root = obj;\n    this.#context.current = obj;\n\n    return this;\n  }\n\n  #newLayer(obj: SVGBase): ImageBuilder {\n    const hasLayers = Boolean(this.#context.current && 'layers' in this.#context.current && Array.isArray(this.#context.current.layers));\n    if (!hasLayers) {\n      return this;\n    }\n\n    obj.style = null;\n    // @ts-ignore-next-line\n    this.#context.current.layers.push(obj);\n    if (obj.type && obj.type === LayerTypes.GROUP) {\n      this.#context.current = obj;\n    } else {\n      this.#context.layer = obj;\n    }\n    return this;\n  }\n\n  newGroup(name: string): ImageBuilder {\n    const group: GroupSVGLayer = {\n      type: LayerTypes.GROUP,\n      name,\n      layers: [],\n    };\n    this.#newLayer(group);\n    this.#context.layer = null;\n    return this;\n  }\n\n  endGroup(): ImageBuilder {\n    this.#context.current = this.#context.root;\n    // this.#context.layer = this.#context.current;\n    return this;\n  }\n\n  circle(centerX: number, centerY: number, radius: number): ImageBuilder {\n    const circle: CircleSVGLayer = {\n      type: LayerTypes.CIRCLE,\n      center: {\n        x: centerX,\n        y: centerY,\n      },\n      radius,\n    };\n    return this.#newLayer(circle);\n  }\n\n  rectangle(x: number, y: number, width: number, height: number): ImageBuilder {\n    const rectangle: RectangleSVGLayer = {\n      type: LayerTypes.RECTANGLE,\n      pos: {\n        x,\n        y,\n      },\n      width,\n      height,\n    };\n    return this.#newLayer(rectangle);\n  }\n\n  line(x0: number, y0: number, x1: number, y1: number): ImageBuilder {\n    const line: LineSVGLayer = {\n      type: LayerTypes.LINE,\n      endPoints: [{\n        x: x0,\n        y: y0,\n      }, {\n        x: x1,\n        y: y1,\n      }],\n    };\n    return this.#newLayer(line);\n  }\n\n  hLine(x: number, y: number, length: number): ImageBuilder {\n    return this.line(x, y, x + (length || 1), y);\n  }\n\n  vLine(x: number, y: number, length: number): ImageBuilder {\n    return this.line(x, y, x, y + (length || 1));\n  }\n\n  text(x: number, y: number, text: string): ImageBuilder {\n    const textLayer: TextSVGLayer = {\n      type: LayerTypes.TEXT,\n      pos: { x, y },\n      text,\n    };\n    return this.#newLayer(textLayer);\n  }\n\n  setStyle(styleDef: StyleDef): ImageBuilder {\n    const target = this.#context.layer ? this.#context.layer : this.#context.current;\n    if (!target || target.style) {\n      return this;\n    }\n\n    target.style = styleDef;\n    return this;\n  }\n\n  getData(): SVGImage {\n    // @ts-ignore-next-line\n    return this.#context.root;\n  }\n}\n\nexport default ImageBuilder;\n","/**\n * Converts image JSON data to SVG XML.\n * Limits: no checks for unique Ids.\n */\n\nimport {\n  LayerTypes,\n  StyleDef,\n  SVGImage, SVGLayer,\n  CircleSVGLayer, GroupSVGLayer, LineSVGLayer, RectangleSVGLayer, TextSVGLayer,\n} from './interfaces/SVGImage';\nimport { ImageBuilder } from './classes/ImageBuilder';\n\nfunction getStyle(type: LayerTypes, style: StyleDef): string | null {\n  if (!style) {\n    return null;\n  }\n\n  let result = Object.keys(style)\n    .reduce((acc, key) => {\n      let property: string | null;\n      let value: string | null;\n      value = style[key];\n      switch (key) {\n        case 'fillColor':\n          property = 'fill';\n          break;\n        case 'fontFamily':\n          property = 'font';\n          break;\n        case 'textAlign':\n          property = 'text-anchor';\n          switch (value) {\n            case 'right':\n              value = 'end';\n              break;\n            case 'left':\n              value = 'start';\n              break;\n            default:\n              value = 'middle';\n          }\n          break;\n        case 'strokeColor':\n          property = 'stroke';\n          break;\n        case 'strokeWidth':\n          property = 'stroke-width';\n          break;\n        default:\n          property = null;\n      }\n\n      return (property && value)\n        ? `${acc}${property}:${value};`\n        : acc;\n    }, '');\n\n  if (type === LayerTypes.TEXT && !style.textAlign) {\n    result += 'text-anchor:middle;';\n  }\n\n  return result;\n}\n\n// type guards\nconst isCircle = (shape: SVGLayer): shape is CircleSVGLayer => shape.type === LayerTypes.CIRCLE;\nconst isGroup = (shape: SVGLayer): shape is GroupSVGLayer => shape.type === LayerTypes.GROUP;\nconst isLine = (shape: SVGLayer): shape is LineSVGLayer => shape.type === LayerTypes.LINE;\nconst isRectangle = (shape: SVGLayer): shape is RectangleSVGLayer => shape.type === LayerTypes.RECTANGLE;\nconst isText = (shape: SVGLayer): shape is TextSVGLayer => shape.type === LayerTypes.TEXT;\n\nfunction renderLayer(layer: SVGLayer): string {\n  let style = layer.style ? getStyle(layer.type, layer.style) : '';\n  style = style ? `style=\"${style}\"` : '';\n\n  if (isCircle(layer)) {\n    return `<circle cx=\"${layer.center.x}\" cy=\"${layer.center.y}\" r=\"${layer.radius}\" ${style} />`;\n  }\n  if (isLine(layer)) {\n    return `<line x1=\"${layer.endPoints[0].x}\" y1=\"${layer.endPoints[0].y}\" x2=\"${layer.endPoints[1].x}\" y2=\"${layer.endPoints[1].y}\" ${style} />`;\n  }\n  if (isRectangle(layer)) {\n    return `<rect x=\"${layer.pos.x}\" y=\"${layer.pos.y}\" width=\"${layer.width}\" height=\"${layer.height}\" ${style} />`;\n  }\n  if (isText(layer)) {\n    return `<text x=\"${layer.pos.x}\" y=\"${layer.pos.y}\" ${style}>${layer.text}</text>`;\n  }\n  return '';\n}\n\nfunction renderLayers(layers: SVGLayer[]): string {\n  return layers.reduce((acc: string, layer) => {\n    if (isGroup(layer)) {\n      const { name } = layer;\n      const style = layer.style ? getStyle(LayerTypes.GROUP, layer.style) : '';\n      // TODO: what was intent 15 years ago, bud? \"renderLayers(layer.layers, layer.style)\"\n      acc += `<g ${name ? (`id=\"${name}\"`) : ''} style=\"${style}\">${renderLayers(layer.layers)}</g>`;\n    } else {\n      acc += renderLayer(layer);\n    }\n    return acc;\n  }, '');\n}\n\n// TODO: let's not do this\n/** used by src/js/htmlBeast/svgPlot.ts */\nexport function toSVGString(image: SVGImage): string {\n  const { width, height } = image.dimensions;\n  return ('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" '\n      + `viewBox=\"0 0 ${width} ${height}\" `\n      + `width=\"${width}px\" height=\"${height}px\">`\n      + `${renderLayers(image.layers)}</svg>`\n  );\n}\n\nexport function toString(image: ImageBuilder): string {\n  return toSVGString(image.getData());\n}\n","import FretBox from './interfaces/FretBox';\nimport ImageBuilder from './classes/ImageBuilder';\n\nexport { FretBox, ImageBuilder };\nexport { toString, toSVGString } from './imageSVG';\nexport { generateChordSvg } from './chordSVG';\nexport { Position } from './interfaces/SVGImage';\nexport { generateTabSvg } from './tabSVG';\n","import { StringDict } from '../../tools';\n\nexport type StyleDef = StringDict;\n\nexport interface Position {\n  x: number,\n  y: number,\n}\n\n// eslint-disable-next-line no-shadow\nexport enum LayerTypes {\n  CIRCLE = 'circle',\n  GROUP = 'group',\n  IMAGE = 'image',\n  LINE = 'line',\n  RECTANGLE = 'rectangle',\n  TEXT = 'text',\n}\n\nexport interface SVGBase {\n  type: LayerTypes,\n  style?: StyleDef | null,\n}\n\nexport interface CircleSVGLayer extends SVGBase {\n  center: Position,\n  radius: number,\n}\n\nexport interface GroupSVGLayer extends SVGBase {\n  name: string,\n  layers: SVGLayer[],\n}\n\nexport interface LineSVGLayer extends SVGBase {\n  endPoints: Position[]\n}\n\nexport interface RectangleSVGLayer extends SVGBase {\n  pos: Position,\n  height: number,\n  width: number,\n}\n\nexport interface TextSVGLayer extends SVGBase {\n  pos: Position,\n  text: string,\n}\n\nexport type SVGLayer = CircleSVGLayer | GroupSVGLayer | LineSVGLayer | RectangleSVGLayer | TextSVGLayer;\n\nexport interface SVGImage extends SVGBase {\n  dimensions: {\n    width: number,\n    height: number,\n  },\n  layers: SVGLayer[],\n}\n","import ImageBuilder from './classes/ImageBuilder';\nimport { toString } from './imageSVG';\nimport { Position } from './interfaces/SVGImage';\n\nimport { settings, getNumStrings } from '../configs';\nimport { ExpandedTabs, TabBlock } from '../cpmImporter';\n\nconst { tabs: tabSettings } = settings;\n\n/**\n * Create the staff -- really the four tablature strings\n */\nfunction drawStaff(img: ImageBuilder, pos: Position, length: number): void {\n  const offset = tabSettings.lineWidth / 2;\n  const x = pos.x + offset;\n  let y = pos.y + offset;\n  const staff = img\n    .newGroup('staff')\n    .setStyle({\n      strokeColor: tabSettings.lineColor,\n      strokeWidth: `${tabSettings.lineWidth}`,\n    });\n  for (let i = 0; i < getNumStrings(); i++) {\n    staff.hLine(x, y, length);\n    y += tabSettings.lineSpacing;\n  }\n  staff.endGroup();\n}\n\n/**\n * @param isTruncate If `true` returns the length of the line, allowing for a terminating \"|\" character, othwrwise, it's for canvas width\n */\nfunction getWidth(tabs: ExpandedTabs, labelOffset: number, isTruncate: boolean): number {\n  if (!isTruncate) {\n    return (tabSettings.noteSpacing * tabs[0].length) + labelOffset + tabSettings.dotRadius;\n  }\n\n  let len = tabs[0].length;\n  let plusDot = tabSettings.dotRadius;\n  if (tabs[0][len - 1] === '|') {\n    // TODO: too much??? retest\n    len -= 1;\n    plusDot = 0;\n  }\n\n  return tabSettings.noteSpacing * len + labelOffset + plusDot;\n}\n\n/**\n * Loop over the normalized tabs emitting the dots/fingers on the passed in canvase\n * @param tabs {array} Array of normalized string data -- space (character) or int (fret number)\n * @param lineWidth Length in pixels (used only when line ends with a measure mark)\n */\nfunction drawNotes(img: ImageBuilder, pos: Position, tabs: ExpandedTabs, lineWidth: number): void {\n  const center: Position = {\n    x: 0,\n    y: pos.y,\n  };\n\n  const numberOfStrings = settings.getNumStrings();\n  tabs\n    .filter((tab, stringIndex) => stringIndex < numberOfStrings)\n    .forEach((tab) => {\n      center.x = pos.x;\n      tab.forEach((char, charIndex) => {\n        // (c !== '-'){\n        if (char === '|') {\n          const jnum = charIndex; // parseInt(chrIdx, 10);\n          const heavy = (((jnum + 1) < (tab.length - 1)) && (tab[jnum + 1] === '|')) || ((jnum === (tab.length - 1)) && (tab[jnum - 1] === '|'));\n          drawMeasure(img, {\n            x: (charIndex === tab.length - 1) ? pos.x + lineWidth : center.x,\n            y: pos.y,\n          }, heavy);\n        // eslint-disable-next-line no-restricted-globals\n        } else if (!isNaN(parseInt(char, 10))) {\n          img\n            .circle(center.x, center.y, tabSettings.dotRadius)\n            .setStyle({\n              fillColor: tabSettings.dotColor,\n            });\n          img\n            .text(center.x, center.y + 0.5 * tabSettings.dotRadius, char)\n            .setStyle({\n              fontFamily: tabSettings.textFont,\n              fillColor: tabSettings.textColor,\n            });\n        }\n        center.x += tabSettings.noteSpacing;\n      });\n\n      center.y += tabSettings.lineSpacing;\n    });\n}\n\n/**\n * Draws a vertical \"measure\" demarcation line\n */\nfunction drawMeasure(img: ImageBuilder, pos: Position, isHeavyStroke: boolean): void {\n  const offset = tabSettings.lineWidth / 2;\n  img\n    .vLine(pos.x + offset, pos.y, (getNumStrings() - 1) * tabSettings.lineSpacing)\n    .setStyle({\n      strokeColor: tabSettings.lineColor,\n      strokeWidth: `${(isHeavyStroke ? 4.5 : 1) * tabSettings.lineWidth}`,\n    });\n}\n\n/**\n * Adds the string letters on the left-side of the canvas, before the tablature\n * string lines, ex. ['A','E','C','G'];\n */\nfunction drawLabels(img: ImageBuilder, pos: Position): void {\n  const labels = settings.tuning.slice(0).reverse();\n  for (let i = 0; i < getNumStrings(); i++) {\n    img.text(1, (pos.y + (i + 0.3) * tabSettings.lineSpacing), labels[i]).setStyle({\n      fontFamily: tabSettings.labelFont,\n      fillColor: tabSettings.lineColor,\n      textAlign: 'left',\n    });\n  }\n}\n\nexport function generateTabSvg({ hasLabels, tabs }: TabBlock): string {\n  const labelOffset = (hasLabels) ? tabSettings.labelWidth : 0;\n  // how much space?\n  const height = ((getNumStrings() - 1) * tabSettings.lineSpacing) + (2 * tabSettings.dotRadius) + tabSettings.bottomPadding;\n\n  const img = new ImageBuilder().newImage(getWidth(tabs, labelOffset, false), height);\n  const pos = {\n    x: tabSettings.dotRadius + labelOffset,\n    y: 1 + tabSettings.dotRadius,\n  };\n  const lineWidth = getWidth(tabs, labelOffset, true);\n  drawStaff(img, pos, lineWidth);\n  drawNotes(img, pos, tabs, lineWidth);\n  if (hasLabels) {\n    drawLabels(img, pos);\n  }\n\n  return toString(img);\n}\n","/*!\n * Document   : UkeGeeks Song Formatter Scripts\n * Created on : Sep 15, 2012, 7:51:38 AM\n * Author     : Courts\n * Homepage   : https://github.com/buzcarter/song-formatter#readme\n */\n\nimport { Chord, runLine } from './cpmImporter';\nimport { definitions, shift, shiftChords } from './tunings';\nimport { Fix, plot } from './htmlBeast';\nimport { settings, InstrumentTunings } from './configs';\nimport scriptasaurus from './scriptasaurus';\n\nclass ChordBrush extends Chord {\n  // @ts-ignore-next-line\n  // eslint-disable-next-line class-methods-use-this\n  plot(...args): void {\n    // @ts-ignore-next-line\n    plot(...args);\n  }\n}\n\n/**\n * Finds page HTML elements & creates ukeGeek objects;\n * Reads song text, parses, draws choard diagrams.\n */\nconst publicInterface = {\n  ...scriptasaurus,\n  chordBrush: ChordBrush, // legacy\n  ChordBrush,\n  chordImport: {\n    runLine,\n  },\n  definitions: {\n    ...definitions,\n    instrument: InstrumentTunings,\n  },\n  overlapFixer: {\n    Fix,\n  },\n  settings,\n  scriptasaurus, // legacy\n  toolsLite: {\n    addClass(ele: HTMLDivElement, className: string) {\n      ele.classList.add(className);\n    },\n    removeClass(ele: HTMLDivElement, className: string) {\n      ele.classList.remove(className);\n    },\n    setClass(ele: HTMLDivElement, className: string, toggle: boolean) {\n      ele.classList.toggle(className, toggle);\n    },\n  },\n  transpose: {\n    shift,\n    shiftChords,\n  },\n};\n\n// @ts-ignore-next-line\nwindow.ukeGeeks = Object.assign(window.ukeGeeks || {}, publicInterface);\n\nexport default publicInterface;\n","import {\n  getHandlesFromClass,\n  getHandlesFromId,\n  getUnknownChordErrors,\n  processSong,\n} from './htmlBeast';\nimport { definitions } from './tunings';\nimport { JsonData, integer, logger } from './tools';\nimport { settings, InstrumentTunings, sopranoUkuleleGcea } from './configs';\nimport { Song } from './cpmImporter';\n\nexport function init(options?: JsonData): void {\n  const { addInstrument, setInstrument } = definitions;\n\n  const instrumentIndex = addInstrument(<string>options?.definitions || sopranoUkuleleGcea);\n  setInstrument(instrumentIndex, InstrumentTunings.none);\n}\n\n/**\n * Runs all Scriptasaurus methods using the element Ids defined in the settings class.\n */\nexport function run(): Song | null {\n  logger.log('run (Classic Mode)');\n  const song = processSong(getHandlesFromId());\n  if (!song) {\n    return null;\n  }\n  showUnknownChordErrors(getUnknownChordErrors());\n\n  // TODO: for legacy API\n  return Object.assign(song, {\n    chords: song.chordNames,\n  });\n}\n\n/**\n * Same as \"run\" except runs using class names, this allows you to have multiple songs on a single page.\n */\nexport function runByClasses(): Song[] {\n  const songs: Song[] = [];\n  const songWraps = document.querySelectorAll(settings.wrapClasses.wrap);\n  songWraps.forEach((wrap) => {\n    const song = processSong(getHandlesFromClass(wrap as HTMLElement));\n    if (!song) {\n      return;\n    }\n    // TODO: for legacy API\n    Object.assign(song, {\n      chords: song.chordNames,\n    });\n    songs.push(song);\n  });\n  return songs;\n}\n\n/**\n * @todo: still nececessary?\n * @param {number} offset default 0. Number of semitones to shift the tuning. See ukeGeeks.definitions.instrument.\n */\nexport const setTuningOffset = (offset: integer): void => definitions.useInstrument(offset);\n\nfunction showUnknownChordErrors(errs: string | string[]): void {\n  if (!errs.length) {\n    return;\n  }\n  const errStr = typeof errs === 'string'\n    ? errs\n    : errs.join(', ');\n  // eslint-disable-next-line no-alert\n  alert(`Forgive me, but I don't know the following chords: ${errStr}`);\n}\n\nexport default {\n  init,\n  run,\n  runByClasses,\n  setTuningOffset,\n};\n","import { JsonData } from './interfaces/CoreTypes';\n\nconst RegExes = {\n  DOUBLE_SPACES: /\\s{2,}/g,\n};\n\nexport const pack = (value: string): string => value.replace(RegExes.DOUBLE_SPACES, ' ').trim();\n\nexport const clean = (sourceObj: JsonData) => {\n  Object.keys(sourceObj).forEach((key) => {\n    delete sourceObj[key];\n  });\n  return sourceObj;\n};\n","export * from './helpers';\nexport * from './interfaces/CoreTypes';\n\nimport logger from './logger';\n\nexport {\n  logger,\n};\n","// import { JsonData } from './interfaces/CoreTypes';\n\n/* eslint-disable no-console, prefer-destructuring */\nconst error = console.error;\nconst info = console.info;\nconst log = console.log;\nconst warn = console.warn;\n\nconst json = (data: unknown) => info(JSON.stringify(data, null, 3).replace(/\\\\n/gm, '\\n'));\n\nexport default {\n  error,\n  info,\n  json,\n  log,\n  warn,\n};\n","/**\n * Defines chords and provides simple lookup (find) tools.\n */\nimport { retune, RetuneMap } from './transpose';\nimport { integer } from '../tools';\nimport { chordNameAliases, InstrumentTunings } from '../configs';\nimport { Chord, runBlock } from '../cpmImporter';\n\n/**\n * Block of CPM text, expects to find these tags: `instrument`, `tuning`, and one or more `define` statements.\n */\nconst instruments: string[] = [];\n\n/**\n * Array of \"user\" defined chords, in compactChord format. Use \"Add\" method.\n */\nlet userChords: Chord[] = [];\nlet chordCache: Chord[] = [];\nlet globalOffset = 0;\nlet retuneMap: RetuneMap[] = [];\n\n/**\n * Define an instrument's chord dictionary, this makes this instrument avaiable for showing its chord diagrams.\n */\nexport const addInstrument = (definitions: string | string[]): number => instruments.push(Array.isArray(definitions) ? definitions.join('\\n') : definitions) - 1;\n\n/** Choose which instrument's chord dictionary is used used for chord diagrams. */\nexport function useInstrument(offset: integer | string) {\n  setInstrument(InstrumentTunings.none, offset);\n}\n\nexport function setInstrument(instrumentIndex: integer, offset: integer | string = 0) {\n  globalOffset = typeof offset === 'string' ? parseInt(offset, 10) : offset;\n  if (globalOffset > 0) {\n    retuneMap = retune(globalOffset);\n  }\n  const text = instruments[instrumentIndex];\n  if (!text) {\n    // TODO: log error!!!\n    return;\n  }\n\n  const instrument = runBlock(text);\n  setChords(instrument.chords);\n}\n\n/**\n * Returns expanded ChordObject for requested \"chord\"\n */\nexport function get(chordName: string): Chord | null {\n  // try User Defined chords first\n  const match = userChords.find((c) => c.name === chordName);\n  if (match) {\n    return match;\n  }\n\n  // next: built-in chords:\n  if (globalOffset < 1) {\n    return underscoreGet(chordName);\n  }\n\n  // user has retuned the chords, need to find chord name \"as-is\",\n  // but get the fingering from the mapping\n  const name = getAlias(chordName);\n\n  return retuneMap\n    .filter((t) => name === t.original)\n    .map((t) => underscoreGet(t.transposed))\n    .filter(Boolean)\n    .reduce((acc, c) => Object.assign(\n      new Chord(chordName),\n      c && {\n        dots: c.dots,\n        muted: c.muted,\n      }), null) || null;\n}\n\n/**\n * A chord name normalizer: We don't store any chord definitions for A#, Db, D#, Gb, or Ab. Instead\n * definitions of the more common notes are stored instead. So for the A# fingering we return the\n * Bb fingering and so on.\n *\n * Returns original chord name if there is no defined alias.\n */\nfunction getAlias(chordName: string): string {\n  const n = chordName.substr(0, 2);\n  return !chordNameAliases[n] ? chordName : chordNameAliases[n] + chordName.substr(2);\n}\n\n/**\n * Pass in \"standard\" chord name, returns match from defined chords or null if not found\n */\nfunction underscoreGet(chordName: string): Chord | null {\n  const name = getAlias(chordName);\n  const chord = chordCache.find((c) => name === c.name);\n  if (!chord) {\n    return null;\n  }\n\n  return Object.assign(\n    new Chord(chordName), {\n      dots: chord.dots,\n      muted: chord.muted,\n    },\n  );\n}\n\nexport function add(chords: Chord[]): integer {\n  if (chords.length) {\n    for (let i = 0; i < chords.length; i++) {\n      userChords.push(chords[i]);\n    }\n  }\n  return userChords.length;\n}\n\nexport function replace(chords: Chord[]): integer {\n  userChords = [];\n  return add(chords);\n}\n\nexport const getChords = (): Chord[] => chordCache;\n\n// eslint-disable-next-line no-return-assign\nexport const setChords = (chords: Chord[]) => chordCache = chords;\n","import { Chord } from '../../cpmImporter';\n\nexport default class Instrument {\n  constructor(key: string, name: string, tuning: string[], chords: Chord[]) {\n    this.key = key;\n    this.name = name;\n    this.tuning = tuning;\n    this.chords = chords;\n  }\n\n  key: string;\n\n  name: string;\n\n  tuning: string[];\n\n  chords: Chord[];\n}\n","import * as definitions from './chordDefinitions';\nimport Instrument from './classes/Instrument';\n\nexport {\n  definitions,\n  Instrument,\n};\nexport default definitions;\nexport { get } from './chordDefinitions';\n// for legacy\nexport { shift, shiftChords } from './transpose';\n","/**\n * Can shift a single chord or list of chords up/down by a series of steps. Hangles\n * finding equivalent chord names (i.e. A# is same as Bb)\n */\nimport { getChords } from './chordDefinitions';\n\nimport { NumberDict } from '../tools';\n\nexport interface RetuneMap {\n  original: string,\n  transposed: string,\n}\n\ninterface ToneThing{\n  tone: number,\n  prefix: string,\n  suffix: string,\n}\n\nconst RegExes = {\n  CHORD_NAME: /^(?<prefix>[A-G][#b]?)(?<suffix>.*)/,\n};\n\n/* eslint-disable key-spacing */\nconst NoteToToneMap: NumberDict = Object.freeze({\n  A:      0,\n  'A#':   1,\n  Bb:     1,\n  B:      2,\n  C:      3,\n  'C#':   4,\n  Db:     4,\n  D:      5,\n  'D#':   6,\n  Eb:     6,\n  E:      7,\n  F:      8,\n  'F#':   9,\n  Gb:     9,\n  G:     10,\n  'G#':  11,\n  Ab:    11,\n});\n/* eslint-enable key-spacing */\n\n/**\n   * Pass in a chord name returns new chord name for the original chord shifted by \"steps\" semitones.\n  * @param name chord name, should be in chord dictionary\n  * @param steps number of semitones to transpose\n  */\nexport function shift(name: string, steps: number = 0): string | null {\n  const toneInfo = getTone(name);\n  if (toneInfo === null) {\n    return null;\n  }\n  let tone = (toneInfo.tone + steps) % 12;\n  // TODO: negative steps are allowed!!!\n  if (tone < 0) {\n    tone += 12;\n  }\n\n  // TODO: this is nuts? reduce????\n  const result = Object.keys(NoteToToneMap)\n    .filter((key) => tone === NoteToToneMap[key])\n    .reduce((acc, key) => key + toneInfo.suffix);\n\n  return result || null;\n}\n\n/**\n * Returns object with name (A - G with flat/sharp), integer value (0 - 11), and its \"suffix\" (minor, 7th, etc)\n */\nexport function getTone(name: string): ToneThing | null {\n  if (!name || typeof name !== 'string') {\n    return null;\n  }\n\n  const matches = name.match(RegExes.CHORD_NAME);\n  if (!matches?.groups) {\n    return null;\n  }\n\n  const { prefix, suffix } = matches.groups;\n  return {\n    tone: NoteToToneMap[prefix],\n    prefix,\n    suffix,\n  };\n}\n\n/**\n * Returns a mapping -- an array of JSON with \"original\" chord name and \"transposed\" chord names.\n */\nexport function retune(offset: number | undefined): RetuneMap[] {\n  offset = offset || 0;\n  const hasOffset = offset === 0;\n\n  return getChords()\n    .map((chord) => ({\n      original: chord.name,\n      transposed: hasOffset ? chord.name : shift(chord.name, offset) || '',\n    }));\n}\n\n/**\n * returns copy of `chordNames`, each chord shifted by `semitoneSteps` steps (up or down)\n */\nexport const shiftChords = (chordNames: string[], semitoneSteps: number): string[] => chordNames\n  .map((c) => shift(c, semitoneSteps))\n  .filter(Boolean) as string[];\n","/**\n * Soprano Uke chord dictionary.\n * Required: Instrument Name and Tuning (string names)\n */\nexport default `\n{instrument: Soprano Ukulele}\n{tuning: G C E A}`\n\n//  Ab returns G#\n//  A\n// -------------------------------------------------------\n+ `\n{define: A frets 2 1 0 0 fingers 2 1 0 0}\n{define: Am frets 2 0 0 0 fingers 1 0 0 0}\n{define: A7 frets 0 1 0 0 fingers 0 1 0 0}\n{define: A7sus4 frets 0 2 0 0 fingers 0 2 0 0}\n{define: Am7 frets 0 0 0 0}\n{define: Adim frets 2 3 2 3 fingers 1 3 2 4}\n{define: Amaj7 frets 1 1 0 0 fingers 1 2 0 0}\n{define: A6 frets 2 4 2 4 fingers 1 3 2 4}\n{define: Asus2 frets 2 4 5 2 fingers 2 3 4 1}\n{define: Asus4 frets 2 2 0 0 fingers 1 2 0 0}\n{define: Aaug frets 2 1 1 4 fingers 2 1 1 4 add: string 1 fret 1 finger 1 add: string 4 fret 1 finger 1}\n{define: Am6 frets 2 4 2 3 fingers 1 3 1 2 add: string 2 fret 2 finger 1}\n{define: A9 frets 0 1 0 2 fingers 0 1 0 2}`\n\n//  A# returns Bb\n//  Bb\n// -------------------------------------------------------\n+ `\n{define: Bb frets 3 2 1 1 fingers 3 2 1 1}\n{define: Bbm frets 3 1 1 1 fingers 3 1 1 1 add: string 1 fret 1 finger 1}\n{define: Bb7 frets 1 2 1 1 fingers 1 2 1 1 add: string 2 fret 1 finger 1}\n{define: Bb7sus4 frets 1 3 1 1 fingers 1 3 1 1 add: string 2 fret 1 finger 1}\n{define: Bbm7 frets 1 1 1 1 fingers 1 1 1 1}\n{define: Bbdim frets 0 1 0 1 fingers 0 1 0 2}\n{define: Bbmaj7 frets 2 2 1 1 fingers 2 2 1 1}\n{define: Bb6 frets 0 2 1 1 fingers 0 2 1 1}\n{define: Bbm6 frets 0 1 1 1 fingers 0 1 1 1}\n{define: Bbsus2 frets 3 0 1 1 fingers 3 0 1 1}\n{define: Bbsus4 frets 3 3 1 1 fingers 3 3 1 1}\n{define: Bbaug frets 3 2 2 5 fingers 2 1 1 4 add: string 1 fret 2 finger 1 add: string 4 fret 2 finger 1}\n{define: Bb9 frets 1 2 1 3 fingers 2 1 4 3}\n{define: Bbm7-5 frets 1 1 0 1 fingers 1 2 0 3}`\n\n// {define: Bbmaj7 frets 2 2 1 1 fingers 2 2 1 1}\n//  B\n// -------------------------------------------------------\n+ `\n{define: B frets 4 3 2 2 fingers 3 2 1 1}\n{define: Bm frets 4 2 2 2 fingers 3 1 1 1 add: string 1 fret 2 finger 1}\n{define: Bm6 frets 1 2 2 2 fingers 1 2 3 4}\n{define: B7 frets 2 3 2 2 fingers 1 2 1 1 add: string 2 fret 2 finger 1}\n{define: B7sus4 frets 2 4 2 2 fingers 1 3 1 1 add: string 2 fret 2 finger 1}\n{define: Bm7 frets 2 2 2 2 fingers 1 1 1 1}\n{define: Bdim frets 1 2 1 2 fingers 1 3 2 4}\n{define: Bmaj7 frets 3 3 2 2 fingers 2 2 1 1}\n{define: B6 frets 1 3 2 2 fingers 1 4 2 3}\n{define: Bsus2 frets 5 1 2 2 fingers 4 1 3 2}\n{define: Bsus4 frets 4 4 2 2 fingers 2 2 1 1}\n{define: Baug frets 0 3 3 2 fingers 0 2 2 1}\n{define: B9 frets 2 3 2 4}`\n\n//  C\n// -------------------------------------------------------\n+ `\n{define: C frets 0 0 0 3 fingers 0 0 0 3}\n{define: Cm frets 0 3 3 3 fingers 0 1 2 3}\n{define: C7 frets 0 0 0 1 fingers 0 0 0 1}\n{define: C7sus4 frets 0 0 1 1 fingers 0 0 1 1}\n{define: Cm7 frets 3 3 3 3 fingers 1 1 1 1}\n{define: Cdim frets 2 3 2 3 fingers 1 3 2 4}\n{define: Cmaj7 frets 0 0 0 2 fingers 0 0 0 1}\n{define: C6 frets 0 0 0 0}\n{define: Cm6 frets 0 3 5 5 fingers 0 1 3 1}\n{define: Csus2 frets 0 2 3 3 fingers 0 1 2 2}\n{define: Csus4 frets 0 0 1 3 fingers 0 0 1 3}\n{define: Caug frets 1 0 0 3 fingers 1 0 0 4}\n{define: C9 frets 0 2 0 1 fingers 0 2 0 1}`\n\n//  C#\n// -------------------------------------------------------\n+ `\n{define: C# frets 1 1 1 4 fingers 1 1 1 4 add: string 4 fret 1 finger 1}\n{define: C#m frets 1 4 4 4 fingers 1 2 3 3}\n{define: C#7 frets 1 1 1 2 fingers 1 1 1 2 add: string 4 fret 1 finger 1}\n{define: C#7sus4 frets 1 1 2 2 fingers 1 1 2 3}\n{define: C#m7 frets 1 4 4 2 fingers 1 3 3 2}\n{define: C#dim frets 0 1 0 1 fingers 0 1 0 2}\n{define: C#maj7 frets 1 1 1 3 fingers 1 1 1 3 add: string 4 fret 1 finger 1}\n{define: C#6 frets 1 1 1 1 fingers 1 1 1 1}\n{define: C#m6 frets 1 1 0 1 fingers 1 2 0 3}\n{define: C#sus2 frets 1 3 4 4 fingers 1 2 3 3}\n{define: C#sus4 frets 1 1 2 4 fingers 1 1 2 4}\n{define: C#aug frets 2 1 1 4 fingers 2 1 1 4 add: string 1 fret 1 finger 1 add: string 4 fret 1 finger 1}\n{define: C#9 frets 1 3 1 2}`\n\n//  Db returns C#\n//  D\n// -------------------------------------------------------\n+ `\n{define: D frets 2 2 2 0 fingers 1 1 1 0}\n{define: Dm frets 2 2 1 0 fingers 2 2 1 0}\n{define: Dm6 frets 0 2 1 2 fingers 0 2 1 3}\n{define: D7 frets 2 2 2 3 fingers 1 1 1 2 add: string 4 fret 2 finger 1}\n{define: D7sus4 frets 2 2 3 3 fingers 1 1 2 3}\n{define: Dm7 frets 2 2 1 3 fingers 2 2 1 3}\n{define: Ddim frets 1 2 1 2 fingers 1 3 2 4}\n{define: Dmaj7 frets 2 2 2 4 fingers 1 1 1 2 add: string 4 fret 2 finger 1}\n{define: D6 frets 2 2 2 2 fingers 2 2 2 2}\n{define: Dsus2 frets 2 2 0 0 fingers 1 2 0 0}\n{define: Dsus4 frets 0 2 3 0 fingers 0 1 2 0}\n{define: Daug frets 3 2 2 5 fingers 2 1 1 4 add: string 1 fret 2 finger 1 add: string 4 fret 2 finger 1}\n{define: D9 frets 2 4 2 3}`\n\n//  D# returns Eb\n//  Eb\n// -------------------------------------------------------\n+ `\n{define: Eb frets 0 3 3 1 fingers 0 2 2 1}\n{define: Ebm frets 3 3 2 1 fingers 3 3 2 1}\n{define: Eb7 frets 3 3 3 4 fingers 1 1 1 2 add: string 4 fret 3 finger 1}\n{define: Eb7sus4 frets 3 3 4 4 fingers 1 1 2 3}\n{define: Ebm7 frets 3 3 2 4 fingers 2 2 1 4}\n{define: Ebdim frets 2 3 2 3 fingers 1 3 2 4}\n{define: Ebmaj7 frets 3 3 3 5 fingers 1 1 1 2 add: string 4 fret 3 finger 1}\n{define: Eb6 frets 3 3 3 3 fingers 1 1 1 1}\n{define: Ebm6 frets 3 3 2 3 fingers 2 3 1 4}\n{define: Ebsus2 frets 3 3 1 1 fingers 2 2 1 1}\n{define: Ebsus4 frets 1 3 4 1 fingers 2 3 4 1}\n{define: Ebaug frets 0 3 3 2 fingers 0 2 2 1}\n{define: Eb9 frets 0 1 1 1}`\n\n//  E\n// -------------------------------------------------------\n+ `\n{define: E frets 4 4 4 2 fingers 2 3 4 1}\n{define: Em frets 0 4 3 2 fingers 0 3 2 1}\n{define: E7 frets 1 2 0 2 fingers 1 2 0 3}\n{define: E7sus4 frets 2 2 0 2 fingers 2 3 0 4}\n{define: Em6 frets 4 4 3 4 fingers 2 3 1 4}\n{define: Em7 frets 0 2 0 2 fingers 0 1 0 2}\n{define: Edim frets 0 1 0 1 fingers 0 1 0 2}\n{define: Emaj7 frets 1 3 0 2 fingers 1 3 0 2}\n{define: E6 frets 4 4 4 4 fingers 1 1 1 1}\n{define: Esus2 frets 4 4 2 2 fingers 3 3 1 1}\n{define: Esus4 frets 2 4 0 2 fingers 2 4 0 1}\n{define: Eaug frets 1 0 0 3 fingers 1 0 0 4}\n{define: E9 frets 1 2 2 2}`\n\n//  F\n// -------------------------------------------------------\n+ `\n{define: F frets 2 0 1 0 fingers 2 0 1 0}\n{define: Fm frets 1 0 1 3 fingers 1 0 2 4}\n{define: F7 frets 2 3 1 0 fingers 2 3 1 0}\n{define: F7sus4 frets 3 3 1 3 fingers 2 3 1 4}\n{define: Fm6 frets 1 2 1 3 fingers 1 2 1 3 add: string 2 fret 1 finger 1 add: string 4 fret 1 finger 1}\n{define: Fm7 frets 1 3 1 3 fingers 1 3 2 4}\n{define: Fdim frets 1 2 1 2 fingers 1 3 2 4}\n{define: Fmaj7 frets 5 5 0 0 fingers 1 2 0 0}\n{define: F6 frets 2 2 1 3 fingers 2 2 1 4}\n{define: Fsus2 frets 0 0 1 3 fingers 0 0 1 3}\n{define: Fsus4 frets 3 0 1 3 fingers 3 0 1 4}\n{define: F6sus2 frets 0 0 1 3 fingers 0 0 1 3}\n{define: F6sus4 frets 3 0 1 1 fingers 3 0 1 1}\n{define: F6aug frets 2 1 1 4 fingers 2 1 1 4 add: string 1 fret 1 finger 1 add: string 4 fret 1 finger 1}\n{define: F9 frets 2 3 3 3}\n{define: Faug frets 2 1 1 0 fingers 3 1 2 0}`\n\n//  F#\n// -------------------------------------------------------\n+ `\n{define: F# frets 3 1 2 1 fingers 3 1 2 1 add: string 1 fret 1 finger 1 add: string 3 fret 1 finger 1}\n{define: F#m frets 2 1 2 0 fingers 2 1 3 0}\n{define: F#7 frets 3 4 2 4 fingers 2 3 1 4}\n{define: F#7sus4 frets 4 4 2 4 fingers 2 3 1 4}\n{define: F#m7 frets 2 4 2 4 fingers 1 3 2 4}\n{define: F#dim frets 2 3 2 3 fingers 1 3 2 4}\n{define: F#maj7 frets 3 5 2 4 fingers 2 4 1 3}\n{define: F#m6 frets 2 1 2 4 fingers 2 1 3 4}\n{define: F#6 frets 3 3 2 4 fingers 2 2 1 4}\n{define: F#sus2 frets 1 1 2 4 fingers 1 1 2 4}\n{define: F#sus4 frets 4 1 2 2 fingers 4 1 2 3}\n{define: F#aug frets 3 2 2 5 fingers 2 1 1 4 add: string 1 fret 2 finger 1 add: string 4 fret 2 finger 1}\n{define: F#9 frets 1 1 0 1}`\n\n//  Gb returns F#\n//  G\n// -------------------------------------------------------\n+ `\n{define: G frets 0 2 3 2 fingers 0 1 3 2}\n{define: Gm frets 0 2 3 1 fingers 0 2 3 1}\n{define: Gm6 frets 0 2 0 1 fingers 0 2 0 1}\n{define: G7 frets 0 2 1 2 fingers 0 2 1 3}\n{define: G7sus4 frets 0 2 1 3 fingers 0 2 1 4}\n{define: Gm7 frets 0 2 1 1 fingers 0 2 1 1}\n{define: Gdim frets 0 1 0 1 fingers 0 1 0 2}\n{define: Gmaj7 frets 0 2 2 2 fingers 0 1 2 3}\n{define: G6 frets 0 2 0 2 fingers 0 1 0 2}\n{define: Gsus2 frets 0 2 3 0 fingers 0 1 2 0}\n{define: Gsus4 frets 0 2 3 3 fingers 0 1 2 3}\n{define: Gaug frets 0 3 3 2 fingers 0 2 2 1}\n{define: G9 frets 2 2 1 2}`\n// {define: Gsus4 frets 0 2 3 3}\n\n//  G#\n// -------------------------------------------------------\n+ `\n{define: G# frets 5 3 4 3 fingers 3 1 2 1 add: string 1 fret 3 finger 1 add: string 3 fret 3 finger 1}\n{define: G#m frets 1 3 4 2 fingers 1 3 4 2}\n{define: G#7 frets 1 3 2 3 fingers 1 3 2 4}\n{define: G#7sus4 frets 1 3 2 4 fingers 1 3 2 4}\n{define: G#m7 frets 1 3 2 2 fingers 1 4 2 3}\n{define: G#dim frets 1 2 1 2 fingers 1 3 2 4}\n{define: G#maj7 frets 1 3 3 3 fingers 1 2 2 3}\n{define: G#6 frets 1 3 1 3 fingers 1 3 2 4}\n{define: G#m6 frets 1 3 1 2 fingers 1 3 1 2 add: string 2 fret 1 finger 1 add: string 4 fret 1 finger 1}\n{define: G#sus2 frets 1 3 4 1 fingers 2 3 4 1}\n{define: G#sus4 frets 1 3 4 4 fingers 1 2 3 3}\n{define: G#aug frets 1 0 0 3 fingers 1 0 0 4}\n{define: G#9 frets 1 0 2 1 fingers 1 0 3 2}`\n\n//  slash chords & other oddities\n// -------------------------------------------------------\n+ `\n{define: C-F frets 2 0 1 3}\n{define: D/A frets 2 2 2 0}\n{define: Dm/C frets 2 2 1 3}\n{define: Fm7/C frets 1 3 1 3}\n{define: G/B frets 0 2 3 2}\n{define: G/F# frets 0 2 2 2}\n{define: G/F frets 0 2 1 2}\n{define: G7/B frets 0 2 1 2}\n`;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(206);\n"],"names":["chordNameAliases","Object","freeze","Db","Gb","Ab","InstrumentTunings","none","sopranoUke","baritoneUke","settings","sopranoUkuleleGcea","getLastStringName","getNumStrings","Settings","seal","fonts","dot","text","fret","colors","fretLines","dots","dotText","fretText","xStroke","fretBox","showText","height","width","fretSpace","stringSpace","dotRadius","lineWidth","topLeftPos","x","y","xWidth","inlineFretBox","ids","songMeta","songText","canvas","container","wrapClasses","wrap","diagrams","opts","columnsEnabled","retainBrackets","ignoreCommonChords","sortAlphabetical","autoFixOverlaps","debugVerbose","inlineDiagrams","numFrets","tuning","length","defaultInstrument","tabs","lineSpacing","noteSpacing","lineColor","labelWidth","labelFont","dotColor","textFont","textColor","bottomPadding","commonChords","RegExes","ADD_SPLIT","KEYWORDS_SPLIT","SPACES_SPLIT","KEYWORDS","TRIM","HAS_DEFINE_TAG","toDots","frets","fingers","reduce","ignoreMe","index","value","fretNumber","parseInt","finger","push","runLine","line","test","pairs","replace","split","key","chordArrays","result","trim","toLowerCase","addIn","input","string","getAddIn","add","name","map","getValues","muted","log","lines","filter","Boolean","constructor","this","title","album","artist","st","st2","hasChords","ugsMeta","chordDefs","chordNames","columnCount","songBlocks","BLOCKS","TAB_BLOCKS","CHORUS_BLOCKS","PRE_TAG","HTML_COMMENT","COLUMN_BREAK","CHORD","ALL_CHORDS","INSTRUCTION","COMMAND_ARGS","COMMAND_VERB","firstChord","isSongBlock","block","type","BlockTypes","TabBlock","isTabBlock","getBlockType","ChorusBlock","TextBlock","getInfo","rtn","forEach","song","hasBeenInitialized","Comment","isBlockBoundary","textToSongBlocks","stripHtml","verbToBlockTypeHash","CpmInstructions","Title","titleShort","Artist","subtitle","Subtitle","subtitleShort","Album","comment","commentShort","Key","keyShort","define","ChordDefinition","UkeGeeksMeta","args","verb","parseInstructions","columnBreak","columnBreakShort","ColumnBreak","newPage","newPageShort","NewPage","parseSimpleInstructions","chordFound","hasOnlyChords","matches","match","ChordOnlyText","ChordText","PlainText","markChordLines","assign","clean","readTabs","expandTabs","echo","parseSongBlocks","info","t","d","logger","json","__test__","getTypeName","keys","find","i","typeName","errs","msg","e","getChordNames","acc","includes","Song","Dot","Chord","parseCPM","runBlock","INSTRUMENT","TUNING","getTuning","pack","getInstrument","chords","runLines","getKey","INT","TWO_DIGITS","ONE_DIGIT","DOUBLE_DASH","SINGLE_DASH","TRAILING_DASH","stripStringLabels","tabStrings","substr","getFretNumbers","getSymbols","slice","symbols","sym","getMinLineLength","minLength","getGuideLine","guide","some","lastGuide","getPackedLines","packed","Array","fill","stringIdx","lineIdx","fretCount","char","guideIdx","chrNote","hasLabels","ChordsStyles","INLINE_SPACER","PageStyles","INLINE_DIAGRAMS","NO_CHORDS","RefDiagramsStyles","IGNORED_CHORDS","SongStyles","UgsMeta","Tabs","Chorus","PreChords","PrePlain","NoLyrics","ColumnWrap","ColumnCount","Column","SvgChordStyles","CHORD_IMG","regEx","packChords","openBracket","closeBracket","encloseChords","meta","querySelectorAll","document","getElementById","HTMLHandles","get","getHandlesFromClass","getHandlesFromId","getUnknownChordErrors","processSong","plot","Fix","getBox","ele","box","top","left","right","isNaN","offsetLeft","offsetTop","scrollLeft","scrollTop","offsetParent","getOffsets","getWidth","em","getElementsByTagName","emWidth","clip","style","pixelWidth","offsetWidth","elements","from","paddingRight","codeA","codeB","strongA","strongB","boxA","boxB","b","a","checkChords","errList","handles","metaBlockTypes","innerHTML","songToHTML","exclude","include","blocksOnly","init","show","classList","showInline","concat","getErrors","toggle","TACET","errors","ignoreMatchList","htmlHandles","sort","chordName","prototype","indexOf","chord","para","createElement","className","join","appendChild","getAttribute","getIgnoredChords","songBlocksToHTML","options","nextType","isArray","html","generateTabSvg","firstLine","preClasses","currentType","lastType","Undefined","tempSongBlocks","markupChords","chordBox","fontSettings","colorSettings","img","generateChordSvg","element","image","wrapper","toSVGString","getData","newFretboard","topX","topY","numStrings","fretColor","offset","stringLinesHeight","fretLinesWidth","newDims","requiredWidth","requiredHeight","adjustDimensions","fretboard","newImage","newGroup","setStyle","fillColor","strokeColor","strokeWidth","toString","lineX","vLine","hLine","rectangle","endGroup","pos","centers","fudgeY","fretRange","max","min","first","last","getFretRange","firstFret","stringNbr","dotPos","circle","fontFamily","txtPos","textAlign","isMuted","drawX","mutedStrings","ImageBuilder","dimensions","layers","LayerTypes","IMAGE","root","layer","current","obj","group","GROUP","centerX","centerY","radius","CIRCLE","center","RECTANGLE","x0","y0","x1","y1","LINE","endPoints","textLayer","TEXT","styleDef","target","getStyle","property","isCircle","shape","isGroup","isLine","isRectangle","isText","renderLayers","renderLayer","tabSettings","labelOffset","isTruncate","len","plusDot","staff","drawStaff","numberOfStrings","tab","stringIndex","charIndex","jnum","heavy","isHeavyStroke","drawMeasure","drawNotes","labels","reverse","drawLabels","ChordBrush","publicInterface","chordBrush","chordImport","definitions","instrument","overlapFixer","scriptasaurus","toolsLite","addClass","removeClass","remove","setClass","transpose","shift","shiftChords","window","ukeGeeks","addInstrument","setInstrument","run","errStr","alert","showUnknownChordErrors","runByClasses","songs","setTuningOffset","useInstrument","sourceObj","error","console","warn","data","JSON","stringify","instruments","userChords","chordCache","globalOffset","retuneMap","instrumentIndex","retune","setChords","getAlias","n","underscoreGet","c","original","transposed","getChords","Instrument","CHORD_NAME","NoteToToneMap","A","Bb","B","C","D","Eb","E","F","G","steps","toneInfo","getTone","tone","suffix","groups","prefix","hasOffset","semitoneSteps","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","definition","o","defineProperty","enumerable","prop","hasOwnProperty","r","Symbol","toStringTag"],"sourceRoot":""}